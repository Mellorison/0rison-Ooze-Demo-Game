<?xml version="1.0"?>
<doc>
    <assembly>
        <name>0risonity</name>
    </assembly>
    <members>
        <member name="T:_0rison.PolygonCollider">
            <summary>
            Polygon Collider.  Only works with convex polygons!
            </summary>
        </member>
        <member name="F:_0rison.PolygonCollider.AutoTransform">
            <summary>
            Determines if the Polygon will be returned transformed with the Rotation, Scale, and Flips.
            </summary>
        </member>
        <member name="T:_0rison.Alarm">
            <summary>
            Component that counts down and executes a function.  After it has executed it removes itself.
            </summary>
        </member>
        <member name="F:_0rison.Alarm.Delay">
            <summary>
            The amount of time that must pass before the function activates.
            </summary>
        </member>
        <member name="F:_0rison.Alarm.Function">
            <summary>
            The method to call when the timer reaches the set delay.
            </summary>
        </member>
        <member name="M:_0rison.Alarm.#ctor(System.Action,System.Single)">
            <summary>
            Create an Alarm.
            </summary>
            <param name="function">The method to call when the timer reaches the set delay.</param>
            <param name="delay">The amount of time that must pass before the method is called.</param>
        </member>
        <member name="M:_0rison.Alarm.Update">
            <summary>
            Update the Alarm.
            </summary>
        </member>
        <member name="T:_0rison.AutoTimer">
            <summary>
            A timer that automatically counts on an increment.  Useful for handling things like cooldowns.
            </summary>
        </member>
        <member name="F:_0rison.AutoTimer.Value">
            <summary>
            The current value of the timer.
            </summary>
        </member>
        <member name="F:_0rison.AutoTimer.Max">
            <summary>
            The maximum possible value of the timer.
            </summary>
        </member>
        <member name="F:_0rison.AutoTimer.Min">
            <summary>
            The minimum possible value of the timer.
            </summary>
        </member>
        <member name="F:_0rison.AutoTimer.Increment">
            <summary>
            How much the timer increments each update.
            </summary>
        </member>
        <member name="P:_0rison.AutoTimer.Paused">
            <summary>
            If the timer is currently paused.
            </summary>
        </member>
        <member name="P:_0rison.AutoTimer.AtMax">
            <summary>
            If the timer is currently at its maximum value.
            </summary>
        </member>
        <member name="P:_0rison.AutoTimer.AtMin">
            <summary>
            If the timer is currently at its minimum value.
            </summary>
        </member>
        <member name="M:_0rison.AutoTimer.#ctor(System.Single)">
            <summary>
            Create an AutoTimer.
            </summary>
            <param name="max">The maximum value of the timer.</param>
        </member>
        <member name="M:_0rison.AutoTimer.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create an AutoTimer.
            </summary>
            <param name="value">The initial value of the timer.</param>
            <param name="min">The minimum value of the timer.</param>
            <param name="max">The maximum value of the timer.</param>
            <param name="increment">The value that the timer increments with each update.</param>
        </member>
        <member name="M:_0rison.AutoTimer.Update">
            <summary>
            Update the AutoTimer.
            </summary>
        </member>
        <member name="M:_0rison.AutoTimer.Reset">
            <summary>
            Reset the timer to 0.
            </summary>
        </member>
        <member name="M:_0rison.AutoTimer.Pause">
            <summary>
            Pause the timer.
            </summary>
        </member>
        <member name="M:_0rison.AutoTimer.Resume">
            <summary>
            Resume the timer if paused.
            </summary>
        </member>
        <member name="M:_0rison.AutoTimer.Start">
            <summary>
            Start the timer again from 0.
            </summary>
        </member>
        <member name="M:_0rison.AutoTimer.Stop">
            <summary>
            Stop the timer and set the value to 0.
            </summary>
        </member>
        <member name="T:_0rison.Axis">
            <summary>
            Component that represents an axis of input.  Interprets both X and Y from -1 to 1.  Can use multiple
            sources of input like keyboard, mouse buttons, or joystick axes and buttons.  Input can also be delivered from code.
            </summary>
        </member>
        <member name="F:_0rison.Axis.Enabled">
            <summary>
            Determines if the axis is currently enabled.  If false, X and Y will report 0.
            </summary>
        </member>
        <member name="F:_0rison.Axis.DeadZone">
            <summary>
            The range that must be exceeded by joysticks in order for their input to register.
            </summary>
        </member>
        <member name="F:_0rison.Axis.RemapRange">
            <summary>
            Determines if the DeadZone will be treated as 0 for joysticks.
            If true, remaps the range DeadZone to 100 to 0 to 1.
            If false, remaps the range 0 to 100 to 0 to 1.
            </summary>
        </member>
        <member name="F:_0rison.Axis.RoundInput">
            <summary>
            Determines if raw data coming from the joysticks should be rounded to 2 digits.
            </summary>
        </member>
        <member name="F:_0rison.Axis.Locked">
            <summary>
            Determines if input has any effect on the axis.  When set to true the axis will remain at
            the X and Y it was at when locked.
            </summary>
        </member>
        <member name="P:_0rison.Axis.X">
            <summary>
            The X position of the axis from -1 to 1.
            </summary>
        </member>
        <member name="P:_0rison.Axis.Y">
            <summary>
            The Y position of the axis from -1 to 1.
            </summary>
        </member>
        <member name="P:_0rison.Axis.LastX">
            <summary>
            The previous X position of the axis.
            </summary>
        </member>
        <member name="P:_0rison.Axis.LastY">
            <summary>
            The previous Y position of the axis.
            </summary>
        </member>
        <member name="P:_0rison.Axis.ForcedInput">
            <summary>
            Check if the axis is currently forced.
            </summary>
        </member>
        <member name="P:_0rison.Axis.HasInput">
            <summary>
            Check if the axis has any means of input currently registered to it.
            </summary>
        </member>
        <member name="P:_0rison.Axis.Neutral">
            <summary>
            Check of the axis is completely neutral.
            </summary>
        </member>
        <member name="M:_0rison.Axis.#ctor">
            <summary>
            Create a new Axis.
            </summary>
        </member>
        <member name="M:_0rison.Axis.#ctor(_0rison.Key,_0rison.Key,_0rison.Key,_0rison.Key)">
            <summary>
            Create a new Axis using Keys.
            </summary>
            <param name="up">The Key for Up.</param>
            <param name="right">The Key for Right.</param>
            <param name="down">The Key for Down.</param>
            <param name="left">The Key for Left.</param>
        </member>
        <member name="M:_0rison.Axis.#ctor(_0rison.JoyAxis,_0rison.JoyAxis,System.Int32)">
            <summary>
            Create a new Axis using a joystick axis.
            </summary>
            <param name="x">The JoyAxis to use for X.</param>
            <param name="y">The JoyAxis to use for Y.</param>
            <param name="joystick">The joystick id to use.</param>
        </member>
        <member name="M:_0rison.Axis.#ctor(_0rison.AxisButton,_0rison.AxisButton,_0rison.AxisButton,_0rison.AxisButton,System.Int32)">
            <summary>
            Create a new Axis using AxisButtons.
            </summary>
            <param name="up">The AxisButton for Up.</param>
            <param name="right">The AxisButton for Right.</param>
            <param name="down">The AxisButton for Down.</param>
            <param name="left">The AxisButton for Left.</param>
            <param name="joystick">The joystick id to use.</param>
        </member>
        <member name="M:_0rison.Axis.AddAxis(_0rison.JoyAxis,_0rison.JoyAxis,System.Int32)">
            <summary>
            Add a joystick axis.
            </summary>
            <param name="x">The x axis of the joystick.</param>
            <param name="y">The y axis of the joystick.</param>
            <param name="joystick">The joystick id.</param>
            <returns>The Axis.</returns>
        </member>
        <member name="M:_0rison.Axis.AddButton(System.Int32,_0rison.Direction,System.Int32)">
            <summary>
            Add a joystick button.
            </summary>
            <param name="button">The joystick button id.</param>
            <param name="direction">The direction this button should effect.</param>
            <param name="joystick">The joystick id.</param>
            <returns>The Axis.</returns>
        </member>
        <member name="M:_0rison.Axis.AddButton(_0rison.AxisButton,_0rison.Direction,System.Int32)">
            <summary>
            Add a joystick axis button.
            </summary>
            <param name="button">The joystick axis button.</param>
            <param name="direction">The direction this axis button should effect.</param>
            <param name="joystick">The joystick id.</param>
            <returns>The Axis.</returns>
        </member>
        <member name="M:_0rison.Axis.AddKey(_0rison.Key,_0rison.Direction)">
            <summary>
            Add a key.
            </summary>
            <param name="key">The keyboard key.</param>
            <param name="direction">The direction this key should effect.</param>
            <returns>The Axis.</returns>
        </member>
        <member name="M:_0rison.Axis.AddKeys(_0rison.Key[])">
            <summary>
            Add keys.
            </summary>
            <param name="k">Four keys to create a pair of axes from (Up, Right, Down, Left).</param>
            <returns>The Axis.</returns>
        </member>
        <member name="M:_0rison.Axis.ForceState(System.Single,System.Single)">
            <summary>
            Force the axis state.
            </summary>
            <param name="x">The forced x state.</param>
            <param name="y">The forced y state.</param>
        </member>
        <member name="M:_0rison.Axis.ForceStateX(System.Single)">
            <summary>
            Force the axis x state.
            </summary>
            <param name="x">The forced x state.</param>
        </member>
        <member name="M:_0rison.Axis.ForceStateY(System.Single)">
            <summary>
            Force the axis y state.
            </summary>
            <param name="y">The forced y state.</param>
        </member>
        <member name="M:_0rison.Axis.ReleaseState">
            <summary>
            Relinquish control of the axis back to input.
            </summary>
        </member>
        <member name="M:_0rison.Axis.UpdateFirst">
            <summary>
            Update the Axis.
            </summary>
        </member>
        <member name="M:_0rison.Bone.AddBone(_0rison.Bone)">
            <summary>
            Add a bone as a child of this bone.  This should be done via a Skeleton!
            </summary>
            <param name="e">The bone to add.</param>
            <returns>The added bone.</returns>
        </member>
        <member name="M:_0rison.Bone.GetAllChildren">
            <summary>
            Gets all the children of a specified Bone.
            </summary>
            <returns>A list of bones that are the children of the specified Bone.</returns>
        </member>
        <member name="T:_0rison.Button">
            <summary>
            Component used for interpreting input as a button. It can recieve input from multiple sources
            including keyboard, mouse buttons, or joystick buttons and axes. The button input can also be
            controlled in code.
            </summary>
        </member>
        <member name="F:_0rison.Button.Keys">
            <summary>
            The keys registered to the Button.
            </summary>
        </member>
        <member name="F:_0rison.Button.Buttons">
            <summary>
            The joystick Buttons registered to the Button.
            </summary>
        </member>
        <member name="F:_0rison.Button.MouseButtons">
            <summary>
            The mouse buttons registered to the Button.
            </summary>
        </member>
        <member name="F:_0rison.Button.MouseWheel">
            <summary>
            The mouse wheel registered to the Button.
            </summary>
        </member>
        <member name="F:_0rison.Button.Enabled">
            <summary>
            Determines if the Button is enabled.  If not enabled all tests return false.
            </summary>
        </member>
        <member name="F:_0rison.Button.Name">
            <summary>
            The name of the Button.  Mostly used by the Controller class.
            </summary>
        </member>
        <member name="P:_0rison.Button.ForcedInput">
            <summary>
            If the button is currently controlled 
            </summary>
        </member>
        <member name="P:_0rison.Button.Pressed">
            <summary>
            Check if the button has been pressed.
            </summary>
        </member>
        <member name="P:_0rison.Button.Released">
            <summary>
            Check if the button has been released.
            </summary>
        </member>
        <member name="P:_0rison.Button.Down">
            <summary>
            Check if the button is down.
            </summary>
        </member>
        <member name="P:_0rison.Button.Up">
            <summary>
            Check if the button is up.
            </summary>
        </member>
        <member name="M:_0rison.Button.#ctor(System.String)">
            <summary>
            Create a Button.
            </summary>
            <param name="name">Optional string name of the button.</param>
        </member>
        <member name="M:_0rison.Button.AddKey(_0rison.Key[])">
            <summary>
            Add a keyboard key to the Button.
            </summary>
            <param name="keys">The key to add.</param>
            <returns>The Button.</returns>
        </member>
        <member name="M:_0rison.Button.AddMouseButton(_0rison.MouseButton[])">
            <summary>
            Add a mouse button to the Button.
            </summary>
            <param name="mouseButtons">The mouse button to add.</param>
            <returns>The Button.</returns>
        </member>
        <member name="M:_0rison.Button.AddMouseWheel(_0rison.MouseWheelDirection)">
            <summary>
            Add the mouse wheel to the Button.
            </summary>
            <param name="direction">The mouse wheel direction to add.</param>
            <returns>The Button.</returns>
        </member>
        <member name="M:_0rison.Button.AddButton(System.Int32,System.Int32)">
            <summary>
            Add a joystick button to the Button.
            </summary>
            <param name="button">The joystick button to add.</param>
            <param name="joystick">The joystick id of the button to add.</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Button.AddAxisButton(_0rison.AxisButton,System.Int32)">
            <summary>
            Add a joystick AxisButton to the Button.
            </summary>
            <param name="button">The AxisButton to add.</param>
            <param name="joystick">The joystick id of the button to add.</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Button.ForceState(System.Boolean)">
            <summary>
            Force the state of the button.  This will override player input.
            </summary>
            <param name="state">The state of the button, true for down, false for up.</param>
        </member>
        <member name="M:_0rison.Button.ReleaseState">
            <summary>
            Release the button's state from forced control.  Restores player input.
            </summary>
        </member>
        <member name="M:_0rison.Button.UpdateFirst">
            <summary>
            Update the button status.
            </summary>
        </member>
        <member name="T:_0rison.Component">
            <summary>
            Base Component class.  Components can be added to Entities.
            </summary>
        </member>
        <member name="F:_0rison.Component.Entity">
            <summary>
            The parent Entity of the Component.
            </summary>
        </member>
        <member name="F:_0rison.Component.RenderAfterEntity">
            <summary>
            Determines if the Component should render after the Entity has rendered.
            </summary>
        </member>
        <member name="F:_0rison.Component.Visible">
            <summary>
            Determines if the Component will render.
            </summary>
        </member>
        <member name="F:_0rison.Component.Timer">
            <summary>
            How long the Component has been alive (added to an Entity and updated.)
            </summary>
        </member>
        <member name="M:_0rison.Component.Added">
            <summary>
            Called when the Component is added to the Entity.
            </summary>
        </member>
        <member name="M:_0rison.Component.Removed">
            <summary>
            Called when the Component is removed from the Entity.
            </summary>
        </member>
        <member name="M:_0rison.Component.RemoveSelf">
            <summary>
            Removes the Component from its parent Entity.
            </summary>
        </member>
        <member name="M:_0rison.Component.UpdateFirst">
            <summary>
            Called during the UpdateFirst on the parent Entity.
            </summary>
        </member>
        <member name="M:_0rison.Component.Update">
            <summary>
            Called during the Update on the parent Entity.
            </summary>
        </member>
        <member name="M:_0rison.Component.Render">
            <summary>
            Called during the Render on the parent Entity.
            </summary>
        </member>
        <member name="M:_0rison.Component.UpdateLast">
            <summary>
            Called during the UpdateLast on the parent Entity.
            </summary>
        </member>
        <member name="T:_0rison.Controller">
            <summary>
            Component representing a group of Button and Axis classes. The controller updates all buttons
            and axes manually. This is used by the Session class to manage player input.
            
            Input recording should only be used in fixed framerate games!  If used with variable framerate
            the playback is not reliable.
            </summary>
        </member>
        <member name="M:_0rison.Controller.Get360Controller(System.Int32[])">
            <summary>
            Creates a controller assuming the Windows interpretation of an Xbox360 Controller.
            </summary>
            <param name="joystickId">The id of the joystick.</param>
            <returns>A configured controller.</returns>
        </member>
        <member name="F:_0rison.Controller.JoystickIds">
            <summary>
            The joystick id associated with this controller.
            </summary>
        </member>
        <member name="F:_0rison.Controller.Enabled">
            <summary>
            Determines if the controller is enabled. If not, all buttons return false, and all axes return 0, 0.
            </summary>
        </member>
        <member name="F:_0rison.Controller.RecordAxes">
            <summary>
            If the controller should record axes data.
            </summary>
        </member>
        <member name="P:_0rison.Controller.Recording">
            <summary>
            If the controller is currently recording input.
            </summary>
        </member>
        <member name="P:_0rison.Controller.Playing">
            <summary>
            If the controller is currently playing input data.
            </summary>
        </member>
        <member name="P:_0rison.Controller.Square">
            <summary>
            Alias for the PlayStation Square button.
            </summary>
        </member>
        <member name="P:_0rison.Controller.Cross">
            <summary>
            Alias for the PlayStation X button.
            </summary>
        </member>
        <member name="P:_0rison.Controller.Circle">
            <summary>
            Alias for the PlayStation Circle button.
            </summary>
        </member>
        <member name="P:_0rison.Controller.Triangle">
            <summary>
            Alias for the PlayStation Triangle button.
            </summary>
        </member>
        <member name="P:_0rison.Controller.LastRecordedString">
            <summary>
            The last recorded data as a compressed string.
            </summary>
        </member>
        <member name="M:_0rison.Controller.Record">
            <summary>
            Record the input to a string.  Optionally save it out to a file when finished.
            </summary>
        </member>
        <member name="M:_0rison.Controller.Playback(System.String)">
            <summary>
            Play back recorded input data.
            </summary>
            <param name="source">The recorded data.</param>
        </member>
        <member name="M:_0rison.Controller.SaveRecording(System.String)">
            <summary>
            Save the last recorded input data to a file.
            </summary>
            <param name="path">The path to save the data to.</param>
        </member>
        <member name="M:_0rison.Controller.Stop">
            <summary>
            Stop the recording or playback of the controller.  This will also release input states.
            </summary>
        </member>
        <member name="F:_0rison.EventProcessorEvent.EventProcessor">
            <summary>
            The EventProcessor that this event belongs to.
            </summary>
        </member>
        <member name="F:_0rison.EventProcessorEvent.Timer">
            <summary>
            The elapsed time for this event.
            </summary>
        </member>
        <member name="P:_0rison.EventProcessorEvent.Entity">
            <summary>
            The Entity that has the EventProcessor that this event belongs to.
            </summary>
        </member>
        <member name="P:_0rison.EventProcessorEvent.Scene">
            <summary>
            The Scene that has the Entity that has the EventProcessor that this event belongs to.
            </summary>
        </member>
        <member name="P:_0rison.EventProcessorEvent.IsFinished">
            <summary>
            Whether or not the Event has finished.
            </summary>
        </member>
        <member name="M:_0rison.EventProcessorEvent.GetScene``1">
            <summary>
            The Scene that has the Entity that has the EventProcessor that this event belongs to.
            </summary>
            <typeparam name="T">The Type the Scene should be cast to.</typeparam>
            <returns>The Scene that has the Entity that has the EventProcessor that this event belongs to.</returns>
        </member>
        <member name="M:_0rison.EventProcessorEvent.Begin">
            <summary>
            Called when the Event first starts.
            </summary>
        </member>
        <member name="M:_0rison.EventProcessorEvent.End">
            <summary>
            Called when the Event finishes and is cleared from the queue.
            </summary>
        </member>
        <member name="M:_0rison.EventProcessorEvent.Finish">
            <summary>
            Finishes the event.
            </summary>
        </member>
        <member name="M:_0rison.EventProcessorEvent.Start">
            <summary>
            Starts the event.
            </summary>
        </member>
        <member name="M:_0rison.EventProcessorEvent.Update">
            <summary>
            Called every update from the EventProcessor.
            </summary>
        </member>
        <member name="T:_0rison.EventQueue">
            <summary>
            A Component to manage and process queue of events.
            </summary>
        </member>
        <member name="M:_0rison.EventQueue.Add(_0rison.EventProcessorEvent[])">
            <summary>
            Add events to the queue.
            </summary>
            <param name="evt">The events to add.</param>
        </member>
        <member name="M:_0rison.EventQueue.Push(_0rison.EventProcessorEvent[])">
            <summary>
            Push events into the front of the queue.
            </summary>
            <param name="evt">The events to push.</param>
        </member>
        <member name="F:_0rison.EventProcessor.Events">
            <summary>
            The list of EventQueueEvents to execute.
            </summary>
        </member>
        <member name="P:_0rison.EventProcessor.CurrentEvent">
            <summary>
            The current event that is being executed.
            </summary>
        </member>
        <member name="F:_0rison.EventProcessor.RunEvents">
            <summary>
            Determines if the events will be run.  Defaults to true.
            </summary>
        </member>
        <member name="P:_0rison.EventProcessor.HasEvents">
            <summary>
            True if the number of events in the queue is greater than zero.
            </summary>
        </member>
        <member name="T:_0rison.GridCounter">
            <summary>
            Counter in which the value can be moved in both an X and Y direction.  Probably most useful
            for making menus that are grids which the player can move around in.
            </summary>
        </member>
        <member name="F:_0rison.GridCounter.Width">
            <summary>
            The width of the grid.
            </summary>
        </member>
        <member name="F:_0rison.GridCounter.Height">
            <summary>
            The height of the grid.
            </summary>
        </member>
        <member name="F:_0rison.GridCounter.WrapX">
            <summary>
            Determines if the GridCounter should wrap horizontally.
            </summary>
        </member>
        <member name="F:_0rison.GridCounter.WrapY">
            <summary>
            Determines if the GridCounter should wrap vertically.
            </summary>
        </member>
        <member name="P:_0rison.GridCounter.Index">
            <summary>
            The 1d value of the counter on the grid.
            </summary>
        </member>
        <member name="P:_0rison.GridCounter.Wrap">
            <summary>
            Set both WrapX and WrapY.
            </summary>
        </member>
        <member name="P:_0rison.GridCounter.Count">
            <summary>
            The total number of grid spaces.
            </summary>
        </member>
        <member name="M:_0rison.GridCounter.MoveLeft">
            <summary>
            Move the index left.
            </summary>
        </member>
        <member name="M:_0rison.GridCounter.MoveRight">
            <summary>
            Move the index right.
            </summary>
        </member>
        <member name="M:_0rison.GridCounter.MoveUp">
            <summary>
            Move the index up.
            </summary>
        </member>
        <member name="M:_0rison.GridCounter.MoveDown">
            <summary>
            Move the index down.
            </summary>
        </member>
        <member name="P:_0rison.GridCounter.X">
            <summary>
            The X value of the counter.
            </summary>
        </member>
        <member name="P:_0rison.GridCounter.Y">
            <summary>
            The Y value of the counter.
            </summary>
        </member>
        <member name="M:_0rison.GridCounter.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a new GridCounter.
            </summary>
            <param name="value">The initial value of the GridCounter.</param>
            <param name="width">The width of the grid.</param>
            <param name="height">The height of the grid.</param>
            <param name="wrapX">Determines if the counter should wrap horizontally.</param>
            <param name="wrapY">Determines if the counter should wrap vertically.</param>
        </member>
        <member name="T:_0rison.IRC">
            <summary>
            Component for connecting to and interacting with an IRC server.  Contains only very basic functionality.  Probably not very useable yet!
            </summary>
        </member>
        <member name="F:_0rison.IRC.Server">
            <summary>
            The server to connect with.
            </summary>
        </member>
        <member name="F:_0rison.IRC.Nick">
            <summary>
            The nickname to use when connecting.
            </summary>
        </member>
        <member name="F:_0rison.IRC.Password">
            <summary>
            The password to use when connecting.
            </summary>
        </member>
        <member name="F:_0rison.IRC.Name">
            <summary>
            The username to use when connecting.
            </summary>
        </member>
        <member name="F:_0rison.IRC.Port">
            <summary>
            The port to use when connecting to the server.
            </summary>
        </member>
        <member name="F:_0rison.IRC.Debug">
            <summary>
            Determines if debug messages will be printed to the console.
            </summary>
        </member>
        <member name="P:_0rison.IRC.Connected">
            <summary>
            If there is currently a connection with a server.
            </summary>
        </member>
        <member name="P:_0rison.IRC.Running">
            <summary>
            If the connection is currently running.
            </summary>
        </member>
        <member name="M:_0rison.IRC.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Create a new IRC connection.  Call Connect() to actually connect to the server.
            </summary>
            <param name="server">The server to connect to.</param>
            <param name="port">The port to use when connecting.</param>
            <param name="nick">The nickname to use when connecting.</param>
            <param name="pass">The password to use when connecting.</param>
        </member>
        <member name="M:_0rison.IRC.Join(System.String,System.String)">
            <summary>
            Join a channel.
            </summary>
            <param name="channel">The channel to join.</param>
            <param name="password">The password to use when joining.</param>
        </member>
        <member name="M:_0rison.IRC.Part(System.String)">
            <summary>
            Leave a channel.
            </summary>
            <param name="channel">The channel to leave.</param>
        </member>
        <member name="M:_0rison.IRC.Close">
            <summary>
            Close the current connection.
            </summary>
        </member>
        <member name="M:_0rison.IRC.Connect">
            <summary>
            Connect to the server.
            </summary>
        </member>
        <member name="M:_0rison.IRC.SendData(System.String,System.String)">
            <summary>
            Send data to the IRC server.
            </summary>
            <param name="command">The command to send.</param>
            <param name="param">The parameter to send along with the command.</param>
        </member>
        <member name="M:_0rison.IRC.Update">
            <summary>
            Updates the IRC connection.
            </summary>
        </member>
        <member name="T:_0rison.Lerper">
            <summary>
            Component that will slowly interpolate a value toward a target using a speed and acceleration.
            This component can move the value and does not know about time at all.
            </summary>
        </member>
        <member name="F:_0rison.Lerper.Acceleration">
            <summary>
            The acceleration for moving toward the target.
            </summary>
        </member>
        <member name="F:_0rison.Lerper.MaxSpeed">
            <summary>
            The maximum speed for moving toward the target.
            </summary>
        </member>
        <member name="P:_0rison.Lerper.Completed">
            <summary>
            If the Lerper has completed its movement.
            </summary>
        </member>
        <member name="P:_0rison.Lerper.Target">
            <summary>
            The current target to move toward.
            </summary>
        </member>
        <member name="P:_0rison.Lerper.Value">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="M:_0rison.Lerper.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a new Lerper.
            </summary>
            <param name="value">The initial value.</param>
            <param name="accel">The acceleration for moving toward the target.</param>
            <param name="maxSpeed">The max speed for moving toward the target.</param>
        </member>
        <member name="M:_0rison.Lerper.SetTarget(System.Single)">
            <summary>
            Set the target.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:_0rison.Lerper.SetValue(System.Single)">
            <summary>
            Force the current value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:_0rison.Lerper.Update">
            <summary>
            Update the Lerper.
            </summary>
        </member>
        <member name="T:_0rison.BasicMovement">
            <summary>
            Movement Component that can be used by an Entity to provide simple top-down style movement.
            This class requires an Axis component be assigned to it, and that Axis must be also updated
            by another source.  A simple way to do this is to just have the Entity have an Axis component
            as well as the movement component, and then pass a reference to the axis into the movement.
            
            The movement also requires a Collider if you want it to be able to collide with walls and other
            things!
            </summary>
        </member>
        <member name="F:_0rison.BasicMovement.Speed">
            <summary>
            The Speed of the Movement.
            </summary>
        </member>
        <member name="F:_0rison.BasicMovement.TargetSpeed">
            <summary>
            The movement will accelerate toward this Speed.
            </summary>
        </member>
        <member name="F:_0rison.BasicMovement.Accel">
            <summary>
            The rate at which the Speed will approach the TargetSpeed.
            </summary>
        </member>
        <member name="F:_0rison.BasicMovement.CircleClamp">
            <summary>
            Determines if diagonal movement should be limited.  This is to fix the problem where a vector of
            (1, 1) would have more length than a vector of (1, 0) or (0, 1).
            </summary>
        </member>
        <member name="F:_0rison.BasicMovement.Axis">
            <summary>
            The axis used to move.  This must be set to something and updated for the movement to work.
            </summary>
        </member>
        <member name="F:_0rison.BasicMovement.Freeze">
            <summary>
            If true the movement will not update.
            </summary>
        </member>
        <member name="M:_0rison.BasicMovement.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates the basic movement.
            </summary>
            <param name="xMax">The maximum speed allowed in the x axis.</param>
            <param name="yMax">The maximum speed allowed in the y axis.</param>
            <param name="accel">The acceleration.</param>
        </member>
        <member name="M:_0rison.BasicMovement.Update">
            <summary>
            Updates the Movement.
            </summary>
        </member>
        <member name="M:_0rison.BasicMovement.MoveCollideX(_0rison.Collider)">
            <summary>
            A callback for when the horizontal sweep test hits a collision.
            </summary>
            <param name="collider"></param>
        </member>
        <member name="M:_0rison.BasicMovement.MoveCollideY(_0rison.Collider)">
            <summary>
            A callback for when the vertical sweep test hits a collision.
            </summary>
            <param name="collider"></param>
        </member>
        <member name="T:_0rison.Movement">
            <summary>
            A base class for Movement Components to extend.
            </summary>
        </member>
        <member name="F:_0rison.Movement.OnMove">
            <summary>
            An action triggered after movement as been applied. Up to subclasses to implement.
            </summary>
        </member>
        <member name="F:_0rison.Movement.SpeedScale">
            <summary>
            Determines how many units represent 1 pixel. Default is 100. Example: A speed of 100 would
            move the object 1 pixel per update.
            </summary>
        </member>
        <member name="F:_0rison.Movement.Collider">
            <summary>
            The main Collider to use for detecting collisions. If this is not set, no collisions will
            register at all!
            </summary>
        </member>
        <member name="F:_0rison.Movement.OnCollideX">
            <summary>
            An action triggered when there is a collision in the X axis.
            </summary>
        </member>
        <member name="F:_0rison.Movement.OnCollideY">
            <summary>
            An action triggered when there is a collision in the Y axis.
            </summary>
        </member>
        <member name="P:_0rison.Movement.CollidesWith">
            <summary>
            The list of types that the Collider should check for collisions for when moving.
            </summary>
        </member>
        <member name="M:_0rison.Movement.AddCollision(System.Int32[])">
            <summary>
            Register a tag that the Collider should check for collisions with.
            </summary>
            <param name="tags"></param>
        </member>
        <member name="M:_0rison.Movement.RemoveCollision(System.Int32[])">
            <summary>
            Remove a tag from the collision checking.
            </summary>
            <param name="tags"></param>
        </member>
        <member name="M:_0rison.Movement.MoveX(System.Int32,_0rison.Collider)">
            <summary>
            Move the object in the X axis by the value of speed. Sweeping collision test.
            </summary>
            <param name="speed">The speed to move by (remember SpeedScale is applied.)</param>
            <param name="collider">The Collider to use when moving.</param>
        </member>
        <member name="M:_0rison.Movement.MoveY(System.Int32,_0rison.Collider)">
            <summary>
            Move the object in the Y axis by the value of speed. Sweeping collision test.
            </summary>
            <param name="speed">The speed to move by (remember SpeedScale is applied.)</param>
            <param name="collider">The Collider to use when moving.</param>
        </member>
        <member name="M:_0rison.Movement.MoveCollideX(_0rison.Collider)">
            <summary>
            Called when MoveX collides with a collider.
            </summary>
            <param name="collider">The collider that was hit.</param>
        </member>
        <member name="M:_0rison.Movement.MoveCollideY(_0rison.Collider)">
            <summary>
            Called when MoveY collides with a collider.
            </summary>
            <param name="collider">The collider that was hit.</param>
        </member>
        <member name="M:_0rison.Movement.MoveXY(System.Int32,System.Int32,_0rison.Collider)">
            <summary>
            Shortcut to call both move x and move y.
            </summary>
            <param name="speedX"></param>
            <param name="speedY"></param>
            <param name="collider"></param>
        </member>
        <member name="T:_0rison.PlatformingMovement">
            <summary>
            Movement Component that adds platforming movement behavior to an Entity.  This is built for
            fixed framerate applications.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.Speed">
            <summary>
            The main input speed of the platforming movement.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.ExtraSpeed">
            <summary>
            Any extra speed applied (from boosts, dashes, springs, conveyors, etc)
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.TargetSpeed">
            <summary>
            The target speed that the input speed will approach (used for Axis input)
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.Gravity">
            <summary>
            The acceleration applied from gravity.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.GravityMultiplier">
            <summary>
            The multiplication factor on the applied gravity.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.JumpStrength">
            <summary>
            The burst of speed applied when jumping.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.OnGround">
            <summary>
            If the object is currently on the ground (Y+1 overlaps the ground.)
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.JumpsLeft">
            <summary>
            How many jumps are left to use.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.JumpsMax">
            <summary>
            The maximum number of jumps each time the object touches the ground.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.JumpBufferMax">
            <summary>
            The maximum amount of frames to buffer jump input for the next available moment to jump.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.LedgeBufferMax">
            <summary>
            The maximum number of frames to allow the object to jump after leaving the ground.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.JumpEnabled">
            <summary>
            Determines if the object is capable of jumping.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.HardDoubleJump">
            <summary>
            Determines if a double jump should add jump strength to the current jump, or set the Y
            speed to the jump speed.  For example, if true then an object traveling downward will
            jump up at full jump strength, if false it will jump at it's downward speed minus jump
            strenght.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.JumpDampening">
            <summary>
            How much to dampen the Y speed when the object releases the jump button in the air.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.HasJumped">
            <summary>
            If the object is in the air because it jumped (instead of falling off a ledge, etc)
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.VariableJumpHeight">
            <summary>
            Determines if the object can control its jump height by releasing jump while in the air.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.UseAxis">
            <summary>
            Determines if the movement should listen to the Axis for input.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.ApplyGravity">
            <summary>
            Determines if the movement should have gravity applied to it.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.JumpButton">
            <summary>
            The Button used for the jumping input.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.Axis">
            <summary>
            The axis used for movement input.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.OnJump">
            <summary>
            An action that is triggered on a successful jump.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.Acceleration">
            <summary>
            The dictionary of acceleration values.
            </summary>
        </member>
        <member name="F:_0rison.PlatformingMovement.DefaultAccleration">
            <summary>
            The default acceleration value to use if none are set.
            </summary>
        </member>
        <member name="P:_0rison.PlatformingMovement.CurrentAccel">
            <summary>
            The current acceleration value.
            </summary>
        </member>
        <member name="P:_0rison.PlatformingMovement.AgainstWallLeft">
            <summary>
            If the Collider is currently against a wall on the left.
            </summary>
        </member>
        <member name="P:_0rison.PlatformingMovement.AgainstWallRight">
            <summary>
            If the Collider is currently against a wall on the right.
            </summary>
        </member>
        <member name="P:_0rison.PlatformingMovement.AgainstCeiling">
            <summary>
            If the Collider is currently against a ceiling above it.
            </summary>
        </member>
        <member name="P:_0rison.PlatformingMovement.JustJumped">
            <summary>
            True for one update after the object has jumped.
            </summary>
        </member>
        <member name="P:_0rison.PlatformingMovement.SumSpeedX">
            <summary>
            The total X speed.
            </summary>
        </member>
        <member name="P:_0rison.PlatformingMovement.SumSpeedY">
            <summary>
            The total Y speed.
            </summary>
        </member>
        <member name="M:_0rison.PlatformingMovement.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a new PlatformingMovement.
            </summary>
            <param name="xSpeedMax">The maximum X input speed.</param>
            <param name="ySpeedMax">The maximum Y speed from jumping and gravity.</param>
            <param name="gravity">The acceleration caused by gravity.</param>
        </member>
        <member name="M:_0rison.PlatformingMovement.Update">
            <summary>
            Updates the movement.
            </summary>
        </member>
        <member name="T:_0rison.AccelType">
            <summary>
            The different acceleration types.
            </summary>
        </member>
        <member name="T:_0rison.SineWave">
            <summary>
            Component that controls a sine wave.  Can be useful for special effects and such.
            </summary>
        </member>
        <member name="F:_0rison.SineWave.Rate">
            <summary>
            The rate at which the sine wave moves.
            </summary>
        </member>
        <member name="F:_0rison.SineWave.Amplitude">
            <summary>
            The amplitude of the sine wave.  When not zero Min and Max are ignored.
            </summary>
        </member>
        <member name="F:_0rison.SineWave.Offset">
            <summary>
            The offset of the value processed.
            </summary>
        </member>
        <member name="F:_0rison.SineWave.Min">
            <summary>
            The minimum value of the wave.
            </summary>
        </member>
        <member name="F:_0rison.SineWave.Max">
            <summary>
            The maximum value of the wave.
            </summary>
        </member>
        <member name="P:_0rison.SineWave.Value">
            <summary>
            The current value of the wave.
            </summary>
        </member>
        <member name="M:_0rison.SineWave.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a new SineWave.
            </summary>
            <param name="rate">The rate of the wave.</param>
            <param name="amp">The amplitude of the wave.</param>
            <param name="offset">The offset of the value processed.</param>
        </member>
        <member name="M:_0rison.SineWave.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a new SineWave.
            </summary>
            <param name="rate">The rate of the wave.</param>
            <param name="min">The minimum value of the wave.</param>
            <param name="max">The maximum value of the wave.</param>
            <param name="offset">The offset of the value processed.</param>
        </member>
        <member name="T:_0rison.Skeleton">
            <summary>
            A Component that can manage a set of Bone Components that can move Entities around.  Sort of like a system
            similar to Spine or Spriter, but moving actual Entities around instead of just textures.
            </summary>
        </member>
        <member name="F:_0rison.Skeleton.RenderBones">
            <summary>
            Determines if the Skeleton should render debug displays for each Bone.
            </summary>
        </member>
        <member name="P:_0rison.Skeleton.Base">
            <summary>
            The base bone (the first bone added to the Skeleton.)
            </summary>
        </member>
        <member name="P:_0rison.Skeleton.Item(System.Enum)">
            <summary>
            Get a Bone by enum name out of the Skeleton.
            </summary>
            <param name="name">The name of the bone to retrieve.</param>
            <returns>The Bone with that name.</returns>
        </member>
        <member name="P:_0rison.Skeleton.Item(System.String)">
            <summary>
            Get a Bone by enum name out of the Skeleton.
            </summary>
            <param name="name">The name of the bone to retrieve.</param>
            <returns>The Bone with that name.</returns>
        </member>
        <member name="M:_0rison.Skeleton.AddAllBonesToScene">
            <summary>
            Adds every Bone in the Skeleton's Entity to the Scene that the Skeleton's Entity is in.
            </summary>
        </member>
        <member name="M:_0rison.Skeleton.AddBone(_0rison.Bone)">
            <summary>
            Add a Bone to the Skeleton.
            </summary>
            <param name="bone">The Bone to add.</param>
            <returns>The added Bone.</returns>
        </member>
        <member name="M:_0rison.Skeleton.AddBone(System.String,System.String,_0rison.Bone)">
            <summary>
            Add a Bone to the Skeleton.
            </summary>
            <param name="parentName">The name of the Bone to parent this bone to.</param>
            <param name="name">The name of the Bone being added.</param>
            <param name="bone">The Bone being added.</param>
            <returns>The added Bone.</returns>
        </member>
        <member name="M:_0rison.Skeleton.AddBone(System.Enum,System.Enum,_0rison.Bone)">
            <summary>
            Add a Bone to the Skeleton.
            </summary>
            <param name="parentName">The name of the Bone to parent this bone to.</param>
            <param name="name">The name of the Bone being added.</param>
            <param name="bone">The Bone being added.</param>
            <returns>The added Bone.</returns>
        </member>
        <member name="M:_0rison.Skeleton.AddBone(_0rison.Bone,_0rison.Bone)">
            <summary>
            Add a Bone to the Skeleton.
            </summary>
            <param name="parent">The parent Bone.</param>
            <param name="bone">The Bone being added.</param>
            <returns>The added Bone.</returns>
        </member>
        <member name="M:_0rison.Skeleton.AddBone(System.String,_0rison.Bone)">
            <summary>
            Add a Bone to the Skeleton.
            </summary>
            <param name="name">The name of the Bone being added.</param>
            <param name="bone">The Bone being added.</param>
            <returns>The added Bone.</returns>
        </member>
        <member name="M:_0rison.Skeleton.AddBone(System.Enum,_0rison.Bone)">
            <summary>
            Add a Bone to the Skeleton.
            </summary>
            <param name="id">The id of the bone being added.</param>
            <param name="bone">The Bone being added.</param>
            <returns>The added Bone.</returns>
        </member>
        <member name="M:_0rison.Skeleton.GetBone(System.String)">
            <summary>
            Retrieve a Bone by its string name.
            </summary>
            <param name="name">The name of the Bone.</param>
            <returns>The Bone with that name.</returns>
        </member>
        <member name="M:_0rison.Skeleton.GetBone(System.Enum)">
            <summary>
            Retrieve a Bone by its Enum name.
            </summary>
            <param name="name">The name of the Bone.</param>
            <returns>The Bone with that name.</returns>
        </member>
        <member name="M:_0rison.Skeleton.GetBone(System.Int32)">
            <summary>
            Retrieve a Bone by its int id.
            </summary>
            <param name="id">The id of the Bone.</param>
            <returns>The Bone with that id.</returns>
        </member>
        <member name="M:_0rison.Skeleton.GetBone(_0rison.Entity)">
            <summary>
            Retrieve a Bone by its Entity.
            </summary>
            <param name="e">The Entity that the desired Bone belongs to.</param>
            <returns>The Bone with that Entity.</returns>
        </member>
        <member name="M:_0rison.Skeleton.GetBones">
            <summary>
            A list of all the Bones contained in this Skeleton.
            </summary>
            <returns>A list of Bones.</returns>
        </member>
        <member name="M:_0rison.Skeleton.LoadXml(System.String)">
            <summary>
            Load a Skeleton from XML data.
            </summary>
            <param name="xml">The XML data to parse.</param>
        </member>
        <member name="M:_0rison.Skeleton.RemoveAllBonesFromScene">
            <summary>
            Remove all the Entities controlled by the Bones in this Skeleton from the Scene.
            </summary>
        </member>
        <member name="M:_0rison.Skeleton.RemoveBone(System.String,_0rison.Bone)">
            <summary>
            Remove a Bone from the Skeleton.
            </summary>
            <param name="name">The name of the Bone to remove.</param>
            <param name="bone">The Bone to return if no Bone was removed.</param>
            <returns>The removed Bone, or the Bone passed into the method if no Bone was removed.</returns>
        </member>
        <member name="M:_0rison.Skeleton.RemoveBone(System.Enum)">
            <summary>
            Remove a Bone from the Skeleton.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Skeleton.RemoveBone(_0rison.Bone)">
            <summary>
            Remove a Bone from the Skeleton.
            </summary>
            <param name="bone"></param>
            <returns></returns>
        </member>
        <member name="T:_0rison.StateMachine`1">
            <summary>
            State machine that uses a specific type.  This is really meant for using an enum as your list of states.
            If an enum is used, the state machine will automatically populate the states using methods in the parent
            Entity that match the name of the enum values.
            </summary>
            <example>
            Say you have an enum named State, and it has the value "Walking"
            When the state machine is added to the Entity, it will match any methods named:
            EnterWalking
            UpdateWalking
            ExitWalking
            And use those to build the states.  This saves a lot of boilerplate set up code.
            </example>
            <typeparam name="TState">An enum of states.</typeparam>
        </member>
        <member name="F:_0rison.StateMachine`1.AutoPopulate">
            <summary>
            Determines if the StateMachine will autopopulate its states based off of the values of the Enum.
            </summary>
        </member>
        <member name="P:_0rison.StateMachine`1.CurrentState">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="M:_0rison.StateMachine`1.#ctor">
            <summary>
            Create a new StateMachine.
            </summary>
        </member>
        <member name="M:_0rison.StateMachine`1.PopulateMethodsFromEntity(_0rison.Entity)">
            <summary>
            Finds methods that match the enum state in the Entity.  This happens in the Added() method of the
            component if AutoPopulate is set to true.
            </summary>
            <param name="e">The Entity to get methods from.</param>
        </member>
        <member name="M:_0rison.StateMachine`1.PopulateMethodsFromEntity">
            <summary>
            Finds methods that match the enum state in the Entity.  This happens in the Added() method of the
            component if AutoPopulate is set to true.  If no Entity is specified, get the methods from the
            Entity that owns this component.
            </summary>
        </member>
        <member name="M:_0rison.StateMachine`1.ChangeState(`0)">
            <summary>
            Change the state.  Exit will be called on the current state followed by Enter on the new state.
            If the state machine is currently updating then the state change will not occur until after the
            update has completed.
            </summary>
            <param name="state">The state to change to.</param>
        </member>
        <member name="M:_0rison.StateMachine`1.PushState(`0)">
            <summary>
            Push a state onto a stack of states.  The state machine will always run the top of the stack.
            </summary>
            <param name="state">The state to push.</param>
        </member>
        <member name="M:_0rison.StateMachine`1.PopState">
            <summary>
            Pop the top state on the stack (if there is a stack.)
            </summary>
        </member>
        <member name="M:_0rison.StateMachine`1.Update">
            <summary>
            Update the State Machine.
            </summary>
        </member>
        <member name="M:_0rison.StateMachine`1.AddTransition(`0,`0,System.Action)">
            <summary>
            Add a transition callback for when going from one state to another.
            </summary>
            <param name="fromState">The State that is ending.</param>
            <param name="toState">The State that is starting.</param>
            <param name="function">The Action to run when the machine goes from the fromState to the toState.</param>
        </member>
        <member name="M:_0rison.StateMachine`1.AddState(`0,System.Action,System.Action,System.Action)">
            <summary>
            Add a state with three Actions.
            </summary>
            <param name="key">The key to reference the State with.</param>
            <param name="onEnter">The method to call when entering this state.</param>
            <param name="onUpdate">The method to call when updating this state.</param>
            <param name="onExit">The method to call when exiting this state.</param>
        </member>
        <member name="M:_0rison.StateMachine`1.AddState(`0,System.Action)">
            <summary>
            Add a state with just an update Action.
            </summary>
            <param name="key">The key to reference the State with.</param>
            <param name="onUpdate">The method to call when updating this state.</param>
        </member>
        <member name="M:_0rison.StateMachine`1.AddState(`0,_0rison.State)">
            <summary>
            Add a state.
            </summary>
            <param name="key">The key to reference the State with.</param>
            <param name="value">The State to add.</param>
        </member>
        <member name="M:_0rison.StateMachine`1.AddState(`0,_0rison.Entity)">
            <summary>
            Add a state using reflection to retrieve the approriate methods on the Entity.
            For example, a key with a value of "Idle" will retrieve the methods "EnterIdle" "UpdateIdle" and "ExitIdle" automatically.
            </summary>
            <param name="key">The key to reference the State with.</param>
        </member>
        <member name="T:_0rison.State">
            <summary>
            Used in StateMachine. Contains functions for enter, update, and exit.
            </summary>
        </member>
        <member name="F:_0rison.State.OnEnter">
            <summary>
            The method to call when entering this state.
            </summary>
        </member>
        <member name="F:_0rison.State.OnUpdate">
            <summary>
            The method to call when updating this state.
            </summary>
        </member>
        <member name="F:_0rison.State.OnExit">
            <summary>
            The method to call when exiting this state.
            </summary>
        </member>
        <member name="P:_0rison.State.Id">
            <summary>
            The Id that this state has been assigned.
            </summary>
        </member>
        <member name="M:_0rison.State.#ctor(System.Action,System.Action,System.Action)">
            <summary>
            Create a new State with three Actions.
            </summary>
            <param name="onEnter">The method to call when entering this state.</param>
            <param name="onUpdate">The method to call when updating this state.</param>
            <param name="onExit">The method to call when exiting this state.</param>
        </member>
        <member name="M:_0rison.State.#ctor(System.Action)">
            <summary>
            Create a new State with just an update Action.
            </summary>
            <param name="onUpdate">The method to call when updating this state.</param>
        </member>
        <member name="M:_0rison.State.Functions(System.Action,System.Action,System.Action)">
            <summary>
            Set all three of the methods for enter, update, and exit.
            </summary>
            <param name="onEnter">The method to call when entering this state.</param>
            <param name="onUpdate">The method to call when updating this state.</param>
            <param name="onExit">The method to call when exiting this state.</param>
        </member>
        <member name="M:_0rison.State.Update">
            <summary>
            Call OnUpdate.
            </summary>
        </member>
        <member name="M:_0rison.State.Enter">
            <summary>
            Call OnEnter.
            </summary>
        </member>
        <member name="M:_0rison.State.Exit">
            <summary>
            Call OnExit.
            </summary>
        </member>
        <member name="T:_0rison.Vertebra">
            <summary>
            Class representing one piece of a Snake.
            </summary>
        </member>
        <member name="F:_0rison.Vertebra.Distance">
            <summary>
            The distance from the previous Vertabra in the Snake.
            </summary>
        </member>
        <member name="F:_0rison.Vertebra.Slot">
            <summary>
            The slot that contains the final transformation of the Vertebra.
            </summary>
        </member>
        <member name="F:_0rison.Vertebra.Snake">
            <summary>
            The Snake that this Vertebra belongs to.
            </summary>
        </member>
        <member name="F:_0rison.Vertebra.TotalDistance">
            <summary>
            The total distance from the head of the Snake for this Vertebra.
            </summary>
        </member>
        <member name="F:_0rison.Vertebra.AutoAddEntities">
            <summary>
            Determines if the Vertebra will automatically add its Entity to the Scene.
            </summary>
        </member>
        <member name="P:_0rison.Vertebra.LocalRotation">
            <summary>
            The local rotation of the Vertebra.
            </summary>
        </member>
        <member name="P:_0rison.Vertebra.Rotation">
            <summary>
            The rotation of the Vertebra.  When setting this the LocalRotation will be set.
            </summary>
        </member>
        <member name="M:_0rison.Vertebra.SetEntity(_0rison.Entity)">
            <summary>
            Sets the Entity of the Vertebra (another way to add this component to an Entity.)
            </summary>
            <param name="e">The Entity to assign to this Vertebra.</param>
        </member>
        <member name="T:_0rison.Vertebra.VertebraSlot">
            <summary>
            A struct containing the final transformation of the Vertebra from the Snake.
            </summary>
        </member>
        <member name="F:_0rison.Vertebra.VertebraSlot.Rotation">
            <summary>
            The final transformed rotation of the Vertebra.
            </summary>
        </member>
        <member name="T:_0rison.Entity">
            <summary>
            Class used for a game object. The bread and butter of your game. Entities are added to Scenes which are controlled by the Game.
            </summary>
        </member>
        <member name="F:_0rison.Entity.X">
            <summary>
            The X position of the Entity.
            </summary>
        </member>
        <member name="F:_0rison.Entity.Y">
            <summary>
            The Y position of the Entity.
            </summary>
        </member>
        <member name="F:_0rison.Entity.Timer">
            <summary>
            How long the Entity has been active.
            </summary>
        </member>
        <member name="F:_0rison.Entity.Visible">
            <summary>
            Determines if the Entity will render.
            </summary>
        </member>
        <member name="F:_0rison.Entity.Collidable">
            <summary>
            Determines if the Entity will collide with other entities. The entity can still check for
            collisions, but will not register as a collision with other entities.
            </summary>
        </member>
        <member name="F:_0rison.Entity.AutoUpdate">
            <summary>
            Deteremines if the Entity's update functions will run automatically from the Scene.
            </summary>
        </member>
        <member name="F:_0rison.Entity.AutoRender">
            <summary>
            Determines if the Entity's render functions will run automatically from the Scene.
            </summary>
        </member>
        <member name="F:_0rison.Entity.Tweener">
            <summary>
            The tween manager that controls all tweens on this entity.
            </summary>
        </member>
        <member name="F:_0rison.Entity.OnAdded">
            <summary>
            An action that fires when the entity is added to a Scene.
            </summary>
        </member>
        <member name="F:_0rison.Entity.OnUpdate">
            <summary>
            An action that fires when the entity is updated.
            </summary>
        </member>
        <member name="F:_0rison.Entity.OnUpdateFirst">
            <summary>
            An action that fires in the entity's UpdateFirst().
            </summary>
        </member>
        <member name="F:_0rison.Entity.OnUpdateLast">
            <summary>
            An action that is fired in the entity's UpdateLast().
            </summary>
        </member>
        <member name="F:_0rison.Entity.OnRemoved">
            <summary>
            An action that fires when the entity is removed from a Scene.
            </summary>
        </member>
        <member name="F:_0rison.Entity.OnRender">
            <summary>
            An action that fires when the entity is rendered.
            </summary>
        </member>
        <member name="F:_0rison.Entity.Name">
            <summary>
            The name of this entity. Default's to the Type name.
            </summary>
        </member>
        <member name="F:_0rison.Entity.Layer">
            <summary>
            The order in which to render this entity.  Higher numbers draw later.
            </summary>
        </member>
        <member name="F:_0rison.Entity.Order">
            <summary>
            The order in which to update this entity.  Higher numbers update later.
            </summary>
        </member>
        <member name="F:_0rison.Entity.Group">
            <summary>
            The pause group this entity is a part of.
            </summary>
        </member>
        <member name="F:_0rison.Entity.LifeSpan">
            <summary>
            How long the entity should live in the scene before removing itself. If this is set the
            entity will be automatically removed when the Timer exceeds this value.
            </summary>
        </member>
        <member name="P:_0rison.Entity.UpdatedOnce">
            <summary>
            Is true if the Entity has been updated by the Scene at least once.
            </summary>
        </member>
        <member name="M:_0rison.Entity.#ctor(System.Single,System.Single,_0rison.Graphic,_0rison.Collider,System.String)">
            <summary>
            Create an entity.
            </summary>
            <param name="x">The x position to place the entity.</param>
            <param name="y">The y position to place the entity.</param>
            <param name="graphic">The graphic to assign to the entity.  Defaults to null.</param>
            <param name="collider">The collider to assign to the entity.  Defaults to null.</param>
            <param name="name">The name of the entity. Defaults to the type name.</param>
        </member>
        <member name="P:_0rison.Entity.Graphics">
            <summary>
            The list of graphics to render.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Components">
            <summary>
            The list of components to update and render.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Colliders">
            <summary>
            The list of colliders to use for collision checks.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Surfaces">
            <summary>
            The list of surfaces the entity should draw to.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Scene">
            <summary>
            The Scene that controls and updates this entity.
            </summary>
        </member>
        <member name="P:_0rison.Entity.InstanceId">
            <summary>
            The int id of the Entity for the Scene its currently in.
            </summary>
        </member>
        <member name="P:_0rison.Entity.IsInScene">
            <summary>
            Returns true if the entity is currently in a Scene, or is queued to be added to a Scene next update.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Surface">
            <summary>
            The default Surface that the entity should render to.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Overlapped">
            <summary>
            The currently overlapped entity.  This only works when using an Overlap collision check, and there is a result.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Hitbox">
            <summary>
            Set to a collider by using the SetHitbox method.  Shortcut reference.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Collider">
            <summary>
            Returns the first available collider, or set the Collider.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Input">
            <summary>
            A reference to the Input object in the Game that controls the Scene.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Game">
            <summary>
            A reference to the Game that controls the Scene.
            </summary>
        </member>
        <member name="P:_0rison.Entity.IsPaused">
            <summary>
            If the entity is currently paused by the scene.
            </summary>
        </member>
        <member name="P:_0rison.Entity.ScreenX">
            <summary>
            The x position in screen space of the entity.
            </summary>
        </member>
        <member name="P:_0rison.Entity.ScreenY">
            <summary>
            The y position in screen space of the entity.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Graphic">
            <summary>
            Returns the first available graphic, or set the graphic.
            </summary>
        </member>
        <member name="P:_0rison.Entity.Position">
            <summary>
            The position of the Entity represented as a Vector2
            </summary>
        </member>
        <member name="M:_0rison.Entity.SetGraphic(_0rison.Graphic)">
            <summary>
            Sets the graphic to a new graphic, removing all previous graphics.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:_0rison.Entity.SetPosition(System.Single)">
            <summary>
            Set the X and Y position to a value.
            </summary>
            <param name="xy">The value of the X and Y position.</param>
        </member>
        <member name="M:_0rison.Entity.AddPosition(System.Single,System.Single)">
            <summary>
            Add to the X and Y positions of the Entity.
            </summary>
            <param name="x">The amount to add to the x position.</param>
            <param name="y">The amount to add to the y position.</param>
        </member>
        <member name="M:_0rison.Entity.AddPosition(_0rison.Axis,System.Single)">
            <summary>
            Add to the X and Y position of the Entity.
            </summary>
            <param name="axis">The axis to add from.</param>
            <param name="multiplier">The amount to muliply the axis values by before adding.</param>
        </member>
        <member name="M:_0rison.Entity.AddPosition(_0rison.Vector2)">
            <summary>
            Add to the X and Y position of the Entity.
            </summary>
            <param name="vector">The Vector2 to add to the position.</param>
        </member>
        <member name="M:_0rison.Entity.SetPosition(System.Single,System.Single)">
            <summary>
            Set the position of the Entity.
            </summary>
            <param name="x">The new x position.</param>
            <param name="y">The new y position.</param>
        </member>
        <member name="M:_0rison.Entity.SetPosition(_0rison.Entity,System.Single,System.Single)">
            <summary>
            Set the position of the Entity to another Entity's position.
            </summary>
            <param name="e">The Entity to match positions with.</param>
        </member>
        <member name="M:_0rison.Entity.SetPosition(_0rison.Vector2)">
            <summary>
            Set the position of the Entity.
            </summary>
            <param name="v">The vector of the new position.</param>
        </member>
        <member name="M:_0rison.Entity.AddGraphic``1(``0)">
            <summary>
            Adds a Graphic to the Entity.
            </summary>
            <param name="g">The Graphic to add.</param>
            <returns>The added Graphic.</returns>
        </member>
        <member name="M:_0rison.Entity.AddGraphic``1(``0,System.Single,System.Single)">
            <summary>
            Adds a Graphic to the Entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="g">The Graphic to add.</param>
            <param name="x">The X position to place the Graphic relative to the Entity.</param>
            <param name="y">The Y position to place the Graphic relative to the Entity.</param>
            <returns>The added Graphic.</returns>
        </member>
        <member name="M:_0rison.Entity.AddGraphics(_0rison.Graphic[])">
            <summary>
            Adds the graphics to the Entity.
            </summary>
            <param name="graphics">The Graphics to add.</param>
        </member>
        <member name="M:_0rison.Entity.AddGraphicGUI``1(``0)">
            <summary>
            Adds a graphic to the Entity and sets its Scroll value to 0.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="g">The Graphic to add.</param>
            <returns>The added Graphic.</returns>
        </member>
        <member name="M:_0rison.Entity.AddGraphicGUI``1(``0,System.Single,System.Single)">
            <summary>
            Adds a graphic to the Entity and sets its Scroll value to 0.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="g">The Graphic to add.</param>
            <param name="x">The X position to place the Graphic relative to the Entity.</param>
            <param name="y">The Y position to place the Graphic relative to the Entity.</param>
            <returns>The added Graphic.</returns>
        </member>
        <member name="M:_0rison.Entity.AddGraphicsGUI(_0rison.Graphic[])">
            <summary>
            Adds Graphics to the Entity and sets their Scroll values to 0.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="graphics">The Graphics to add.</param>
            <returns>The added Graphics.</returns>
        </member>
        <member name="M:_0rison.Entity.RemoveGraphic``1(``0)">
            <summary>
            Removes a Graphic from the Entity.
            </summary>
            <param name="g">The Graphic to remove.</param>
        </member>
        <member name="M:_0rison.Entity.RemoveGraphics(_0rison.Graphic[])">
            <summary>
            Removes Graphics from the Entity.
            </summary>
            <param name="g">The Graphics to remove.</param>
        </member>
        <member name="M:_0rison.Entity.ClearGraphics">
            <summary>
            Remove all the graphics from the entity.
            </summary>
        </member>
        <member name="M:_0rison.Entity.AddComponent``1(``0)">
            <summary>
            Adds a component to the entity.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_0rison.Entity.AddComponent``1(System.Object[])">
            <summary>
            Creates and adds a Component to the entity.
            </summary>
            <typeparam name="T">The type of Component to create.</typeparam>
            <param name="constructorArgs">The arguments for the Component's constructor.</param>
            <returns>The newly created Component.</returns>
        </member>
        <member name="M:_0rison.Entity.AddComponents(_0rison.Component[])">
            <summary>
            Add multiple components to the entity.
            </summary>
            <param name="c">The components to add.</param>
            <returns>A list of the added components.</returns>
        </member>
        <member name="M:_0rison.Entity.RemoveComponent``1(``0)">
            <summary>
            Removes a component from the Entity.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_0rison.Entity.RemoveComponent``1">
            <summary>
            Removes the first component of type T from the Entity.
            </summary>
            <typeparam name="T">The type of component to remove.</typeparam>
            <returns>The removed component.</returns>
        </member>
        <member name="M:_0rison.Entity.ClearComponents">
            <summary>
            Remove all components from the Entity.
            </summary>
        </member>
        <member name="M:_0rison.Entity.AddSurface(_0rison.Surface)">
            <summary>
            Add a surface that the entity should render to.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:_0rison.Entity.RemoveSurface(_0rison.Surface)">
            <summary>
            Remove a surface from the list of surfaces that the entity should render to.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:_0rison.Entity.ClearSurfaces">
            <summary>
            Remove all Surfaces from the list of Surfaces that the Entity should render to.
            </summary>
        </member>
        <member name="M:_0rison.Entity.SetHitbox(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Shortcut to set the Collider of the entity to a BoxCollider.  Using this will set the "Hitbox" field to this Collider.
            </summary>
            <param name="width">The width of the box collider.</param>
            <param name="height">The height of the box collider.</param>
            <param name="tags">The tags assigned to the box collider.</param>
            <returns>The created box collider.</returns>
        </member>
        <member name="M:_0rison.Entity.SetHitbox(System.Int32,System.Int32,System.Enum,System.Enum[])">
            <summary>
            Shortcut to set the Collider of the entity to a BoxCollider.  Using this will set the "Hitbox" field to this Collider.
            </summary>
            <param name="width">The width of the box collider.</param>
            <param name="height">The height of the box collider.</param>
            <param name="tag">The first tag to add.</param>
            <param name="tags">The rest of the tags to add.</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Entity.GetEntity``1">
            <summary>
            Get the first instance of an Entity of type T in this Entity's Scene.
            </summary>
            <typeparam name="T">The entity type to search for.</typeparam>
            <returns>The first entity of that type in the scene.</returns>
        </member>
        <member name="M:_0rison.Entity.GetEntities``1">
            <summary>
            Get a list of entities of type T from this Entity's Scene.
            </summary>
            <typeparam name="T">The type of entity to collect.</typeparam>
            <returns>A list of entities of type T.</returns>
        </member>
        <member name="M:_0rison.Entity.GetComponent``1">
            <summary>
            Get the first Component of type T.
            </summary>
            <typeparam name="T">The type of Component to look for.</typeparam>
            <returns>The Component.</returns>
        </member>
        <member name="M:_0rison.Entity.GetComponent(System.Type)">
            <summary>
            Get the first Component of Type type.
            </summary>
            <param name="type">The Type of Component to look for.</param>
            <returns>The first Component of that Type.</returns>
        </member>
        <member name="M:_0rison.Entity.GetComponents``1">
            <summary>
            Get all Components of type T.
            </summary>
            <typeparam name="T">The type of Component to look for.</typeparam>
            <returns>A list of Components of type T.</returns>
        </member>
        <member name="M:_0rison.Entity.GetGraphic``1">
            <summary>
            Get the first graphic of type T.
            </summary>
            <typeparam name="T">The type of graphic to look for.</typeparam>
            <returns>The graphic.</returns>
        </member>
        <member name="M:_0rison.Entity.GetCollider``1">
            <summary>
             Get the first collider of type T.
            </summary>
            <typeparam name="T">The type of collider to look for.</typeparam>
            <returns>The collider.</returns>
        </member>
        <member name="M:_0rison.Entity.AddCollider``1(``0)">
            <summary>
            Add a collider to the entity.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_0rison.Entity.RemoveCollider``1(``0)">
            <summary>
            Remove the collider from the entity.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_0rison.Entity.ClearColliders">
            <summary>
            Remove all colliders from the entity.
            </summary>
        </member>
        <member name="M:_0rison.Entity.SetCollider``1(``0)">
            <summary>
            Remove all current colliders and set collider to a new one.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_0rison.Entity.AddColliders(_0rison.Collider[])">
            <summary>
            Adds colliders to the entity.
            </summary>
            <param name="colliders"></param>
        </member>
        <member name="M:_0rison.Entity.RemoveColliders(_0rison.Collider[])">
            <summary>
            Removes colliders from the entity.
            </summary>
            <param name="colliders"></param>
        </member>
        <member name="M:_0rison.Entity.Collide(System.Single,System.Single,System.Int32[])">
            <summary>
            Checks for a collision using the first available Collider.
            </summary>
            <param name="x">The X position to check for a collision at.</param>
            <param name="y">The Y position to check for a collision at.</param>
            <param name="tags">The int tags to check for.</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Entity.Collide(System.Single,System.Single,System.Enum[])">
            <summary>
            Checks for a collision using the first available Collider.
            </summary>
            <param name="x">The X position to check for a collision at.</param>
            <param name="y">The Y position to check for a collision at.</param>
            <param name="tags">The enum tags to check for.</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Entity.CollideList(System.Single,System.Single,System.Int32[])">
            <summary>
            Checks for a collision with the first available Collider.
            </summary>
            <param name="x">The X position to check for a collision at.</param>
            <param name="y">The Y position to check for a collision at.</param>
            <param name="tags">The int tags to check for.</param>
            <returns>A list of all colliders touched.</returns>
        </member>
        <member name="M:_0rison.Entity.CollideList(System.Single,System.Single,System.Enum[])">
            <summary>
            Checks for a collision with the first available Collider.
            </summary>
            <param name="x">The X position to check for a collision at.</param>
            <param name="y">The Y position to check for a collision at.</param>
            <param name="tags">The enum tags to check for.</param>
            <returns>A list of all colliders touched.</returns>
        </member>
        <member name="M:_0rison.Entity.CollideEntities(System.Single,System.Single,System.Int32[])">
            <summary>
            Checks for a collision with the first available Collider.
            </summary>
            <param name="x">The X position to check for a collision at.</param>
            <param name="y">The Y position to check for a collision at.</param>
            <param name="tags">The int tags to check for.</param>
            <returns>A list of all entities touched.</returns>
        </member>
        <member name="M:_0rison.Entity.CollideEntities(System.Single,System.Single,System.Enum[])">
            <summary>
            Checks for a collision with the first available Collider.
            </summary>
            <param name="x">The X position to check for a collision at.</param>
            <param name="y">The Y position to check for a collision at.</param>
            <param name="tags">The enum tags to check for.</param>
            <returns>A list of all Entities touched.</returns>
        </member>
        <member name="M:_0rison.Entity.Overlap(System.Single,System.Single,System.Int32[])">
            <summary>
            Checks for an overlap using the first available collider.
            </summary>
            <param name="x">The X position to check for a collision at.</param>
            <param name="y">The Y position to check for a collision at.</param>
            <param name="tags">The int tags to check for.</param>
            <returns>True if there is a collision.</returns>
        </member>
        <member name="M:_0rison.Entity.Overlap(System.Single,System.Single,System.Enum[])">
            <summary>
            Checks for an overlap using the first available collider.
            </summary>
            <param name="x">The X position to check for a collision at.</param>
            <param name="y">The Y position to check for a collision at.</param>
            <param name="tags">The enum tags to check for.</param>
            <returns>True if there is a collision.</returns>
        </member>
        <member name="M:_0rison.Entity.Overlap(System.Single,System.Single,_0rison.Entity)">
            <summary>
            Checks for an overlap using the first available collider.
            </summary>
            <param name="x">The X position to check for a collision at.</param>
            <param name="y">The Y position to check for a collision at.</param>
            <param name="e">The Entity to check for a collision with.</param>
            <returns>True if there is a collision.</returns>
        </member>
        <member name="M:_0rison.Entity.Added">
            <summary>
            Called when the entity is added to a scene.  The reference to the Scene is available here.
            </summary>
        </member>
        <member name="M:_0rison.Entity.Removed">
            <summary>
            Called when the entity is removed from a scene.  The reference to Scene is now null.
            </summary>
        </member>
        <member name="M:_0rison.Entity.SceneBegin">
            <summary>
            Called when the Scene begins.
            </summary>
        </member>
        <member name="M:_0rison.Entity.SceneEnd">
            <summary>
            Called when the Scene ends.
            </summary>
        </member>
        <member name="M:_0rison.Entity.ScenePause">
            <summary>
            Called when the Scene is paused.
            </summary>
        </member>
        <member name="M:_0rison.Entity.SceneResume">
            <summary>
            Called when the Scene is resumed.
            </summary>
        </member>
        <member name="M:_0rison.Entity.Paused">
            <summary>
            Called when the entity is paused by the Scene.
            </summary>
        </member>
        <member name="M:_0rison.Entity.Resumed">
            <summary>
            Called when the entity is resumed by the Scene.
            </summary>
        </member>
        <member name="M:_0rison.Entity.Tween(System.Object,System.Object,System.Single,System.Single)">
            <summary>
            Tweens a set of numeric properties on an object.
            </summary>
            <param name="target">The object to tween.</param>
            <param name="values">The values to tween to, in an anonymous type ( new { prop1 = 100, prop2 = 0} ).</param>
            <param name="duration">Duration of the tween in seconds.</param>
            <param name="delay">Delay before the tween starts, in seconds.</param>
            <returns>The tween created, for setting properties on.</returns>
        </member>
        <member name="M:_0rison.Entity.UpdateFirst">
            <summary>
            Called first during the update.  Happens before Update.
            </summary>
        </member>
        <member name="M:_0rison.Entity.UpdateLast">
            <summary>
            Called last during the update.  Happens after Update.
            </summary>
        </member>
        <member name="M:_0rison.Entity.Update">
            <summary>
            Called during the update of the game.
            </summary>
        </member>
        <member name="M:_0rison.Entity.Render">
            <summary>
            Called when the entity is rendering to the screen.
            </summary>
        </member>
        <member name="M:_0rison.Entity.Prerender">
            <summary>
            Called before an entity is rendered. Things rendered here will appear below the Entity's Graphics.
            </summary>
        </member>
        <member name="M:_0rison.Entity.RemoveSelf">
            <summary>
            Remove this entity from the Scene it's in.
            </summary>
        </member>
        <member name="T:_0rison.Game">
            <summary>
             0_0
             Core class 0rison. Create a Game, and then use Game.Start(); to run it.
            </summary>
        </member>
        <member name="F:_0rison.Game.Instance">
            <summary>
            A reference to the active Game instance.
            </summary>
        </member>
        <member name="F:_0rison.Game.TargetFramerate">
            <summary>
            The desired framerate that the game should update at.
            </summary>
        </member>
        <member name="F:_0rison.Game.FixedFramerate">
            <summary>
            Render and update the game at a fixed framerate. The game will never exceed the target framerate, and
            will slow down if performance decreases.
            </summary>
        </member>
        <member name="F:_0rison.Game.Active">
            <summary>
            If the game is currently being run.
            </summary>
        </member>
        <member name="F:_0rison.Game.Paused">
            <summary>
            If the game is paused (no longer updating.)
            </summary>
        </member>
        <member name="F:_0rison.Game.OnInit">
            <summary>
            An action called when the game initializes.
            </summary>
        </member>
        <member name="F:_0rison.Game.OnUpdate">
            <summary>
            An action called when the game updates (happens after all Scene and Entity updates.)
            </summary>
        </member>
        <member name="F:_0rison.Game.OnSceneBegin">
            <summary>
            An action called when any Scene begins.
            </summary>
        </member>
        <member name="F:_0rison.Game.OnSceneEnd">
            <summary>
            An action called when any Scene ends.
            </summary>
        </member>
        <member name="F:_0rison.Game.OnEnd">
            <summary>
            An Action called when the game ends.  The last code that executes when closing the game.
            </summary>
        </member>
        <member name="F:_0rison.Game.OnFocusLost">
            <summary>
            An action that is called when the window loses focus.
            </summary>
        </member>
        <member name="F:_0rison.Game.OnFocusGained">
            <summary>
            An action that is called when the window gains focus.
            </summary>
        </member>
        <member name="F:_0rison.Game.OnEndOfUpdate">
            <summary>
            An action that is called at the very end of the update (the very last thing before Render())
            After this is called it will be cleared!
            </summary>
        </member>
        <member name="F:_0rison.Game.OnStartOfNextUpdate">
            <summary>
            An action that is called at the very start of the next update (the very first thing before UpdateFirst())
            After this is called it will be cleared!
            </summary>
        </member>
        <member name="F:_0rison.Game.DrawInactiveScenes">
            <summary>
            If the game should draw all scenes on the stack including inactive scenes.
            </summary>
        </member>
        <member name="F:_0rison.Game.Color">
            <summary>
            The default background color of the game.
            </summary>
        </member>
        <member name="F:_0rison.Game.LetterBoxColor">
            <summary>
            The default color to draw in the letterboxed areas of the window.
            </summary>
        </member>
        <member name="F:_0rison.Game.Timer">
            <summary>
            How long the game has been active.  Measured in units of delta time.
            </summary>
        </member>
        <member name="F:_0rison.Game.FirstScene">
            <summary>
            The first scene that the game should load when Start() is called.
            </summary>
        </member>
        <member name="F:_0rison.Game.GameFrames">
            <summary>
            The number of frames that have passed since the game started.  If you're not using fixed
            framerate then this number will vary wildly.
            </summary>
        </member>
        <member name="F:_0rison.Game.MeasureTimeInFrames">
            <summary>
            If the game should measure time in frames when using a fixed framerate.  If true delta time
            will increase by 1 on each update, if false it will increase by 1 / TargetFramerate.
            </summary>
        </member>
        <member name="F:_0rison.Game.LockMouse">
            <summary>
            If the game should attempt to lock the mouse inside the window. This is not 100% accurate.
            </summary>
        </member>
        <member name="F:_0rison.Game.LockMousePadding">
            <summary>
            The distance from the edge of the window in which the mouse cant escape when locked.
            </summary>
        </member>
        <member name="F:_0rison.Game.LockMouseCenter">
            <summary>
            If the mouse should be locked to the center of the window.  The Input class should still report
            the mouse position accurately if this is true.  This is currently the best way to lock the mouse
            inside of the window region.
            </summary>
        </member>
        <member name="F:_0rison.Game.AlwaysUpdate">
            <summary>
            If the game should keep updating even when it has lost focus.
            </summary>
        </member>
        <member name="F:_0rison.Game.Atlas">
            <summary>
            The default Atlas to search for image assets in.
            </summary>
        </member>
        <member name="F:_0rison.Game.LockAspectRatio">
            <summary>
            Maintain the original aspect ratio of the game when scaling the window.
            </summary>
        </member>
        <member name="F:_0rison.Game.QuitButton">
            <summary>
            Button that closes the game when pressed.  Defaults to the Escape key.
            </summary>
        </member>
        <member name="F:_0rison.Game.ScreenshotButton">
            <summary>
            Button that will save the game's surface out to a timestamp named .png file after the next render.
            </summary>
        </member>
        <member name="F:_0rison.Game.EnableQuitButton">
            <summary>
            Determines if the QuitButton can close the game.
            </summary>
        </member>
        <member name="F:_0rison.Game.EnableAltF4">
            <summary>
            Determines if Alt+F4 will close the game immediately.
            </summary>
        </member>
        <member name="F:_0rison.Game.InvertAngleY">
            <summary>
            Determines if Y values determined by angles in the Util class will invert the Y axis.
            This is mostly for backwards compatibility.  Turn it back to false if you don't want to
            change all of your math.
            </summary>
        </member>
        <member name="F:_0rison.Game.ReleaseModeDebugger">
            <summary>
            Determines if the debug console will be available when building in release mode.  Must be
            set before Game.Start() is called.
            </summary>
        </member>
        <member name="F:_0rison.Game.WindowResize">
            <summary>
            Determines if the game window can be resized.  Must be set before calling Game.SetWindow() or Game.Start().
            </summary>
        </member>
        <member name="F:_0rison.Game.WindowClose">
            <summary>
            Determines if the game window has a close button or Alt+F4.  Must be set before calling Game.SetWindow() or Game.Start().
            </summary>
        </member>
        <member name="F:_0rison.Game.WindowBorder">
            <summary>
            Determines if the game window has a border.  If the window has no border it cannot be resized
            or closed with the close button or Alt+F4.  Must be set before calling Game.SetWindow() or Game.Start()
            </summary>
        </member>
        <member name="F:_0rison.Game.LogExceptionsToFile">
            <summary>
            Determines if the game will log any unhandled exceptions to a text file containing the exception
            and stack trace.  This is useful for collecting crash data from players of your game.  The file
            name will be "crash_X.txt" where X is the timestamp for when the crash occured.
            This must be set before Game.Start() is called!!
            </summary>
        </member>
        <member name="P:_0rison.Game.Title">
            <summary>
            The title of the game displayed in the window.
            </summary>
        </member>
        <member name="P:_0rison.Game.WindowX">
            <summary>
            Set the X position of the Window.
            </summary>
        </member>
        <member name="P:_0rison.Game.WindowY">
            <summary>
            Set the Y position of the Window.
            </summary>
        </member>
        <member name="P:_0rison.Game.Center">
            <summary>
            The center of the Game's Surface. (HalfWidth and HalfHeight)
            </summary>
        </member>
        <member name="P:_0rison.Game.Debugger">
            <summary>
            The debugger.  Only accessable in Debug mode, otherwise null.
            </summary>
        </member>
        <member name="P:_0rison.Game.Coroutine">
            <summary>
            The Coroutine manager.
            </summary>
        </member>
        <member name="P:_0rison.Game.Tweener">
            <summary>
            The tween manager.
            </summary>
        </member>
        <member name="P:_0rison.Game.ShowDebugger">
            <summary>
            True if the debugger is currently open.
            </summary>
        </member>
        <member name="P:_0rison.Game.Framerate">
            <summary>
            The current framerate of the game.
            </summary>
        </member>
        <member name="P:_0rison.Game.AverageFramerate">
            <summary>
            The average framerate of the game over the past few seconds.
            </summary>
        </member>
        <member name="P:_0rison.Game.DeltaTime">
            <summary>
            How much time has passed since the last update.
            Will only make sense if FixedFramerate is false.
            </summary>
        </member>
        <member name="P:_0rison.Game.Width">
            <summary>
            The internal width of the game.
            </summary>
        </member>
        <member name="P:_0rison.Game.Height">
            <summary>
            The internal height of the game.
            </summary>
        </member>
        <member name="P:_0rison.Game.WindowWidth">
            <summary>
            The window width of the game.
            </summary>
        </member>
        <member name="P:_0rison.Game.WindowHeight">
            <summary>
            The window height of the game.
            </summary>
        </member>
        <member name="P:_0rison.Game.WindowFullscreen">
            <summary>
            If the game window is currently fullscreen.
            </summary>
        </member>
        <member name="P:_0rison.Game.Scenes">
            <summary>
            The stack of scenes currently in the game.
            </summary>
        </member>
        <member name="P:_0rison.Game.Sessions">
            <summary>
            The list of player sessions currently in the game.
            </summary>
        </member>
        <member name="P:_0rison.Game.Input">
            <summary>
            The input used by the game.
            </summary>
        </member>
        <member name="P:_0rison.Game.DebugInput">
            <summary>
            The debug input used by the game.
            </summary>
        </member>
        <member name="P:_0rison.Game.Surface">
            <summary>
            The main surface that the game renders to.
            </summary>
        </member>
        <member name="P:_0rison.Game.IsDebugMode">
            <summary>
            If the game is currently being run in a Debug Mode build.
            </summary>
        </member>
        <member name="P:_0rison.Game.MouseDeltaX">
            <summary>
            The change in the mouse's x position before it's relocked to the center.  Only reports when
            LockMouseCenter is set to true.
            </summary>
        </member>
        <member name="P:_0rison.Game.MouseDeltaY">
            <summary>
            The change in the mouse's y position before it's relocked to the center.  Only reports when
            LockMouseCenter is set to true.
            </summary>
        </member>
        <member name="P:_0rison.Game.HasFocus">
            <summary>
            If the window currently has focus.
            </summary>
        </member>
        <member name="P:_0rison.Game.OptionsData">
            <summary>
            The stored data for game options. The options file is not externally modifiable.
            </summary>
        </member>
        <member name="P:_0rison.Game.SaveData">
            <summary>
            The stored data for the general game data.  The file is not externally modifiable.
            </summary>
        </member>
        <member name="P:_0rison.Game.ConfigData">
            <summary>
            The stored data for the game config file. The config file is externally modifiable.
            </summary>
        </member>
        <member name="P:_0rison.Game.GameFolder">
            <summary>
            The default folder to use for storing data files for the game.  This will be a folder
            created in the current user's My Documents folder.  The default is '0risongame' so it
            will create a folder '0risongame' in My Documents.
            </summary>
        </member>
        <member name="P:_0rison.Game.Filepath">
            <summary>
            The main filepath for saving and loading files for the game.
            </summary>
        </member>
        <member name="P:_0rison.Game.AspectRatio">
            <summary>
            The aspect ratio of the window that the game is rendering to.
            </summary>
        </member>
        <member name="P:_0rison.Game.Second">
            <summary>
            A second in terms of frames for fixed frame rate games.
            </summary>
        </member>
        <member name="P:_0rison.Game.Surfaces">
            <summary>
            The surfaces that should be rendered to the final game window.  Useful for games that need to render to multiple surfaces.
            </summary>
        </member>
        <member name="P:_0rison.Game.CameraAngle">
            <summary>
            The camera angle for the game's main view.
            </summary>
        </member>
        <member name="P:_0rison.Game.CameraZoom">
            <summary>
            The camera zoom for the game's main view.
            </summary>
        </member>
        <member name="P:_0rison.Game.RealDeltaTime">
            <summary>
            The real delta time for each update.
            </summary>
        </member>
        <member name="P:_0rison.Game.MouseVisible">
            <summary>
            Set the visibilty of the mouse.
            </summary>
        </member>
        <member name="P:_0rison.Game.RenderTime">
            <summary>
            The amount of time in milliseconds for the render pass to complete.
            </summary>
        </member>
        <member name="P:_0rison.Game.UpdateTime">
            <summary>
            The amount of time in milliseconds for the update time to complete.
            </summary>
        </member>
        <member name="P:_0rison.Game.RenderCount">
            <summary>
            The number of draw calls in the last update.
            </summary>
        </member>
        <member name="P:_0rison.Game.UpdateCount">
            <summary>
            The number of objects that were updated in the last update.
            </summary>
        </member>
        <member name="M:_0rison.Game.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new game to run in the program.
            </summary>
            <param name="title">The title of the window.</param>
            <param name="width">The width of the internal game resolution.</param>
            <param name="height">The height of the internal game resolution.</param>
            <param name="targetFramerate">The target framerate (for fixed framerate.)</param>
            <param name="fullscreen">Run the game in fullscreen.</param>
        </member>
        <member name="M:_0rison.Game.SetWindow(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new window for the game to be shown in.
            </summary>
            <param name="width">The width of the window.</param>
            <param name="height">The height of the window.</param>
            <param name="fullscreen">Run the window in fullscreen mode.</param>
            <param name="vsync">Enable vertical sync.</param>
        </member>
        <member name="M:_0rison.Game.SetWindowAutoFullscreen(System.Boolean)">
            <summary>
            Creates a new window that is the resolution of the screen and in fullscreen mode.
            </summary>
            <param name="vsync">Enable vertical sync.</param>
        </member>
        <member name="M:_0rison.Game.ForceDebugger">
            <summary>
            Force the creation of a Debugger object (even in Release mode!)
            </summary>
        </member>
        <member name="M:_0rison.Game.CenterWindow">
            <summary>
            Center the window on the monitor that the window was initialized on.
            </summary>
        </member>
        <member name="M:_0rison.Game.AddSurface(_0rison.Surface)">
            <summary>
            Add a surface to the list of surfaces to be rendered to the window.
            </summary>
            <param name="surface">The surface to add.</param>
        </member>
        <member name="M:_0rison.Game.RemoveSurface(_0rison.Surface)">
            <summary>
            Remove a surface from the list of surfaces to be rendered to the window.
            </summary>
            <param name="surface">The surface to remove.</param>
        </member>
        <member name="M:_0rison.Game.SetWindowScale(System.Single)">
            <summary>
            Create a new window using a scale value instead of pixels.
            </summary>
            <param name="scale">The scale compared to the game's internal resolution.</param>
        </member>
        <member name="M:_0rison.Game.SetIcon(System.String)">
            <summary>
            Set the icon of the current window.
            </summary>
            <param name="width">The width of the icon.</param>
            <param name="height">The height of the icon.</param>
            <param name="source">The source path to the icon image.</param>
        </member>
        <member name="M:_0rison.Game.Stop">
            <summary>
            Stop the game from running completely.
            </summary>
        </member>
        <member name="M:_0rison.Game.Pause">
            <summary>
            Pause the game.
            </summary>
        </member>
        <member name="M:_0rison.Game.Resume">
            <summary>
            Resume the game after pausing.
            </summary>
        </member>
        <member name="M:_0rison.Game.PauseToggle">
            <summary>
            Toggle the pause state on and off.
            </summary>
        </member>
        <member name="M:_0rison.Game.Sleep(System.Int32)">
            <summary>
            Pauses the game for a certain time.  Only works with fixed framerate currently.
            </summary>
            <param name="milliseconds">The time to freeze for in milliseconds.</param>
        </member>
        <member name="M:_0rison.Game.Start(_0rison.Scene)">
            <summary>
            Start the game using a specific Scene.  Shortcut for setting the FirstScene then using Start.
            </summary>
            <param name="firstScene">The Scene to begin the game with.</param>
        </member>
        <member name="M:_0rison.Game.Start">
            <summary>
            Start the game. This will begin the game loop and no other code past Start() in your entry point will run.  Make sure to set the first scene before executing this.
            </summary>
        </member>
        <member name="M:_0rison.Game.Close">
            <summary>
            Close the current game window.
            </summary>
        </member>
        <member name="M:_0rison.Game.SwitchScene(_0rison.Scene)">
            <summary>
            Switch to a new scene.  This removes the scene stack!
            </summary>
            <param name="scene">The scene to switch to.</param>
        </member>
        <member name="M:_0rison.Game.AddScene(_0rison.Scene)">
            <summary>
            Add a scene to the top of the stack.  You do not have to use Game.FirstScene if you use
            this before Game.Start().
            </summary>
            <param name="scene">The scene to add.</param>
        </member>
        <member name="M:_0rison.Game.AddScene(_0rison.Scene[])">
            <summary>
            Add multiple scenes to the top of the stack.
            The last scene added will be on top.
            </summary>
            <param name="scenes">The scenes to add.</param>
        </member>
        <member name="M:_0rison.Game.RemoveScene">
            <summary>
            Remove the scene from the top of the scene stack.
            </summary>
        </member>
        <member name="P:_0rison.Game.HalfWidth">
            <summary>
            Half of the game's internal width.
            </summary>
        </member>
        <member name="P:_0rison.Game.HalfHeight">
            <summary>
            Half of the game's internal height.
            </summary>
        </member>
        <member name="P:_0rison.Game.Scene">
            <summary>
            A reference to the current scene being updated by the game.
            </summary>
        </member>
        <member name="M:_0rison.Game.GetScene``1">
            <summary>
            Get the current scene cast to a specific type.  Useful for when you extend Scene to your own class.
            </summary>
            <typeparam name="T">The class to return the scene as.</typeparam>
            <returns>The scene as T.</returns>
        </member>
        <member name="M:_0rison.Game.AddSession(System.String)">
            <summary>
            Adds a new Session to the game.
            </summary>
            <param name="name">The name of the Session.</param>
            <returns>The Session.</returns>
        </member>
        <member name="M:_0rison.Game.AddSession(System.Enum)">
            <summary>
            Adds a new Session to the game.
            </summary>
            <param name="name">The name of the Session.</param>
            <returns>The Session.</returns>
        </member>
        <member name="M:_0rison.Game.Session(System.String)">
            <summary>
            Get a session by the name.
            </summary>
            <param name="name">The name of the session.</param>
            <returns>A session if one is found, or null.</returns>
        </member>
        <member name="M:_0rison.Game.Session(System.Enum)">
            <summary>
            Get a Session by the name.
            </summary>
            <param name="name">The name of the Session.</param>
            <returns>A Session if one is found, or null.</returns>
        </member>
        <member name="M:_0rison.Game.Session(System.Int32)">
            <summary>
            Get a session by id.
            </summary>
            <param name="id">The id of the session.</param>
            <returns>The Session with that id.</returns>
        </member>
        <member name="T:_0rison.Anim">
            <summary>
            Class used for animations in Spritemap.
            </summary>
        </member>
        <member name="M:_0rison.Anim.FramesRange(System.Int32,System.Int32)">
            <summary>
            Returns an array of numbers from min to max.  Useful for passing in arguments for long animations.
            </summary>
            <param name="min">The start of the animation (includes this number.)</param>
            <param name="max">The end of the animation (includes this number.)</param>
            <returns>The array of ints representing an animation.</returns>
        </member>
        <member name="M:_0rison.Anim.ParseFrames(System.String)">
            <summary>
            Creates an array of frames from a string expression. The expression must be similar to the following format:
            "0,3,7-11,2,5"
            Whitespace is permitted, and commas are optional.
            <param name="input">A string formatted as above, describing the frames to generate.</param>
            </summary>
        </member>
        <member name="F:_0rison.Anim.OnComplete">
            <summary>
            An action to run when the animation finishes playing.
            </summary>
        </member>
        <member name="F:_0rison.Anim.OnNewFrame">
            <summary>
            An action that is called when the Anim switches to a new frame.
            </summary>
        </member>
        <member name="F:_0rison.Anim.Active">
            <summary>
            Determines if the animation is active (playing.)
            </summary>
        </member>
        <member name="P:_0rison.Anim.PlaybackSpeed">
            <summary>
            The overall playback speed of the animation.
            </summary>
        </member>
        <member name="P:_0rison.Anim.RepeatCount">
            <summary>
            The repeat count of the animation.
            </summary>
        </member>
        <member name="P:_0rison.Anim.Frames">
            <summary>
            The frames used in the animation.
            </summary>
        </member>
        <member name="P:_0rison.Anim.FrameDelays">
            <summary>
            The frame delays used in the animation.
            </summary>
        </member>
        <member name="P:_0rison.Anim.FrameCount">
            <summary>
            The total number of frames in this animation.
            </summary>
        </member>
        <member name="P:_0rison.Anim.CurrentFrame">
            <summary>
            The current frame of the animation.
            </summary>
        </member>
        <member name="P:_0rison.Anim.CurrentFrameIndex">
            <summary>
            The current frame index of the animation.
            </summary>
        </member>
        <member name="P:_0rison.Anim.TotalDuration">
            <summary>
            The total duration of the animation.
            </summary>
        </member>
        <member name="M:_0rison.Anim.#ctor(System.Int32[],System.Single[])">
            <summary>
            Creates a new Anim with an array of ints for frames, and an array of floats for frameDelays.
            </summary>
            <param name="frames">The frames from the sprite sheet to display.</param>
            <param name="frameDelays">The time that each frame should be displayed.</param>
        </member>
        <member name="M:_0rison.Anim.#ctor(System.String,System.String)">
            <summary>
            Creates a new Anim with a string of ints for frames, and a string of floats for frameDelays.
            </summary>
            <param name="frames">A string of frames separated by a delim character.  Example: "0,1,2-7,9,11"</param>
            <param name="frameDelays">A string of floats separated by a delim character.  Example: "0.5f,1,0.5f,1"</param>
            <param name="delim">The string of characters to parse the string by.  Default is ","</param>
        </member>
        <member name="M:_0rison.Anim.Repeat(System.Int32)">
            <summary>
            Determines how many times this animation loops.  -1 for infinite.
            </summary>
            <param name="times">How many times the animation should repeat.</param>
            <returns>The anim object.</returns>
        </member>
        <member name="M:_0rison.Anim.NoRepeat">
            <summary>
            Disables repeating.  Animations default to repeat on.
            </summary>
            <returns>The anim object.</returns>
        </member>
        <member name="M:_0rison.Anim.PingPong(System.Boolean)">
            <summary>
            Determines if the animation will repeat by going back and forth between the start and end.
            </summary>
            <param name="pingpong">True for yes, false for no no no.</param>
            <returns>The anim object.</returns>
        </member>
        <member name="M:_0rison.Anim.Speed(System.Single)">
            <summary>
            Determines the playback speed of the animation.  1 = 1 frame.
            </summary>
            <param name="speed">The new speed.</param>
            <returns>The anim object.</returns>
        </member>
        <member name="M:_0rison.Anim.LoopBackTo(System.Int32)">
            <summary>
            Determines which frame the animation will loop back to when it repeats.
            </summary>
            <param name="frame">The frame to loop back to (from 0 to frame count - 1)</param>
            <returns>The anim object.</returns>
        </member>
        <member name="M:_0rison.Anim.Stop">
            <summary>
            Stops the animation and returns it to the first frame.
            </summary>
            <returns>The anim object.</returns>
        </member>
        <member name="M:_0rison.Anim.Reset">
            <summary>
            Resets the animation back to frame 0 but does not stop it.
            </summary>
            <returns>The anim object.</returns>
        </member>
        <member name="M:_0rison.Anim.Update(System.Single)">
            <summary>
            Updates the Anim object.  Handled by the Spritemap usually.  If this doesn't run the animation will not play.
            </summary>
            <param name="t">The time scale.</param>
        </member>
        <member name="T:_0rison.Atlas">
            <summary>
            Class used for loading textures from an Atlas, or a set of Atlases. This class is built to support
            atlases created with Sparrow/Starling exporting from TexturePacker http://www.codeandweb.com/texturepacker
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:_0rison.Atlas.#ctor(System.String)" -->
        <member name="P:_0rison.Atlas.Item(System.String)">
            <summary>
            Get an AtlasTexture by name.
            </summary>
            <param name="name">The name of the image in the atlas data.</param>
            <returns>An AtlasTexture.</returns>
        </member>
        <member name="M:_0rison.Atlas.Add(System.String)">
            <summary>
            Add another atlas to the collection of textures.  Duplicate names will destroy this.
            </summary>
            <param name="source">The relative path to the data file.  The png should be in the same directory.</param>
        </member>
        <member name="M:_0rison.Atlas.AddMultiple(System.String[])">
            <summary>
            Add multiple sources to the Atlas.
            </summary>
            <param name="sources">The file path to the sources.</param>
            <returns>The Atlas.</returns>
        </member>
        <member name="M:_0rison.Atlas.AddNumbered(System.String,System.String)">
            <summary>
            Add multiple atlases from a set created by texture packer.
            Note: This only supports up to 10 atlases (0 - 9)
            </summary>
            <param name="source">The path until the number.  For example: "assets/atlas" if the path is "assets/atlas0.xml"</param>
            <param name="extension">The extension of the source without a dot</param>
            <returns>The Atlas.</returns>
        </member>
        <member name="M:_0rison.Atlas.CreateImage(System.String)">
            <summary>
            Creates a new Image from an AtlasTexture.
            </summary>
            <param name="name">The name of the texture in the atlas data.</param>
            <returns>The created Image.</returns>
        </member>
        <member name="M:_0rison.Atlas.CreateSpritemap``1(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new Spritemap from an AtlasTexture.
            </summary>
            <typeparam name="T">The type to use to reference animations.</typeparam>
            <param name="name">The name of the texture in the atlas data.</param>
            <param name="width">The width of the cell on the sprite sheet.</param>
            <param name="height">The height of the cell on the sprite sheet.</param>
            <returns>The new Spritemap.</returns>
        </member>
        <member name="M:_0rison.Atlas.GetAtlasTexture(System.String)">
            <summary>
            Get an AtlasTexture by name.
            </summary>
            <param name="name">The name of the image in the atlas data.</param>
            <returns>An AtlasTexture.</returns>
        </member>
        <member name="M:_0rison.Atlas.Exists(System.String)">
            <summary>
            Tests if a texture by the specified name exists in the atlas data.
            </summary>
            <param name="name">The name of the texture to test.</param>
            <returns>True if the atlas data contains a texture by the specified name.</returns>
        </member>
        <member name="T:_0rison.AtlasTexture">
            <summary>
            Class used for representing a texture on a texture atlas.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.X">
            <summary>
            The X position of the texture in the atlas.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.Y">
            <summary>
            The Y position of the texture in the atlas.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.Width">
            <summary>
            The width of the texture in the atlas.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.Height">
            <summary>
            The height of the texture in the atlas.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.FrameWidth">
            <summary>
            The frame width of the texture in the atlas (used in Trim mode.)
            Trim is not supported yet.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.FrameHeight">
            <summary>
            The frame height of the texture in the atlas (used in Trim mode.)
            Trim is not supported yet.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.FrameX">
            <summary>
            The frame X position of the texture in the atlas (used in Trim mode.)
            Trim is not supported yet.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.FrameY">
            <summary>
            The frame Y position of the texture in the atlas (used in Trim mode.)
            Trim is not supported yet.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.Name">
            <summary>
            The name of the texture in the atlas.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.Source">
            <summary>
            The file path source of the texture.
            </summary>
        </member>
        <member name="F:_0rison.AtlasTexture.Texture">
            <summary>
            The texture loaded for this atlas texture.
            </summary>
        </member>
        <member name="P:_0rison.AtlasTexture.Region">
            <summary>
            The rectangle region of the texture in the atlas.
            </summary>
        </member>
        <member name="T:_0rison.BitmapFont">
            <summary>
            Font used for loading premade textures of characters, usually arcade fonts and stuff like that.
            Currently supports fonts created with BMFont, Littera, and CBFG.
            </summary>
        </member>
        <member name="M:_0rison.BitmapFont.LoadDataFile(System.String,_0rison.BitmapFontDataType)">
            <summary>
            Loads the data to render the bitmap text with from a file.
            </summary>
            <param name="path">The path to the file that contains the data.</param>
            <param name="dataType">The type of data.</param>
            <returns>The BitmapFont</returns>
        </member>
        <member name="M:_0rison.BitmapFont.LoadData(System.String,_0rison.BitmapFontDataType)">
            <summary>
            Loads the data to render the bitmap text with.
            </summary>
            <param name="data">The data.</param>
            <param name="dataType">Type of the data.</param>
            <returns>The BitmapFont</returns>
        </member>
        <member name="T:_0rison.Decals">
            <summary>
            Graphic that can render a bunch of static images all at once.  Images must use the same
            texture as the Decals object in order to be baked together properly.
            </summary>
        </member>
        <member name="P:_0rison.Decals.Solid">
            <summary>
            If the decals have been baked or not.
            </summary>
        </member>
        <member name="P:_0rison.Decals.Count">
            <summary>
            The number of images in the list.
            </summary>
        </member>
        <member name="M:_0rison.Decals.#ctor(System.String)">
            <summary>
            Create a new Decals object using a source file path for a texture.
            </summary>
            <param name="source">The file path to the texture.</param>
        </member>
        <member name="M:_0rison.Decals.#ctor(_0rison.Texture)">
            <summary>
            Create a new Decals object using a Texture.
            </summary>
            <param name="texture">The Texture to use.</param>
        </member>
        <member name="M:_0rison.Decals.#ctor(_0rison.AtlasTexture)">
            <summary>
            Create a new Decals object using an AtlasTexture.
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:_0rison.Decals.Add(_0rison.Image)">
            <summary>
            Add an image to the list of decals.  Only works if Solid is false.
            </summary>
            <param name="image">The image to add.</param>
        </member>
        <member name="M:_0rison.Decals.Remove(_0rison.Image)">
            <summary>
            Remove an image from the list of decals.  Only works if Solid is false.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:_0rison.Decals.Clear">
            <summary>
            Erases all images from the list.  Only works if Solid is false.  Will not immediately show changes
            until Bake() is called.
            </summary>
        </member>
        <member name="M:_0rison.Decals.Bake">
            <summary>
            Bake all the images together for rendering.
            </summary>
        </member>
        <member name="M:_0rison.Decals.Unbake">
            <summary>
            Unbake the images back to an editable form.
            </summary>
        </member>
        <member name="T:_0rison.Gradient">
            <summary>
            Graphic that renders as a simple gradient between 4 points.
            </summary>
        </member>
        <member name="M:_0rison.Gradient.#ctor(System.Int32,System.Int32,_0rison.Color,_0rison.Color,_0rison.Color,_0rison.Color)">
            <summary>
            Create a new Gradient using 4 Colors for each corner.
            </summary>
            <param name="width">The width of the gradient.</param>
            <param name="height">The height of the gradient.</param>
            <param name="TopLeft">The Color of the top left corner.</param>
            <param name="TopRight">The Color of the top right corner.</param>
            <param name="BottomRight">The Color of the bottom right corner.</param>
            <param name="BottomLeft">The Color of the bottom left corner.</param>
        </member>
        <member name="M:_0rison.Gradient.#ctor(_0rison.Gradient)">
            <summary>
            Create a new Gradient using another Gradient.
            </summary>
            <param name="copy">The source Gradient to copy.</param>
        </member>
        <member name="M:_0rison.Gradient.SetColor(_0rison.Color,_0rison.Gradient.ColorPosition)">
            <summary>
            Set the Color of a specific position.
            </summary>
            <param name="color">The new Color.</param>
            <param name="position">The position to change the Color on.</param>
        </member>
        <member name="M:_0rison.Gradient.GetColor(_0rison.Gradient.ColorPosition)">
            <summary>
            Get the Color of a specific position.
            </summary>
            <param name="position">The position to get the Color of.</param>
            <returns></returns>
        </member>
        <member name="T:_0rison.Graphic">
            <summary>
            Base abstract class used for anything that can be rendered.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.Relative">
            <summary>
            Determines if the Graphic is rendered relative to its Entity.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.X">
            <summary>
            The X position of the Graphic.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Y">
            <summary>
            The Y position of the Graphic.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.Visible">
            <summary>
            Determines if the Graphic will render.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.ScrollX">
            <summary>
            The scroll factor for the x position. Used for parallax like effects. Values lower than 1
            will scroll slower than the camera (appear to be further away) and values higher than 1
            will scroll faster than the camera (appear to be closer.)
            </summary>
        </member>
        <member name="F:_0rison.Graphic.ScrollY">
            <summary>
            The scroll factor for the y position. Used for parallax like effects. Values lower than 1
            will scroll slower than the camera (appear to be further away) and values higher than 1
            will scroll faster than the camera (appear to be closer.)
            </summary>
        </member>
        <member name="P:_0rison.Graphic.ScaleX">
            <summary>
            The horizontal scale of the graphic.  Used in the final transformation.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.ScaleY">
            <summary>
            The vertical scale of the graphic.  Used in the final transformation.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Angle">
            <summary>
            The angle of rotation of the graphic.  Used in the final transformation.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.OriginX">
            <summary>
            The X origin point to scale and rotate the graphic with.  Used in the final transformation.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.OriginY">
            <summary>
            The Y origin point to scale and rotate the graphic with.  Used in the final transformation.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.ShakeX">
            <summary>
            The horizontal amount to randomly offset the graphic by each frame.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.ShakeY">
            <summary>
            The vertial amount to randomly offset the graphic by each frame.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.Dynamic">
            <summary>
            If true the graphic will always update its drawable.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.TextureRegion">
            <summary>
            The region to render the Texture with.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.AtlasRegion">
            <summary>
            The Rectangle to render an AtlasTexture with.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.Shader">
            <summary>
            The shader to be applied to this graphic.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.Name">
            <summary>
            The name of the graphic.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.Blend">
            <summary>
            The blend mode to be applied to this graphic.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.RepeatX">
            <summary>
            Determines if the image should be rendered multiple times horizontally.
            </summary>
        </member>
        <member name="F:_0rison.Graphic.RepeatY">
            <summary>
            Determines if the image should be rendered multiple times vertically.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Color">
            <summary>
            The base color of the Graphic.  Multiplies the vertices of the graphic by this color.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Texture">
            <summary>
            The texture that the graphic is using.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Alpha">
            <summary>
            The base transparency of the graphic.  A shortcut to access the base color's Alpha.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Width">
            <summary>
            The width of the Graphic.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Height">
            <summary>
            The height of the Graphic.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.ScaledWidth">
            <summary>
            The width in pixels of the image after applying the X scale.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.ScaledHeight">
            <summary>
            The height in pixels of the image after applying the Y scale.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Smooth">
            <summary>
            Smooth the texture of a sprite image while scaling it.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Scroll">
            <summary>
            Set both ScrollX and ScrollY.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.HalfWidth">
            <summary>
            Half of the width.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.HalfHeight">
            <summary>
            Half of the height.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Scale">
            <summary>
            Sets both the ScaleX and ScaleY at the same time.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Repeat">
            <summary>
            Sets both RepeatX and RepeatY at the same time.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Shake">
            <summary>
            A shortcut to set both ShakeX and ShakeY.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Left">
            <summary>
            The X position of the left side of the Graphic.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Top">
            <summary>
            The Y position of the top of the Graphic.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Right">
            <summary>
            The X position of the right side of the Graphic.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.Bottom">
            <summary>
            The Y position of the bottom of the Graphic.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.TextureLeft">
            <summary>
            The X position of the left of the Texture.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.TextureRight">
            <summary>
            The X position of the right of the Texture.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.TextureTop">
            <summary>
            The Y position of the top of the Texture.
            </summary>
        </member>
        <member name="P:_0rison.Graphic.TextureBottom">
            <summary>
            The Y position of the bottom of the Texture.
            </summary>
        </member>
        <member name="M:_0rison.Graphic.UpdateDrawable">
            <summary>
            Updates the internal SFML data for rendering.
            </summary>
        </member>
        <member name="M:_0rison.Graphic.ClearShader">
            <summary>
            Removes the shader from the graphic.
            </summary>
        </member>
        <member name="M:_0rison.Graphic.SetPosition(System.Single,System.Single)">
            <summary>
            Set the position of the Graphic.
            </summary>
            <param name="x">The X Position.</param>
            <param name="y">The Y Position.</param>
        </member>
        <member name="M:_0rison.Graphic.SetPosition(_0rison.Graphic,System.Single,System.Single)">
            <summary>
            Set the position of the Graphic.
            </summary>
            <param name="g">The Graphic to get the position from.</param>
        </member>
        <member name="M:_0rison.Graphic.SetPosition(_0rison.Vector2)">
            <summary>
            Set the position of the Graphic.
            </summary>
            <param name="xy">The Vector2 to get the position from.</param>
        </member>
        <member name="M:_0rison.Graphic.SetOrigin(System.Single,System.Single)">
            <summary>
            Set the origin of the Graphic.
            </summary>
            <param name="x">The X origin.</param>
            <param name="y">The Y origin.</param>
        </member>
        <member name="M:_0rison.Graphic.SetOrigin(_0rison.Vector2)">
            <summary>
            Set the origin of the Graphic.
            </summary>
            <param name="xy">The X,Y position of the origin.</param>
        </member>
        <member name="M:_0rison.Graphic.SetTexture(System.String)">
            <summary>
            Set the Texture that the Graphic is using (if it is using one.)
            </summary>
            <param name="path">The path to the Texture to use.</param>
        </member>
        <member name="M:_0rison.Graphic.SetTexture(_0rison.Texture)">
            <summary>
            Set the Texture that the Graphic is using (if it is using one.)
            </summary>
            <param name="texture">The Texture to use.</param>
        </member>
        <member name="M:_0rison.Graphic.SetTexture(_0rison.AtlasTexture)">
            <summary>
            Set the Texture that the Graphic is using (if it is using one.)
            </summary>
            <param name="atlasTexture">The AtlasTexture to use.</param>
        </member>
        <member name="M:_0rison.Graphic.Update">
            <summary>
            Update the graphic.
            </summary>
        </member>
        <member name="M:_0rison.Graphic.CenterOrigin">
            <summary>
            Centers the graphic origin.
            </summary>
        </member>
        <member name="M:_0rison.Graphic.CenterOriginZero">
            <summary>
            Centers the graphic origin while retaining its relative position.
            </summary>
        </member>
        <member name="M:_0rison.Graphic.Render(System.Single,System.Single)">
            <summary>
            Draws the graphic.
            </summary>
            <param name="x">the x offset to draw the image from</param>
            <param name="y">the y offset to draw the image from</param>
        </member>
        <member name="F:_0rison.Graphic.NeedsUpdate">
            <summary>
            Determines if the graphic's core drawable will have to be updated before it's rendered.
            </summary>
        </member>
        <member name="T:_0rison.BlendMode">
            <summary>
            The blendmodes that can be used for graphic rendering.
            </summary>
        </member>
        <member name="T:_0rison.Grid">
            <summary>
            Graphic that renders as a checkerboard type grid that fills the defined area using two alternating
            colors.
            </summary>
        </member>
        <member name="F:_0rison.Grid.ColorA">
            <summary>
            The first Color to use for the Grid.
            </summary>
        </member>
        <member name="F:_0rison.Grid.ColorB">
            <summary>
            The second Color to use for the Grid.
            </summary>
        </member>
        <member name="F:_0rison.Grid.GridWidth">
            <summary>
            The width of each cell on the Grid.
            </summary>
        </member>
        <member name="F:_0rison.Grid.GridHeight">
            <summary>
            The height of each cell on the Grid.
            </summary>
        </member>
        <member name="M:_0rison.Grid.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,_0rison.Color,_0rison.Color)">
            <summary>
            Create a new Grid.
            </summary>
            <param name="width">The width of the Grid in pixels.</param>
            <param name="height">The height of the Gird in pixels.</param>
            <param name="gridWidth">The width of each cell on the Grid.</param>
            <param name="gridHeight">The height of each cell on the Grid.</param>
            <param name="colorA">The first Color of the Grid.</param>
            <param name="colorB">The second Color of the Grid.</param>
        </member>
        <member name="T:_0rison.Image">
            <summary>
            Graphic type that is used to represent a static image.
            </summary>
        </member>
        <member name="F:_0rison.Image.CirclePointCount">
            <summary>
            The amount of points to use when rendering a circle shape.
            </summary>
        </member>
        <member name="M:_0rison.Image.CreateRectangle(System.Int32,System.Int32,_0rison.Color)">
            <summary>
            Creates a rectangle.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="color">The color of the rectangle.</param>
            <returns>A new image containing the rectangle.</returns>
        </member>
        <member name="M:_0rison.Image.CreateRectangle(_0rison.Color)">
            <summary>
            Creates a rectangle the size of the active Game window.
            </summary>
            <param name="color">The color of the rectangle.</param>
            <returns>A new image containing the rectangle.</returns>
        </member>
        <member name="M:_0rison.Image.CreateRectangle">
            <summary>
            Creates a simple black rectangle the size of the active Game window.
            </summary>
            <returns>A new image containing the rectangle.</returns>
        </member>
        <member name="M:_0rison.Image.CreateRectangle(System.Int32,System.Int32)">
            <summary>
            Creates a rectangle.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>A new image containing the rectangle.</returns>
        </member>
        <member name="M:_0rison.Image.CreateRectangle(System.Int32)">
            <summary>
            Creates a rectangle.
            </summary>
            <param name="size">The width and height of the rectangle.</param>
            <returns>A new image containing the rectangle.</returns>
        </member>
        <member name="M:_0rison.Image.CreateRectangle(System.Int32,_0rison.Color)">
            <summary>
            Creates a rectangle.
            </summary>
            <param name="size">The width and height of the rectangle.</param>
            <param name="color">The color of the rectangle.</param>
            <returns>A new image containing the rectangle.</returns>
        </member>
        <member name="M:_0rison.Image.CreateCircle(System.Int32,_0rison.Color)">
            <summary>
            Create a circle.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="color">The color of the circle.</param>
            <returns>A new image containing the circle.</returns>
        </member>
        <member name="M:_0rison.Image.CreateCircle(System.Int32)">
            <summary>
            Create a white circle.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <returns>A new image containing the circle.</returns>
        </member>
        <member name="P:_0rison.Image.ClippingRegion">
            <summary>
            Defines which area of the Image to show.
            </summary>
        </member>
        <member name="P:_0rison.Image.FlippedX">
            <summary>
            Flip the texture coordinates on the X axis.
            </summary>
        </member>
        <member name="P:_0rison.Image.FlippedY">
            <summary>
            Flip the texture coordinates on the Y axis.
            </summary>
        </member>
        <member name="P:_0rison.Image.OutlineColor">
            <summary>
            The outline color of the Image (only applies to circles and rectangles.)
            </summary>
        </member>
        <member name="P:_0rison.Image.OutlineThickness">
            <summary>
            The outline thickness of the Image (only applies to circles and rectangles.)
            </summary>
        </member>
        <member name="M:_0rison.Image.#ctor(System.String)">
            <summary>
            Creates a new Image using a filepath to a texture.  
            </summary>
            <param name="source">The filepath of the texture.</param>
            <param name="clip">Where to clip the texture.</param>
        </member>
        <member name="M:_0rison.Image.#ctor(_0rison.Texture)">
            <summary>
            Creates a new Image using a Texture.
            </summary>
            <param name="texture">The Texture to use.</param>
        </member>
        <member name="M:_0rison.Image.#ctor(_0rison.AtlasTexture)">
            <summary>
            Creates a new Image using an AtlasTexture.
            </summary>
            <param name="texture">The AtlasTexture to use.</param>
        </member>
        <member name="M:_0rison.Image.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Image using a specified width and height.
            </summary>
            <param name="width">The width of the Image.</param>
            <param name="height">The hight of the Image.</param>
        </member>
        <member name="T:_0rison.ImageSet">
            <summary>
            Graphic that renders part of a sprite sheet, but does not automatically animate it at all.
            </summary>
        </member>
        <member name="P:_0rison.ImageSet.Rows">
            <summary>
            The number of rows on the image sheet.
            </summary>
        </member>
        <member name="P:_0rison.ImageSet.Columns">
            <summary>
            The number of columns on the image sheet.
            </summary>
        </member>
        <member name="P:_0rison.ImageSet.Frames">
            <summary>
            The number of frames on the image sheet.
            </summary>
        </member>
        <member name="P:_0rison.ImageSet.Frame">
            <summary>
            The frame to render from the image set.
            </summary>
        </member>
        <member name="M:_0rison.ImageSet.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create a new ImageSet from a file path for a texture.
            </summary>
            <param name="source">The file path to the texture to use for the image sheet.</param>
            <param name="width">The width of each cell on the image sheet.</param>
            <param name="height">The height of each cell on the image sheet.</param>
        </member>
        <member name="M:_0rison.ImageSet.#ctor(_0rison.Texture,System.Int32,System.Int32)">
            <summary>
            Create a new ImageSet from a Texture.
            </summary>
            <param name="texture">The Texture to use for the image sheet.</param>
            <param name="width">The width of each cell on the image sheet.</param>
            <param name="height">The height of each cell on the image sheet.</param>
        </member>
        <member name="M:_0rison.ImageSet.#ctor(_0rison.AtlasTexture,System.Int32,System.Int32)">
            <summary>
            Create a new ImageSet from an AtlasTexture.
            </summary>
            <param name="texture">The AtlasTexture to use for the image sheet.</param>
            <param name="width">The width of each cell on the image sheet.</param>
            <param name="height">The height of each cell on the image sheet.</param>
        </member>
        <member name="M:_0rison.ImageSet.UpdateTextureRegion(System.Int32)">
            <summary>
            Updates the internal source for the texture.
            </summary>
            <param name="frame">The frame in terms of the sprite sheet.</param>
        </member>
        <member name="T:_0rison.NineSlice">
            <summary>
            Graphic type used to render a panel made up of 9 slices of an image. Handy for rendering panels
            with border graphics.
            </summary>
        </member>
        <member name="M:_0rison.NineSlice.SetFillRect(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Register a fill rectangle for a specific asset.  Useful for not having to set the same fill rect
            every time you use a NineSlice for a specific image.
            </summary>
            <param name="key">The asset path.</param>
            <param name="x1">Fill rect x1.</param>
            <param name="y1">Fill Rect y1</param>
            <param name="x2">Fill rect x2.</param>
            <param name="y2">Fill Rect y2</param>
        </member>
        <member name="M:_0rison.NineSlice.SetFillRect(System.String[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the FillRect for a NineSlice globally.
            </summary>
            <param name="keys">The source Texture of the NineSlice. (File path or name on Atlas both work.)</param>
            <param name="x1">The left corner of the fill rectangle.</param>
            <param name="y1">The top corner of the fill rectangle.</param>
            <param name="x2">The right corner of the fill rectangle.</param>
            <param name="y2">The bottom corner of the fill rectangle.</param>
        </member>
        <member name="M:_0rison.NineSlice.SetBorderPadding(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the FillRect of the NineSlice using padding values.
            </summary>
            <param name="top">How far from the top of the texture to begin the rectangle.</param>
            <param name="right">How far from the right of the texture to end the rectangle.</param>
            <param name="bottom">How far from the bottom of the texture to end the rectangle.</param>
            <param name="left">How far from the left of the texture to begin the rectangle.</param>
            <returns>The NineSlice object.</returns>
        </member>
        <member name="M:_0rison.NineSlice.SetBorderPadding(System.String,System.Int32)">
            <summary>
            Set the FillRect of the NineSlice using padding values.
            </summary>
            <param name="padding">How far from the border of the texture to make the rectangle.</param>
            <returns>The NineSlice object.</returns>
        </member>
        <member name="M:_0rison.NineSlice.SetBorderPadding(System.String,System.Int32,System.Int32)">
            <summary>
            Set the FillRect of the NineSlice using padding values.
            </summary>
            <param name="horizontal">How far horizontally from the border of the texture to make the rectangle.</param>
            <param name="vertical">How far horizontally from the border of the texture to make the rectangle.</param>
            <returns>The NineSlice object.</returns>
        </member>
        <member name="F:_0rison.NineSlice.UseInsideOrigin">
            <summary>
            Draw the panel from the top left corner of the middle slice.
            </summary>
        </member>
        <member name="F:_0rison.NineSlice.SnapWidth">
            <summary>
            When using PanelType.Tiled snap the width to increments of the tile width.
            </summary>
        </member>
        <member name="F:_0rison.NineSlice.SnapHeight">
            <summary>
            When using PanelType.Tiled snap the height to increments of the tile height.
            </summary>
        </member>
        <member name="F:_0rison.NineSlice.PanelSizeMode">
            <summary>
            Determines how the size of the panel will be adjusted when setting PanelWidth and PanelHeight.
            If set to All, the entire panel will be the width and height.
            If set to Inside, the inside of the panel will be the width and height.
            </summary>
        </member>
        <member name="P:_0rison.NineSlice.PanelType">
            <summary>
            The type of panel to use for the NineSlice.
            </summary>
        </member>
        <member name="P:_0rison.NineSlice.ClippingRegion">
            <summary>
            Render the NineSlice through a clipping rectangle.
            </summary>
        </member>
        <member name="P:_0rison.NineSlice.UsePanelClip">
            <summary>
            Determines if the ClippingRegion is used or not.
            </summary>
        </member>
        <member name="P:_0rison.NineSlice.PanelWidth">
            <summary>
            Set the panel width of the NineSlice.  This will update and rerender it.
            </summary>
        </member>
        <member name="P:_0rison.NineSlice.PanelHeight">
            <summary>
            Set the panel height of the NineSlice.  This will update and rerender it.
            </summary>
        </member>
        <member name="M:_0rison.NineSlice.#ctor(System.String,System.Int32,System.Int32,System.Nullable{_0rison.Rectangle})">
            <summary>
            Create a new NineSlice with a file path to a Texture.
            </summary>
            <param name="source">The file path to the Texture.</param>
            <param name="width">The width of the NineSlice panel.</param>
            <param name="height">The height of the NineSlice panel.</param>
            <param name="fillRect">The rectangle to determine the stretched areas.</param>
        </member>
        <member name="M:_0rison.NineSlice.#ctor(_0rison.Texture,System.Int32,System.Int32,System.Nullable{_0rison.Rectangle})">
            <summary>
            Create a new NineSlice with a Texture.
            </summary>
            <param name="texture">The Texture to use.</param>
            <param name="width">The width of the NineSlice panel.</param>
            <param name="height">The height of the NineSlice panel.</param>
            <param name="fillRect">The rectangle to determine the stretched areas.</param>
        </member>
        <member name="M:_0rison.NineSlice.#ctor(_0rison.AtlasTexture,System.Int32,System.Int32,System.Nullable{_0rison.Rectangle})">
            <summary>
            Create a new NineSlice with an AtlasTexture.
            </summary>
            <param name="texture">The AtlasTexture to use.</param>
            <param name="width">The width of the NineSlice panel.</param>
            <param name="height">The height of the NineSlice panel.</param>
            <param name="fillRect">The rectangle to determine the stretched areas.</param>
        </member>
        <member name="M:_0rison.NineSlice.SetFillRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the FillRect of the NineSlice.  This determines which areas are stretched or tiled when rendering the tiles.
            </summary>
            <param name="x1">The left corner of the rectangle.</param>
            <param name="y1">The top corner of the rectangle.</param>
            <param name="x2">The right corner of the rectangle.</param>
            <param name="y2">The bottom corner of the rectangle.</param>
            <returns>The NineSlice object.</returns>
        </member>
        <member name="M:_0rison.NineSlice.GetFillRect">
            <summary>
            Get the FillRect of the NineSlice.  This determines which areas are stretched or tiled when rendering the tiles.
            </summary>
            <returns>The Rectangle of the FillRect.</returns>
        </member>
        <member name="M:_0rison.NineSlice.SetBorderPadding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the FillRect of the NineSlice using padding values.
            </summary>
            <param name="top">How far from the top of the texture to begin the rectangle.</param>
            <param name="right">How far from the right of the texture to end the rectangle.</param>
            <param name="bottom">How far from the bottom of the texture to end the rectangle.</param>
            <param name="left">How far from the left of the texture to begin the rectangle.</param>
            <returns>The NineSlice object.</returns>
        </member>
        <member name="M:_0rison.NineSlice.SetBorderPadding(System.Int32)">
            <summary>
            Set the FillRect of the NineSlice using padding values.
            </summary>
            <param name="padding">How far from the border of the texture to make the rectangle.</param>
            <returns>The NineSlice object.</returns>
        </member>
        <member name="M:_0rison.NineSlice.SetBorderPadding(System.Int32,System.Int32)">
            <summary>
            Set the FillRect of the NineSlice using padding values.
            </summary>
            <param name="horizontal">How far horizontally from the border of the texture to make the rectangle.</param>
            <param name="vertical">How far horizontally from the border of the texture to make the rectangle.</param>
            <returns>The NineSlice object.</returns>
        </member>
        <member name="M:_0rison.NineSlice.Render(System.Single,System.Single)">
            <summary>
            Draw the NineSlice.
            </summary>
            <param name="x">The X position offset.</param>
            <param name="y">The Y position offset.</param>
        </member>
        <member name="T:_0rison.DataSaver">
            <summary>
            Class that is used for storing strings, ints, floats, or bools with keys of enum or string.  The
            saver can output data in an semi-encrypted format, and also an editable config file format.
            </summary>
        </member>
        <member name="F:_0rison.DataSaver.KeyDelim">
            <summary>
            The string to use when delimiting key data in data exports.
            </summary>
        </member>
        <member name="F:_0rison.DataSaver.ValueDelim">
            <summary>
            The string to use when delimiting value data in data exports.
            </summary>
        </member>
        <member name="F:_0rison.DataSaver.EncryptionSalt">
            <summary>
            The phrase to use as a salt when encrypting the data exports.
            </summary>
        </member>
        <member name="F:_0rison.DataSaver.SaltGuide">
            <summary>
            The guide to salt the data string.  {S} is the salt, {D} is the data.
            It is recommended to change this from the default for your game, but
            only if you really care about hacking save data.
            </summary>
        </member>
        <member name="F:_0rison.DataSaver.DefaultPath">
            <summary>
            The default path that the files will be imported from and exported to.
            </summary>
        </member>
        <member name="F:_0rison.DataSaver.DefaultFilename">
            <summary>
            The default file name that the data will export as.
            </summary>
        </member>
        <member name="F:_0rison.DataSaver.ExportMode">
            <summary>
            The export mode for the data.
            Data: Semi-encrypted uneditable data.
            Config: Easy to hand edit unencrypted data.
            </summary>
        </member>
        <member name="T:_0rison.DataSaver.DataExportMode">
            <summary>
            The export modes for the data.
            </summary>
        </member>
        <member name="M:_0rison.DataSaver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataSaver class.
            </summary>
            <param name="defaultPath">The default path.</param>
        </member>
        <member name="M:_0rison.DataSaver.Verify(System.String)">
            <summary>
            Verifies the specified string data.  Only applies to DataExportMode.Data.
            </summary>
            <param name="stringData">The string data.</param>
            <returns>True if the data is successfully verified.</returns>
        </member>
        <member name="M:_0rison.DataSaver.ClearFile(System.String)">
            <summary>
            Deletes the exported file for this save data.
            </summary>
            <param name="filename">The filename to delete (usually you don't have to set this.)</param>
        </member>
        <member name="M:_0rison.DataSaver.Clear">
            <summary>
            Clears the data.
            </summary>
        </member>
        <member name="M:_0rison.DataSaver.FileExists(System.String)">
            <summary>
            Check if an exported file exists for this data.
            </summary>
            <param name="filename">The filename to check.</param>
            <returns>True if the exported file exists, and is verified for encrypted files.</returns>
        </member>
        <member name="M:_0rison.DataSaver.Import(System.String,System.Boolean)">
            <summary>
            Imports the data in the specified file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="verify">if set to true verify the data before importing.</param>
        </member>
        <member name="M:_0rison.DataSaver.Export(System.String)">
            <summary>
            Exports the data to the specified file.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="P:_0rison.DataSaver.Item(System.String)">
            <summary>
            Gets the string with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The string data or null.</returns>
        </member>
        <member name="P:_0rison.DataSaver.Item(System.Enum)">
            <summary>
            Gets the string with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The string data or null.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetFloat(System.String)">
            <summary>
            Gets a float from the data.
            </summary>
            <param name="key">The key.</param>
            <returns>A float from the specified key.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetFloat(System.Enum)">
            <summary>
            Gets a float from the data.
            </summary>
            <param name="key">The key.</param>
            <returns>A float from the specified key.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetFloatOrDefault(System.String,System.Single)">
            <summary>
            Gets a float or a default float value.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultIfNotFound">The default if not found.</param>
            <returns>The value or the default if a value is not found.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetFloatOrDefault(System.Enum,System.Single)">
            <summary>
            Gets a float or a default float value.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultIfNotFound">The default if not found.</param>
            <returns>The value or the default if the key is not found.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetInt(System.String)">
            <summary>
            Gets an int from the data.
            </summary>
            <param name="key">The key.</param>
            <returns>An int from the specified key.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetInt(System.Enum)">
            <summary>
            Gets an int from the data.
            </summary>
            <param name="key">The key.</param>
            <returns>An int from the specified key.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetIntOrDefault(System.String,System.Int32)">
            <summary>
            Gets an int or a default int value.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultIfNotFound">The default if not found.</param>
            <returns>The value or the default if the key is not found.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetIntOrDefault(System.Enum,System.Int32)">
            <summary>
            Gets an int or a default int value.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultIfNotFound">The default if not found.</param>
            <returns>The value or the default if the key is not found.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetString(System.String)">
            <summary>
            Gets a string from the data.
            </summary>
            <param name="key">The key.</param>
            <returns>An int from the specified key.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetString(System.Enum)">
            <summary>
            Gets a string from the data.
            </summary>
            <param name="key">The key.</param>
            <returns>An int from the specified key.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetStringOrDefault(System.String,System.String)">
            <summary>
            Gets a string or a default string value.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultIfNotFound">The default if not found.</param>
            <returns>The value or the default if the key is not found.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetStringOrDefault(System.Enum,System.String)">
            <summary>
            Gets a string or a default string value.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultIfNotFound">The default if not found.</param>
            <returns>The value or the default if the key is not found.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetBool(System.String)">
            <summary>
            Gets a bool from the data.
            </summary>
            <param name="key">The key.</param>
            <returns>An int from the specified key.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetBool(System.Enum)">
            <summary>
            Gets a bool from the data.
            </summary>
            <param name="key">The key.</param>
            <returns>An int from the specified key.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetBoolOrDefault(System.String,System.Boolean)">
            <summary>
            Gets a bool or a default bool value.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultIfNotFound">The default if not found.</param>
            <returns>The value or the default if the key is not found.</returns>
        </member>
        <member name="M:_0rison.DataSaver.GetBoolOrDefault(System.Enum,System.Boolean)">
            <summary>
            Gets a bool or a default bool value.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultIfNotFound">The default if not found.</param>
            <returns>The value or the default if the key is not found.</returns>
        </member>
        <member name="M:_0rison.DataSaver.SetData(System.String,System.Object)">
            <summary>
            Sets the data.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:_0rison.DataSaver.SetData(System.Enum,System.Object)">
            <summary>
            Sets the data.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="P:_0rison.Tween.TimeRemaining">
            <summary>
            The time remaining before the tween ends or repeats.
            </summary>
        </member>
        <member name="P:_0rison.Tween.Completion">
            <summary>
            A value between 0 and 1, where 0 means the tween has not been started and 1 means that it has completed.
            </summary>
        </member>
        <member name="P:_0rison.Tween.Looping">
            <summary>
            Whether the tween is currently looping.
            </summary>
        </member>
        <member name="P:_0rison.Tween.Target">
            <summary>
            The object this tween targets. Will be null if the tween represents a timer.
            </summary>
        </member>
        <member name="M:_0rison.Tween.From(System.Object)">
            <summary>
            Apply target values to a starting point before tweening.
            </summary>
            <param name="values">The values to apply, in an anonymous type ( new { prop1 = 100, prop2 = 0} ).</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.Ease(System.Func{System.Single,System.Single})">
            <summary>
            Set the easing function.
            </summary>
            <param name="ease">The Easer to use.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.OnBegin(System.Action)">
            <summary>
            Set a function to call when the tween begins (useful when using delays). Can be called multiple times for compound callbacks.
            </summary>
            <param name="callback">The function that will be called when the tween starts, after the delay.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.OnComplete(System.Action)">
            <summary>
            Set a function to call when the tween finishes. Can be called multiple times for compound callbacks.
            If the tween repeats infinitely, this will be called each time; otherwise it will only run when the tween is finished repeating.
            </summary>
            <param name="callback">The function that will be called on tween completion.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.OnUpdate(System.Action)">
            <summary>
            Set a function to call as the tween updates. Can be called multiple times for compound callbacks.
            </summary>
            <param name="callback">The function to use.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.Repeat(System.Int32)">
            <summary>
            Enable repeating.
            </summary>
            <param name="times">Number of times to repeat. Leave blank or pass a negative number to repeat infinitely.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.RepeatDelay(System.Single)">
            <summary>
            Set a delay for when the tween repeats.
            </summary>
            <param name="delay">How long to wait before repeating.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.Reflect">
            <summary>
            Sets the tween to reverse every other time it repeats. Repeating must be enabled for this to have any effect.
            </summary>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.Reverse">
            <summary>
            Swaps the start and end values of the tween.
            </summary>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.Rotation(_0rison.Tween.RotationUnit)">
            <summary>
            Whether this tween handles rotation.
            </summary>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.Round">
            <summary>
            Whether tweened values should be rounded to integer values.
            </summary>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:_0rison.Tween.Cancel(System.String[])">
            <summary>
            Cancel tweening given properties.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:_0rison.Tween.Cancel">
            <summary>
            Remove tweens from the tweener without calling their complete functions.
            </summary>
        </member>
        <member name="M:_0rison.Tween.CancelAndComplete">
            <summary>
            Assign tweens their final value and remove them from the tweener.
            </summary>
        </member>
        <member name="M:_0rison.Tween.Pause">
            <summary>
            Set tweens to pause. They won't update and their delays won't tick down.
            </summary>
        </member>
        <member name="M:_0rison.Tween.PauseToggle">
            <summary>
            Toggle tweens' paused value.
            </summary>
        </member>
        <member name="M:_0rison.Tween.Resume">
            <summary>
            Resumes tweens from a paused state.
            </summary>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.SetLerper``1(System.Type)">
            <summary>
            Associate a Lerper class with a property type.
            </summary>
            <typeparam name="TLerper">The Lerper class to use for properties of the given type.</typeparam>
            <param name="type">The type of the property to associate the given Lerper with.</param>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.Tween``1(``0,System.Object,System.Single,System.Single,System.Boolean)">
            <summary>
            <para>Tweens a set of properties on an object.</para>
            <para>To tween instance properties/fields, pass the object.</para>
            <para>To tween static properties/fields, pass the type of the object, using typeof(ObjectType) or object.GetType().</para>
            </summary>
            <param name="target">The object or type to tween.</param>
            <param name="values">The values to tween to, in an anonymous type ( new { prop1 = 100, prop2 = 0} ).</param>
            <param name="duration">Duration of the tween in seconds.</param>
            <param name="delay">Delay before the tween starts, in seconds.</param>
            <param name="overwrite">Whether pre-existing tweens should be overwritten if this tween involves the same properties.</param>
            <returns>The tween created, for setting properties on.</returns>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.Timer(System.Single,System.Single)">
            <summary>
            Starts a simple timer for setting up callback scheduling.
            </summary>
            <param name="duration">How long the timer will run for, in seconds.</param>
            <param name="delay">How long to wait before starting the timer, in seconds.</param>
            <returns>The tween created, for setting properties.</returns>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.Cancel">
            <summary>
            Remove tweens from the tweener without calling their complete functions.
            </summary>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.CancelAndComplete">
            <summary>
            Assign tweens their final value and remove them from the tweener.
            </summary>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.Pause">
            <summary>
            Set tweens to pause. They won't update and their delays won't tick down.
            </summary>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.PauseToggle">
            <summary>
            Toggle tweens' paused value.
            </summary>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.Resume">
            <summary>
            Resumes tweens from a paused state.
            </summary>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.Update(System.Single)">
            <summary>
            Updates the tweener and all objects it contains.
            </summary>
            <param name="secondsElapsed">Seconds elapsed since last update.</param>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.TargetCancel(System.Object)">
            <summary>
            Cancel all tweens with the given target.
            </summary>
            <param name="target">The object being tweened that you want to cancel.</param>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.TargetCancel(System.Object,System.String[])">
            <summary>
            Cancel tweening named properties on the given target.
            </summary>
            <param name="target">The object being tweened that you want to cancel properties on.</param>
            <param name="properties">The properties to cancel.</param>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.TargetCancelAndComplete(System.Object)">
            <summary>
            Cancel, complete, and call complete callbacks for all tweens with the given target..
            </summary>
            <param name="target">The object being tweened that you want to cancel and complete.</param>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.TargetPause(System.Object)">
            <summary>
            Pause all tweens with the given target.
            </summary>
            <param name="target">The object being tweened that you want to pause.</param>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.TargetPauseToggle(System.Object)">
            <summary>
            Toggle the pause state of all tweens with the given target.
            </summary>
            <param name="target">The object being tweened that you want to toggle pause.</param>
        </member>
        <member name="M:_0rison.Tween.TweenerImpl.TargetResume(System.Object)">
            <summary>
            Resume all tweens with the given target.
            </summary>
            <param name="target">The object being tweened that you want to resume.</param>
        </member>
        <member name="T:_0rison.Polygon">
            <summary>
            Class representing a Polygon.
            </summary>
        </member>
        <member name="M:_0rison.Polygon.CreateCircle(System.Single,System.Int32)">
            <summary>
            Creates a Polygon in the shape of a circle.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="steps">How many steps to use to create the circle (higher is rounder.)</param>
            <returns>A circle shaped Polygon.</returns>
        </member>
        <member name="M:_0rison.Polygon.CreateRectangle(System.Single,System.Single)">
            <summary>
            Creates a Polygon in the shape of a rectangle.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>A rectangle shaped Polygon.</returns>
        </member>
        <member name="M:_0rison.Polygon.#ctor(_0rison.Vector2,_0rison.Vector2[])">
            <summary>
            Create a new Polygon.
            </summary>
            <param name="points">The Vector2 points composing the Polygon.</param>
        </member>
        <member name="M:_0rison.Polygon.#ctor(_0rison.Polygon)">
            <summary>
            Create a new Polygon.
            </summary>
            <param name="copy">The source Polygon to copy.</param>
        </member>
        <member name="M:_0rison.Polygon.#ctor(System.Single[])">
            <summary>
            Create a new Polygon.
            </summary>
            <param name="points">A series of points to create the Polygon from (x1, y1, x2, y2, x3, y3...)</param>
        </member>
        <member name="P:_0rison.Polygon.Points">
            <summary>
            The list of Vector2 points.
            </summary>
        </member>
        <member name="P:_0rison.Polygon.Count">
            <summary>
            The number of points in the Polygon.
            </summary>
        </member>
        <member name="P:_0rison.Polygon.Width">
            <summary>
            The Width of the polygon determined by the right most point minus the left most point.
            </summary>
        </member>
        <member name="P:_0rison.Polygon.Height">
            <summary>
            The Height of the polygon determined by the bottom most point minus the top most point.
            </summary>
        </member>
        <member name="P:_0rison.Polygon.HalfWidth">
            <summary>
            Half of the Width.
            </summary>
        </member>
        <member name="P:_0rison.Polygon.HalfHeight">
            <summary>
            Half of the Height.
            </summary>
        </member>
        <member name="P:_0rison.Polygon.Item(System.Int32)">
            <summary>
            The list of Vector2 points in the Polygon.
            </summary>
            <param name="index">The index of the point.</param>
            <returns>The point at the specified index.</returns>
        </member>
        <member name="M:_0rison.Polygon.GetEdgesAsLines">
            <summary>
            Get a list of all the edges of the Polygon as Line2 objects.
            </summary>
            <returns>A Line2 list of all edges.</returns>
        </member>
        <member name="M:_0rison.Polygon.ToString">
            <summary>
            Convert to a string.
            </summary>
            <returns>String of data about the Polygon.</returns>
        </member>
        <member name="M:_0rison.Polygon.OffsetPoints(_0rison.Vector2)">
            <summary>
            Offset all the points by a Vector2 amount.
            </summary>
            <param name="vector">The offset amount.</param>
        </member>
        <member name="M:_0rison.Polygon.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotate the polygon by a specified amount.
            </summary>
            <param name="amount">The amount in degrees to rotate.</param>
            <param name="aroundX">The X position to rotate around.</param>
            <param name="aroundY">The Y position to rotate around.</param>
        </member>
        <member name="M:_0rison.Polygon.Scale(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Scale the polygon by a specified amount.
            </summary>
            <param name="amountX">The amount to scale horizontally.</param>
            <param name="amountY">The amount to scale veritcally.</param>
            <param name="aroundX">The X position to scale around.</param>
            <param name="aroundY">The Y position to scale around.</param>
        </member>
        <member name="M:_0rison.Polygon.Clear">
            <summary>
            Clear all points.
            </summary>
        </member>
        <member name="M:_0rison.Polygon.OffsetPoints(System.Single,System.Single)">
            <summary>
            Offset all the points by a Vector2 amount.
            </summary>
            <param name="vector">The offset amount.</param>
        </member>
        <member name="M:_0rison.Polygon.ContainsPoint(_0rison.Vector2)">
            <summary>
            Check to see if a Polygon contains a point.
            </summary>
            <param name="point">The point to check for.</param>
            <returns>True if the polygon contains the point.</returns>
        </member>
        <member name="M:_0rison.Polygon.ContainsPoint(System.Single,System.Single)">
            <summary>
            Check to see if a Polygon contains a point.
            </summary>
            <param name="x">The X position of the point to check for.</param>
            <param name="y">The Y position of the point to check for.</param>
            <returns>True if the polygon contains the point.</returns>
        </member>
        <member name="M:_0rison.Polygon.Add(_0rison.Vector2)">
            <summary>
            Add a Vector2 to the list of points.
            </summary>
            <param name="point">The Vector2 to add the points.</param>
        </member>
        <member name="M:_0rison.Polygon.Add(System.Single,System.Single)">
            <summary>
            Add an X Y position to the list of points.
            </summary>
            <param name="x">The X position to add.</param>
            <param name="y">The Y position to add.</param>
        </member>
        <member name="M:_0rison.Polygon.Projection(_0rison.Vector2)">
            <summary>
            Project the polygon onto an axis.
            </summary>
            <param name="axis">The axis to project on.</param>
            <returns>The min and max values of the projection.</returns>
        </member>
        <member name="M:_0rison.Polygon.GetAxes">
            <summary>
            Get the axes to project on.
            </summary>
            <returns>A list of normals from the polygon.</returns>
        </member>
        <member name="M:_0rison.Polygon.Overlap(_0rison.Polygon)">
            <summary>
            Test another Polygon for an overlap.  Will not work if either Polygon is concave!
            </summary>
            <param name="other">The other polygon to check.</param>
            <returns>True if this polygon overlaps the other polygon.</returns>
        </member>
        <member name="T:_0rison.SpriteBatch">
            <summary>
            NOT YET SUPPORTED
            Very WIP class, probably internal for 0rison, don't use it yet.
            </summary>
        </member>
        <member name="T:_0rison.SquareClock">
            <summary>
            Graphic that is used to create a square image with a radial mask based on a value of 0 to 1.
            Something like the cool down timers on icons in various games.
            </summary>
        </member>
        <member name="P:_0rison.SquareClock.Fill">
            <summary>
            Determines the fill of the clock.
            </summary>
        </member>
        <member name="P:_0rison.SquareClock.FillAngle">
            <summary>
            The current angle the clock is at.
            </summary>
        </member>
        <member name="M:_0rison.SquareClock.#ctor(System.Int32,_0rison.Color)">
            <summary>
            Creates a new SquareClock.
            </summary>
            <param name="size">The width and height of the clock.</param>
            <param name="color">The fill Color.</param>
        </member>
        <member name="T:_0rison.RichText">
            <summary>
            Graphic that renders text with some more options than normal Text.
            RichText can be very slow to render with large strings of text so be careful!
            For large blocks of text use the normal Text graphic.
            </summary>
            <example>
            richText.String = "Hello, {color:f00}this text is red!{clear} {shake:4}Shaking text!";
            <code>
            Commands:
                {clear} - Clear all styles and reset back to normal, white text.
                {style:name} - Apply the style 'name' to text.  Create styles with AddStyle().
                {color:fff} - Colors text. Strings of 3, 4, 6, or 8 hex digits allowed.
                {color0:fff} - Colors the top left corner of characters.  Strings of 3, 4, 6, or 8 hex digits allowed.
                {color1:fff} - Colors the top right corner of characters.  Strings of 3, 4, 6, or 8 hex digits allowed.
                {color2:fff} - Colors the bottom right corner of characters.  Strings of 3, 4, 6, or 8 hex digits allowed.
                {color3:fff} - Colors the bottom left corner of characters.  Strings of 3, 4, 6, or 8 hex digits allowed.
                {colorShadow:fff} - Colors text shadow. Strings of 3, 4, 6, or 8 hex digits allowed.
                {colorOutline:fff} - Colors text outline. Strings of 3, 4, 6, or 8 hex digits allowed.
                {shadowX:0} - Set the drop shadow of the text on the X axis.
                {shadowY:0} - Set the drop shadow of the text on the Y axis.
                {shadow:0} - Set the drop shadow of the text on the X and Y axes.
                {outline:0} - Set the outline thickness on text.
                {shakeX:0} - Shake the text on the X axis with a float range.
                {shakeY:0} - Shake the text on the Y axis with a float range.
                {shake:0} - Shake the text on the X and Y axes with a float range.
                {waveAmpX:0} - Wave the text on the X axis with a float range.
                {waveAmpY:0} - Wave the text on the Y axis with a float range.
                {waveAmp:0} - Wave the text on the X and Y axes with a float range.
                {waveRateX:0} - Set the wave speed for the X axis.
                {waveRateY:0} - Set the wave speed for the Y axis.
                {waveRate:0} - Set the wave speed for the X and Y axes.
                {waveOffsetX:0} - Set the wave offset for the X axis.
                {waveOffsetY:0} - Set the wave offset for the Y axis.
                {waveOffset:0} - Set the wave offset for the X and Y axes.
                {offset:0} - Set the offset rate for characters.
                {charOffsetX:0} - Set the character offset X for the BitmapFont.
                {charOffsetY:0} - Set the character offset Y for the BitmapFont.
            </code>
            </example>
        </member>
        <member name="M:_0rison.RichText.AddStyle(System.String,System.String)">
            <summary>
            Add a global style to RichText objects.  The style will not be updated unless Refresh() is
            called on the objects.
            </summary>
            <example>
            RichText.AddStyle("important","color:f00,waveAmpY:2,waveRate:2");
            </example>
            <param name="name">The name of the style.</param>
            <param name="content">The properties to set using commas as a delim character.</param>
        </member>
        <member name="M:_0rison.RichText.RemoveStyle(System.String)">
            <summary>
            Removes a style from all RichText objects.
            </summary>
            <param name="name">The name of the style to remove.</param>
        </member>
        <member name="M:_0rison.RichText.ClearStyles">
            <summary>
            Remove all styles from RichText objects.
            </summary>
        </member>
        <member name="F:_0rison.RichText.TextAlign">
            <summary>
            The alignment of the text.  Left, Right, or Center.
            </summary>
        </member>
        <member name="F:_0rison.RichText.CommandOpen">
            <summary>
            The character used to mark an opening of a command.
            </summary>
        </member>
        <member name="F:_0rison.RichText.CommandClose">
            <summary>
            The character used to mark the closing of a command.
            </summary>
        </member>
        <member name="F:_0rison.RichText.CommandDelim">
            <summary>
            The character used to separate the command with the command value.
            </summary>
        </member>
        <member name="F:_0rison.RichText.MonospaceWidth">
            <summary>
            Controls the spacing between each character. If set above 0 the text will use a monospacing.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultSineAmpX">
            <summary>
            The default horizontal amplitude of the sine wave.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultSineAmpY">
            <summary>
            The default vertical amplitude of the sine wave.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultSineRateX">
            <summary>
            The default horizontal rate of the sine wave.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultSineRateY">
            <summary>
            The default vertical rate of the sine wave.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultSineOffsetX">
            <summary>
            The default horizontal offset of the sine wave.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultSineOffsetY">
            <summary>
            The default vertical offset of the sine wave.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultOffsetAmount">
            <summary>
            The default amount to offset each character for sine wave related transformations.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultShadowX">
            <summary>
            The default X position of the text shadow.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultShadowY">
            <summary>
            The default Y position of the text shadow.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultOutlineThickness">
            <summary>
            The default outline thickness.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultShakeX">
            <summary>
            The default horizontal shaking effect.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultShakeY">
            <summary>
            The default vertical shaking effect.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultCharColor">
            <summary>
            The default character color.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultCharColor0">
            <summary>
            The default color of the top left corner of each character.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultCharColor1">
            <summary>
            The default color of the top right corner of each character.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultCharColor2">
            <summary>
            The default color of the bottom right corner of each character.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultCharColor3">
            <summary>
            The default color of the bottom left corner of each character.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultShadowColor">
            <summary>
            The default shadow color.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultOutlineColor">
            <summary>
            The default outline color.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultScaleX">
            <summary>
            The default x scale of the characters.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultScaleY">
            <summary>
            The default y scale of the characters.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.DefaultAngle">
            <summary>
            The default angle of the characters.
            Will not take effect until the string changes, or Refresh() is called.
            </summary>
        </member>
        <member name="F:_0rison.RichText.LineHeight">
            <summary>
            The line height. 1 is 100% of the normal line height for the font.
            </summary>
        </member>
        <member name="F:_0rison.RichText.LetterSpacing">
            <summary>
            The letter spacing. 1 is 100% of the normal letter spacing.
            </summary>
        </member>
        <member name="F:_0rison.RichText.OffsetX">
            <summary>
            How far to offset the text rendering horizontally from the origin.
            </summary>
        </member>
        <member name="F:_0rison.RichText.OffsetY">
            <summary>
            How far to offset the text rendering vertically from the origin.
            </summary>
        </member>
        <member name="F:_0rison.RichText.Default">
            <summary>
            The default config.
            </summary>
        </member>
        <member name="P:_0rison.RichText.Monospaced">
            <summary>
            True if the text is using MonospaceWidth.
            </summary>
        </member>
        <member name="P:_0rison.RichText.TextWidth">
            <summary>
            The width of the text box.  If not set it will be automatically set.
            </summary>
        </member>
        <member name="P:_0rison.RichText.TextHeight">
            <summary>
            The height of the text box.  If not set it will be automatically set.
            </summary>
        </member>
        <member name="P:_0rison.RichText.LineSpacing">
            <summary>
            The line spacing between each vertical line.
            </summary>
        </member>
        <member name="P:_0rison.RichText.WordWrap">
            <summary>
            Determines if the text will automatically wrap.  This will not work unless TextWidth is set.
            </summary>
        </member>
        <member name="P:_0rison.RichText.FontSize">
            <summary>
            The font size of the text.
            </summary>
        </member>
        <member name="P:_0rison.RichText.AutoWidth">
            <summary>
            True of the width was not manually set.
            </summary>
        </member>
        <member name="P:_0rison.RichText.AutoHeight">
            <summary>
            True if the height was not manually set.
            </summary>
        </member>
        <member name="P:_0rison.RichText.CleanString">
            <summary>
            The string to display stripped of all commands.
            </summary>
        </member>
        <member name="P:_0rison.RichText.LongestLine">
            <summary>
            The pixel width of the longest line in the displayed string.
            </summary>
        </member>
        <member name="P:_0rison.RichText.Lines">
            <summary>
            The displayed string broken up into an array by lines.
            </summary>
        </member>
        <member name="P:_0rison.RichText.NumLines">
            <summary>
            The total number of lines in the displayed string.
            </summary>
        </member>
        <member name="P:_0rison.RichText.String">
            <summary>
            The string to display.  This string can contain commands to alter the text dynamically.
            </summary>
        </member>
        <member name="P:_0rison.RichText.CharacterCount">
            <summary>
            The character count of the string without formatting commands.
            </summary>
        </member>
        <member name="P:_0rison.RichText.BoundsTop">
            <summary>
            The top bounds of the RichText.
            </summary>
        </member>
        <member name="P:_0rison.RichText.BoundsLeft">
            <summary>
            The top bounds of the RichText.
            </summary>
        </member>
        <member name="M:_0rison.RichText.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new RichText object.
            </summary>
            <param name="str">The string to display. This can include commands to alter text.</param>
            <param name="font">The file path to the font to use.</param>
            <param name="size">The font size to use.</param>
            <param name="textWidth">The width of the text box.</param>
            <param name="textHeight">The height of the text box.</param>
        </member>
        <member name="M:_0rison.RichText.#ctor(System.String,System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new RichText object.
            </summary>
            <param name="str">The string to display. This can include commands to alter text.</param>
            <param name="font">The stream of the font to use.</param>
            <param name="size">The font size to use.</param>
            <param name="textWidth">The width of the text box.</param>
            <param name="textHeight">The height of the text box.</param>
        </member>
        <member name="M:_0rison.RichText.#ctor(System.String,_0rison.RichTextConfig,System.Int32,System.Int32)">
            <summary>
            Create a new RichText object using a RichTextConfig.
            </summary>
            <param name="str">The starting default text.</param>
            <param name="config">The config to set all the default style values.</param>
            <param name="textWidth">The width of the text box.</param>
            <param name="textHeight">The height of the text box.</param>
        </member>
        <member name="M:_0rison.RichText.#ctor(System.String,System.Int32)">
            <summary>
            Create a new RichText object.
            </summary>
            <param name="str">The string to display.</param>
            <param name="size">The size of the font.</param>
        </member>
        <member name="M:_0rison.RichText.#ctor(System.Int32)">
            <summary>
            Create a new RichText object.
            </summary>
            <param name="size">The size of the font.</param>
        </member>
        <member name="M:_0rison.RichText.#ctor(_0rison.RichTextConfig)">
            <summary>
            Create a new RichText object
            </summary>
            <param name="config">The RichTextConfig to use.</param>
        </member>
        <member name="M:_0rison.RichText.CenterTextOrigin">
            <summary>
            Center the RichText's origin. This factors in the RichText's local bounds.
            </summary>
        </member>
        <member name="M:_0rison.RichText.CenterTextOriginY">
            <summary>
            Center the RichText's Y origin.  This factors in the RichText's top bounds.
            </summary>
        </member>
        <member name="M:_0rison.RichText.CenterTextOriginX">
            <summary>
            Center the RichText's X origin.  This factors in the RichText's left bounds.
            </summary>
        </member>
        <member name="M:_0rison.RichText.PreWrap(System.String)">
            <summary>
            Insert new lines into a string to prepare it for word wrapping with this object's width.
            This function will not wrap text if AutoWidth is true!
            </summary>
            <param name="str">The string to wrap.</param>
            <returns>The wrapped string.</returns>
        </member>
        <member name="M:_0rison.RichText.GetLineWidth(System.Int32)">
            <summary>
            The line width in pixels of a specific line.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <returns>The length of the line in pixels.</returns>
        </member>
        <member name="M:_0rison.RichText.Refresh">
            <summary>
            Refresh the text.  This will reapply all commands and update the text image.
            </summary>
        </member>
        <member name="M:_0rison.RichText.Update">
            <summary>
            Update the RichText.
            </summary>
        </member>
        <member name="M:_0rison.RichText.GetFont``1">
            <summary>
            Gets the font.
            </summary>
            <typeparam name="T">The specific type of Font.</typeparam>
            <returns>The font as type font type T.</returns>
        </member>
        <member name="P:_0rison.RichText.Item(System.Int32)">
            <summary>
            Retrieve the RichTextCharacter from the string.
            </summary>
            <param name="index">The index of the character.</param>
            <returns>The RichTextCharacter at that index in the RichText string.</returns>
        </member>
        <member name="T:_0rison.RichTextCharacter">
            <summary>
            Internal class for managing characters in RichText.
            </summary>
        </member>
        <member name="F:_0rison.RichTextCharacter.Character">
            <summary>
            The character.
            </summary>
        </member>
        <member name="F:_0rison.RichTextCharacter.Timer">
            <summary>
            Timer used for animation.
            </summary>
        </member>
        <member name="F:_0rison.RichTextCharacter.CharOffset">
            <summary>
            The sine wave offset for this specific character.
            </summary>
        </member>
        <member name="F:_0rison.RichTextCharacter.Bold">
            <summary>
            Determines if the character is bold.  Not supported yet.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.Color">
            <summary>
            The Color of the character.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.Color0">
            <summary>
            The Color of the top left corner.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.Color1">
            <summary>
            The Color of the top left corner.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.Color2">
            <summary>
            The Color of the top left corner.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.Color3">
            <summary>
            The Color of the top left corner.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.ShadowColor">
            <summary>
            The Color of the shadow.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.OutlineColor">
            <summary>
            The Color of the outline.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.OffsetAmount">
            <summary>
            The offset amount for each character.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.TextureOffsetX">
            <summary>
            The horizontal texture offset of the character.  BitmapFont only.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.TextureOffsetY">
            <summary>
            The vertical texture offset of the character.  BitmapFont only.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.OutlineThickness">
            <summary>
            The outline thickness.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.SineOffsetX">
            <summary>
            The horizontal sine wave offset.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.SineOffsetY">
            <summary>
            The vertical sine wave offset.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.ShadowX">
            <summary>
            The X position of the shadow.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.ShadowY">
            <summary>
            The Y position of the shadow.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.SineRateX">
            <summary>
            The horizontal sine wave rate.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.SineRateY">
            <summary>
            The vertical sine wave rate.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.ShakeX">
            <summary>
            The amount of horizontal shake.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.ShakeY">
            <summary>
            The amount of vertical shake.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.SineAmpX">
            <summary>
            The horizontal sine wave amplitude.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.SineAmpY">
            <summary>
            The vertical sine wave amplitude.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.ScaleX">
            <summary>
            The X scale of the character.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.ScaleY">
            <summary>
            The Y scale of the character.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.Angle">
            <summary>
            The angle of the character.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.X">
            <summary>
            The X position offset of the character.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.Y">
            <summary>
            The Y position offset of the character.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.OffsetX">
            <summary>
            The final horizontal offset position of the character when rendered.
            </summary>
        </member>
        <member name="P:_0rison.RichTextCharacter.OffsetY">
            <summary>
            The final vertical offset position of the character when rendered.
            </summary>
        </member>
        <member name="M:_0rison.RichTextCharacter.#ctor(System.Char,System.Int32)">
            <summary>
            Creates a new RichTextCharacter.
            </summary>
            <param name="character">The character.</param>
            <param name="charOffset">The character offset for animation.</param>
        </member>
        <member name="M:_0rison.RichTextCharacter.Update">
            <summary>
            Update the character.
            </summary>
        </member>
        <member name="T:_0rison.RichTextConfig">
            <summary>
            A utility class used for storing default values for a RichText object.
            Set the values by using "var config = new RichTextConfig() { Font = "MyFont.ttf", FontSize = 16, ... };"
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.SineAmpX">
            <summary>
            The horizontal sine wave amplitude.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.SineAmpY">
            <summary>
            The vertical sine wave amplitude.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.SineRateX">
            <summary>
            The horizontal sine wave rate.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.SineRateY">
            <summary>
            The vertical sine wave rate.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.SineOffsetX">
            <summary>
            The horizontal sine wave offset.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.SineOffsetY">
            <summary>
            The vertical sine wave offset.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.OffsetAmount">
            <summary>
            The offset amount for each character for sine wave related transformations.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.ShadowX">
            <summary>
            The X position of the shadow.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.ShadowY">
            <summary>
            The Y position of the shadow.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.OutlineThickness">
            <summary>
            The outline thickness.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.ShakeX">
            <summary>
            The amount of horizontal shake.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.ShakeY">
            <summary>
            The amount of vertical shake.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.CharColor">
            <summary>
            The Color of the character.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.CharColor0">
            <summary>
            The Color of the top left corner.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.CharColor1">
            <summary>
            The Color of the top left corner.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.CharColor2">
            <summary>
            The Color of the top left corner.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.CharColor3">
            <summary>
            The Color of the top left corner.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.ShadowColor">
            <summary>
            The Color of the shadow.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.OutlineColor">
            <summary>
            The Color of the outline.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.CharOffsetX">
            <summary>
            The X offset of the character.  BitmapFont only.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.CharOffsetY">
            <summary>
            The Y offset of the character.  BitmapFont only.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.ScaleX">
            <summary>
            The X scale of the character.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.ScaleY">
            <summary>
            The Y scale of the character.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.Angle">
            <summary>
            The angle of the character.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.LetterSpacing">
            <summary>
            The spacing between each character.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.LineHeight">
            <summary>
            The line height between each line. Default is 1.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.MonospaceWidth">
            <summary>
            Controls the spacing between each character. If set above 0 the text will use a monospacing.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.TextAlign">
            <summary>
            The alignment of the text.  Left, Right, or Center.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.Font">
            <summary>
            The font to use.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.FontSize">
            <summary>
            The font size.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.String">
            <summary>
            The string to display.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.TextWidth">
            <summary>
            The width of the text block.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.TextHeight">
            <summary>
            The height of the text block.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.OffsetX">
            <summary>
            How far to offset the text rendering horizontally from the origin.
            </summary>
        </member>
        <member name="F:_0rison.RichTextConfig.OffsetY">
            <summary>
            How far to offset the text rendering vertically from the origin.
            </summary>
        </member>
        <member name="T:_0rison.Shader">
            <summary>
            Class representing a shader written in GLSL.
            Warning: Visual Studio encoding must be set to Western European (Windows) Codepage 1252 when editing shaders!
            More details here: http://blog.pixelingene.com/2008/07/file-encodings-matter-when-writing-pixel-shaders/
            </summary>
        </member>
        <member name="M:_0rison.Shader.FromString(System.String,System.String)">
             <summary>
             Load both the vertex and fragment shaders from source codes in memory
            
             This function can load both the vertex and the fragment
             shaders, or only one of them: pass NULL if you don't want to load
             either the vertex shader or the fragment shader.
             The sources must be valid shaders in GLSL language. GLSL is
             a C-like language dedicated to OpenGL shaders; you'll
             probably need to read a good documentation for it before
             writing your own shaders.
             </summary>
             <param name="vertexShader">String containing the source code of the vertex shader</param>
             <param name="fragmentShader">String containing the source code of the fragment shader</param>
             <returns>New shader instance</returns>
        </member>
        <member name="M:_0rison.Shader.FromString(_0rison.ShaderType,System.String)">
            <summary>
            Creates a Shader using source code in memory
            </summary>
            <param name="shaderType">Type of Shader</param>
            <param name="shader">GLSL code in memory</param>
            <returns>New Shader</returns>
        </member>
        <member name="M:_0rison.Shader.AddParameter(System.Enum,System.String)">
            <summary>
            Store a shader parameter name by an Enum value.  After storing a parameter this way
            you can use SetParameter on shader instances with the Enum value and it will retrieve
            the parameter name string.
            </summary>
            <example>
            If your shader has a parameter named "overlayColor" you can do this:
            Shader.SetParameter(ShaderParams.OverlayColor, "overlayColor");
            And then on a shader instance you can do this:
            someImageWithAShader.Shader.SetParameter(ShaderParams.OverlayColor, Color.Red);
            </example>
            <param name="name">The Enum value to use as the key for the shader parameter name.</param>
            <param name="nameInShader">The name of the parameter in the shader code.</param>
        </member>
        <member name="M:_0rison.Shader.Parameter(System.Enum)">
            <summary>
            Get the parameter string stored with the Enum key.
            </summary>
            <param name="name">The Enum name that is the key for the string parameter.</param>
            <returns>The string parameter.</returns>
        </member>
        <member name="M:_0rison.Shader.#ctor(System.String,System.String)">
            <summary>
            Creates a Shader using a file as the source for the vertex and fragment shader.
            </summary>
            <param name="vertexFile">The file path to the vertex shader.</param>
            <param name="fragmentFile">The file path to the fragment shader.</param>
        </member>
        <member name="M:_0rison.Shader.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a Shader using a stream as the source of the vertex and fragment shader.
            </summary>
            <param name="vertexStream">The stream for the vertex shader.</param>
            <param name="fragmentStream">The stream for the fragment shader.</param>
        </member>
        <member name="M:_0rison.Shader.#ctor(_0rison.ShaderType,System.IO.Stream)">
            <summary>
            Create a shader using a stream as the source and a ShaderType parameter.
            </summary>
            <param name="shaderType">The shader type (fragment or vertex)</param>
            <param name="source">The stream for the shader.</param>
        </member>
        <member name="M:_0rison.Shader.#ctor(System.String)">
            <summary>
            Creates a Shader using a file path source, and auto detects which type of shader
            it is.  If the file path contains ".frag" or ".fs" it is assumed to be a fragment shader.
            </summary>
            <param name="source">The file path.</param>
        </member>
        <member name="M:_0rison.Shader.#ctor(_0rison.Shader)">
            <summary>
            Creates a shader using a copy of another shader.
            </summary>
            <param name="copy">The shader to copy.</param>
        </member>
        <member name="M:_0rison.Shader.#ctor(_0rison.ShaderType,System.String)">
            <summary>
            Creates a shader using a file path and a ShaderType parameter.
            </summary>
            <param name="shaderType">The shader type (fragment or vertex)</param>
            <param name="source">The file path.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,_0rison.Color)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="color">The color to set it to.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,_0rison.Color)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="color">The color to set it to.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The value to set it to.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The value to set it to.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,System.Single,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The first value of a vec2.</param>
            <param name="y">The first value of a vec2.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,System.Single,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The first value of a vec2.</param>
            <param name="y">The first value of a vec2.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,_0rison.Vector2)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="xy">A Vector2 to set.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,_0rison.Vector2)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="xy">A Vector2 to set.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,_0rison.Vector3)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="xyz">A Vector3 to set.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,_0rison.Vector3)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="xyz">A Vector3 to set.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,_0rison.Vector4)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="xyzw">A Vector4 to set.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,_0rison.Vector4)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="xyzw">A Vector4 to set.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The first value of a vec3.</param>
            <param name="y">The second value of a vec3.</param>
            <param name="z">The third value of a vec3.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,System.Single,System.Single,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The first value of a vec3.</param>
            <param name="y">The second value of a vec3.</param>
            <param name="z">The third value of a vec3.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The first value of a vec4.</param>
            <param name="y">The second value of a vec4.</param>
            <param name="z">The third value of a vec4.</param>
            <param name="w">The fourth value of a vec4.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The first value of a vec4.</param>
            <param name="y">The second value of a vec4.</param>
            <param name="z">The third value of a vec4.</param>
            <param name="w">The fourth value of a vec4.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,_0rison.Texture)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="texture">The texture to set it to.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,_0rison.Texture)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="texture">The texture to set it to.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,System.String)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="textureSource">The path to an image to load as a texture.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,System.String)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="textureSource">The path to an image to load as a texture.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.String,_0rison.Matrix)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="matrix">The matrix to use. SFML internally uses 3x3 matrices, but you need to use a mat4 in the shader.</param>
        </member>
        <member name="M:_0rison.Shader.SetParameter(System.Enum,_0rison.Matrix)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="matrix">The matrix to use. SFML internally uses 3x3 matrices, but you need to use a mat4 in the shader.</param>
        </member>
        <member name="M:_0rison.Shader.Dispose">
            <summary>
            Disposes the shader to probably clear up memory.
            </summary>
        </member>
        <member name="M:_0rison.Shader.Finalize">
            <summary>
            For when the garbage collector destroys shaders, also
            free up the memory on the video card that the shader is using.
            </summary>
        </member>
        <member name="T:_0rison.Spritemap`1">
            <summary>
            Graphic that is used for an animated sprite sheet.
            </summary>
            <typeparam name="TAnimType"></typeparam>
        </member>
        <member name="F:_0rison.Spritemap`1.Speed">
            <summary>
            The playback speed of all animations.  
            </summary>
        </member>
        <member name="P:_0rison.Spritemap`1.Frames">
            <summary>
            The total number of frames on the sprite sheet.
            </summary>
        </member>
        <member name="P:_0rison.Spritemap`1.Columns">
            <summary>
            The total number of columns on the sprite sheet.
            </summary>
        </member>
        <member name="P:_0rison.Spritemap`1.Rows">
            <summary>
            The total number of rows on the spirte sheet.
            </summary>
        </member>
        <member name="P:_0rison.Spritemap`1.BufferedAnimation">
            <summary>
            The current buffered animation.
            </summary>
        </member>
        <member name="P:_0rison.Spritemap`1.Active">
            <summary>
            Determines if the sprite is playing animations.
            </summary>
        </member>
        <member name="P:_0rison.Spritemap`1.Paused">
            <summary>
            Determines if the sprite is advancing its current animation.
            </summary>
        </member>
        <member name="P:_0rison.Spritemap`1.Anims">
            <summary>
            The dictionary of stored animations.
            </summary>
        </member>
        <member name="P:_0rison.Spritemap`1.CurrentAnim">
            <summary>
            The animation currently playing.
            </summary>
        </member>
        <member name="P:_0rison.Spritemap`1.CurrentFrame">
            <summary>
            The current frame of the animation on the sprite sheet.
            </summary>
        </member>
        <member name="P:_0rison.Spritemap`1.CurrentFrameIndex">
            <summary>
            The current frame index of the animation, from 0 to frame count - 1.
            </summary>
        </member>
        <member name="M:_0rison.Spritemap`1.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create a new Spritemap from a file path.
            </summary>
            <param name="source">The file path to a texture to use for the sprite sheet.</param>
            <param name="width">The width of the animation.</param>
            <param name="height">The height of the animation.</param>
        </member>
        <member name="M:_0rison.Spritemap`1.#ctor(_0rison.Texture,System.Int32,System.Int32)">
            <summary>
            Create a new Spritemap from a Texture.
            </summary>
            <param name="texture">The Texture to use for the sprite sheet.</param>
            <param name="width">The width of a cell on the sprite sheet.</param>
            <param name="height">The height of a cell on the sprite sheet.</param>
        </member>
        <member name="M:_0rison.Spritemap`1.#ctor(_0rison.AtlasTexture,System.Int32,System.Int32)">
            <summary>
            Create a new Spritemap from an AtlasTexture.
            </summary>
            <param name="texture">The AtlasTexture to use for the sprite sheet.</param>
            <param name="width">The width of a cell on the sprite sheet.</param>
            <param name="height">The height of a cell on the sprite sheet.</param>
        </member>
        <member name="M:_0rison.Spritemap`1.Add(`0,_0rison.Anim)">
            <summary>
            Add an animation to the list of Anims.
            </summary>
            <param name="a">The key to reference this animation.</param>
            <param name="anim">The anim value.</param>
        </member>
        <member name="M:_0rison.Spritemap`1.Add(`0,System.String,System.Single)">
            <summary>
            Adds an animation using a string for frames and a single value for frame delay.
            </summary>
            <param name="a">The key to store the animation with.</param>
            <param name="frames">The frames of the animation from the sprite sheet.  Example: "0,3,7-11,2,5"</param>
            <param name="framedelays">The delay between advancing to the next frame.</param>
            <returns>The added animation.</returns>
        </member>
        <member name="M:_0rison.Spritemap`1.Add(`0,System.String,System.String)">
            <summary>
            Add an animation using a string for frames and a string for framedelays.
            </summary>
            <param name="a">The key to store the animation with.</param>
            <param name="frames">The frames of the animation from the sprite sheet.  Example: "0,3,7-11,2,5"</param>
            <param name="framedelays">The duration of time to show each frame.  Example: "10,10,5,5,50"</param>
            <returns>The added animation.</returns>
        </member>
        <member name="M:_0rison.Spritemap`1.Add(`0,System.Int32[],System.Single[])">
            <summary>
            Add an animation to the sprite.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="frames">An array of the frames to display.</param>
            <param name="frameDelay">An array of durations for each frame.</param>
            <returns>The added animation.</returns>
        </member>
        <member name="M:_0rison.Spritemap`1.Add(`0,System.Int32[],System.Single)">
            <summary>
            Adds an animation using an array for frames and a single value for frame delay.
            </summary>
            <param name="a">The key to store the animation with.</param>
            <param name="frames">The frames of the animation from the sprite sheet.  Example: "0,3,7-11,2,5"</param>
            <param name="framedelays">The delay between advancing to the next frame.</param>
            <returns>The added animation.</returns>
        </member>
        <member name="M:_0rison.Spritemap`1.Update">
            <summary>
            Updates the animation.  The sprite will not animate without this.
            </summary>
        </member>
        <member name="M:_0rison.Spritemap`1.UpdateTextureRegion(System.Int32)">
            <summary>
            Updates the internal source for the texture.
            </summary>
            <param name="frame">The frame in terms of the sprite sheet.</param>
        </member>
        <member name="M:_0rison.Spritemap`1.Play(`0,System.Boolean)">
            <summary>
            Play the desired animation.
            </summary>
            <param name="a">The animation to play.</param>
            <param name="forceReset">Resets the animation back to the start before playing even if this is the same animation that was already playing.</param>
        </member>
        <member name="M:_0rison.Spritemap`1.Buffer(`0)">
            <summary>
            Buffers an animation but does not play it.  Call Play() with no arguments to play the buffered animation.
            </summary>
            <param name="a">The animation to buffer.</param>
        </member>
        <member name="M:_0rison.Spritemap`1.Play(System.Boolean)">
            <summary>
            Plays an animation.  If no animation is specified, play the buffered animation.
            </summary>
        </member>
        <member name="M:_0rison.Spritemap`1.Anim(`0)">
            <summary>
            Get the animation with a specific key.
            </summary>
            <param name="a">The key to search with.</param>
            <returns>The animation found.</returns>
        </member>
        <member name="M:_0rison.Spritemap`1.Pause">
            <summary>
            Pause the playback of the animation.
            </summary>
        </member>
        <member name="M:_0rison.Spritemap`1.Resume">
            <summary>
            Resume the animation from the current position.
            </summary>
        </member>
        <member name="M:_0rison.Spritemap`1.Stop">
            <summary>
            Stop playback.  This will reset the animation to the first frame.
            </summary>
        </member>
        <member name="M:_0rison.Spritemap`1.SetFrame(System.Int32)">
            <summary>
            Set the current animation to a specific frame.
            </summary>
            <param name="frame">The frame in terms of the animation.</param>
        </member>
        <member name="M:_0rison.Spritemap`1.FreezeFrame(System.Int32)">
            <summary>
            Set the current animation to a specific frame and pause.
            </summary>
            <param name="frame">The frame in terms of the animation.</param>
        </member>
        <member name="M:_0rison.Spritemap`1.SetGlobalFrame(System.Int32)">
            <summary>
            Set the sprite to a frame on the sprite sheet itself.
            This will disable the current animation!
            </summary>
            <param name="frame">The global frame in terms of the sprite sheet.</param>
        </member>
        <member name="M:_0rison.Spritemap`1.Reset">
            <summary>
            Resets the current animation back to the first frame.
            </summary>
        </member>
        <member name="M:_0rison.Spritemap`1.Clear">
            <summary>
            Clear the list of animations.
            </summary>
        </member>
        <member name="M:_0rison.Spritemap.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create a new Spritemap from a file path.
            </summary>
            <param name="source">The file path to a texture to use for the sprite sheet.</param>
            <param name="width">The width of the animation.</param>
            <param name="height">The height of the animation.</param>
        </member>
        <member name="M:_0rison.Spritemap.#ctor(_0rison.Texture,System.Int32,System.Int32)">
            <summary>
            Create a new Spritemap from a Texture.
            </summary>
            <param name="texture">The Texture to use for the sprite sheet.</param>
            <param name="width">The width of a cell on the sprite sheet.</param>
            <param name="height">The height of a cell on the sprite sheet.</param>
        </member>
        <member name="M:_0rison.Spritemap.#ctor(_0rison.AtlasTexture,System.Int32,System.Int32)">
            <summary>
            Create a new Spritemap from an AtlasTexture.
            </summary>
            <param name="texture">The AtlasTexture to use for the sprite sheet.</param>
            <param name="width">The width of a cell on the sprite sheet.</param>
            <param name="height">The height of a cell on the sprite sheet.</param>
        </member>
        <member name="T:_0rison.Surface">
            <summary>
            Graphic that represents a render target.  By default the game uses a master surface to
            render the game to the window.  Be aware of graphics card limiations of render textures when
            creating surfaces.
            </summary>
        </member>
        <member name="F:_0rison.Surface.FillColor">
            <summary>
            The color that the surface will fill with at the start of each render.
            </summary>
        </member>
        <member name="F:_0rison.Surface.AutoClear">
            <summary>
            Determines if the Surface will automatically clear at the start of the next render cycle.
            </summary>
        </member>
        <member name="F:_0rison.Surface.UseSceneCamera">
            <summary>
            Determines if the Surface will automatically set its camera to the Scene's camera.
            </summary>
        </member>
        <member name="P:_0rison.Surface.Game">
            <summary>
            The reference to the Game using this Surface (if it is the main Surface the game is rendering to!)
            </summary>
        </member>
        <member name="P:_0rison.Surface.CameraX">
            <summary>
            The camera X for the view of the surface.
            Note: For the game's main surface, this is controlled by the active Scene.
            </summary>
        </member>
        <member name="P:_0rison.Surface.CameraY">
            <summary>
            The camera Y for the view of the surface.
            Note: For the game's main surface, this is controlled by the active Scene.
            </summary>
        </member>
        <member name="P:_0rison.Surface.CameraAngle">
            <summary>
            The camera angle for the view of the surface.
            Note: For the game's main surface, this is controlled by the active Scene.
            </summary>
        </member>
        <member name="P:_0rison.Surface.CameraZoom">
            <summary>
            The camera zoom for the view of the surface.
            Note: For the game's main surface, this is controlled by the active Scene.
            </summary>
        </member>
        <member name="P:_0rison.Surface.Texture">
            <summary>
            The Texture the Surface has rendered to.
            </summary>
        </member>
        <member name="M:_0rison.Surface.SurfaceX(System.Single)">
            <summary>
            Convert an X position into the same position but on the Surface.
            TODO: Make this work with scale and rotation.
            </summary>
            <param name="x">The X position in the Scene.</param>
            <returns>The X position on the Surface.</returns>
        </member>
        <member name="M:_0rison.Surface.SurfaceY(System.Single)">
            <summary>
            Convert a Y position into the same position but on the Surface.
            TODO: Make this work with scale and rotation.
            </summary>
            <param name="y">The Y position in the Scene.</param>
            <returns>The Y position on the Surface.</returns>
        </member>
        <member name="M:_0rison.Surface.#ctor(System.Int32,System.Int32,_0rison.Color)">
            <summary>
            Creates a Surface with a specified size.
            </summary>
            <param name="width">The width of the Surface to create.</param>
            <param name="height">The height of the Surface to create.</param>
            <param name="color">The default fill color of the Surface.</param>
        </member>
        <member name="M:_0rison.Surface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a Surface of a specified size.
            </summary>
            <param name="width">The width of the Surface to create.</param>
            <param name="height">The height of the Surface to create.</param>
        </member>
        <member name="M:_0rison.Surface.#ctor(System.Int32)">
            <summary>
            Creates a Surface of a specified size.
            </summary>
            <param name="size">The width and height of the Surface to create.</param>
        </member>
        <member name="M:_0rison.Surface.#ctor(System.Int32,_0rison.Color)">
            <summary>
            Creates a Surface of a specified size.
            </summary>
            <param name="size">The width and height of the Surface to create.</param>
            <param name="color">The default fill color of the Surface.</param>
        </member>
        <member name="M:_0rison.Surface.AddShader(_0rison.Shader)">
            <summary>
            Add a shader to be drawn on the surface.  If "Shader" is set, the shader list is ignored.
            </summary>
            <param name="shader">The Shader to add.</param>
        </member>
        <member name="M:_0rison.Surface.RemoveShader(_0rison.Shader)">
            <summary>
            Remove a shader from the surface.
            </summary>
            <param name="shader">The Shader to remove.</param>
        </member>
        <member name="M:_0rison.Surface.PopShader">
            <summary>
            Remove the top most shader on the list of shaders.
            </summary>
            <returns>The removed Shader.</returns>
        </member>
        <member name="M:_0rison.Surface.Display">
            <summary>
            Calls the SFML Display function on the internal render texture.  Should be used before
            any sort of rendering, otherwise the texture will be upside down!
            </summary>
        </member>
        <member name="M:_0rison.Surface.ClearShaders">
            <summary>
            Remove all shaders from the surface.
            </summary>
        </member>
        <member name="M:_0rison.Surface.SetShader(_0rison.Shader)">
            <summary>
            Replace all shaders with a single shader.  This will be ignored if "Shader" is set.
            </summary>
            <param name="shader">The Shader to use.</param>
        </member>
        <member name="M:_0rison.Surface.Draw(_0rison.Graphic,System.Single,System.Single)">
            <summary>
            Draws a graphic to this surface.
            </summary>
            <param name="graphic">The Graphic to draw.</param>
            <param name="x">The X position of the Graphic.</param>
            <param name="y">The Y position of the Graphic.</param>
        </member>
        <member name="M:_0rison.Surface.Fill(_0rison.Color)">
            <summary>
            Fills the surface with the specified color.
            </summary>
            <param name="color">The Color to fill the Surface with.</param>
        </member>
        <member name="M:_0rison.Surface.Clear">
            <summary>
            Clears the surface with the fill color.
            </summary>
        </member>
        <member name="M:_0rison.Surface.Clear(_0rison.Color)">
            <summary>
            Clears the surface with a specified color.
            </summary>
            <param name="color">The Color to clear the Surface with.</param>
        </member>
        <member name="P:_0rison.Surface.Smooth">
            <summary>
            Determines the pixel smoothing for the surface.
            </summary>
        </member>
        <member name="M:_0rison.Surface.Render(System.Single,System.Single)">
            <summary>
            Draw the Surface.
            </summary>
            <param name="x">The X position offset.</param>
            <param name="y">The Y position offset.</param>
        </member>
        <member name="M:_0rison.Surface.DrawToWindow(_0rison.Game)">
            <summary>
            Draw the surface directly to the game window.  This will refresh the view,
            and Display the surface, as well as clear it if AutoClear is true.
            </summary>
            <param name="game">The Game to render to.</param>
        </member>
        <member name="M:_0rison.Surface.DrawToWindow">
            <summary>
            Draw the Surface to the Game window.
            </summary>
        </member>
        <member name="M:_0rison.Surface.SetView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set view of the Surface.
            </summary>
            <param name="x">The X position of the view.</param>
            <param name="y">The Y position of the view.</param>
            <param name="angle">The angle of the view.</param>
            <param name="zoom">The zoom of the view.</param>
        </member>
        <member name="M:_0rison.Surface.GetTexture">
            <summary>
            Returns a texture by getting the current render texture. I don't know if this works right yet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_0rison.Surface.SaveToFile(System.String)">
            <summary>
            Saves the next completed render to a file. The supported image formats are bmp, png, tga and jpg.
            Note that this waits until the end of the game's Render() to actually export, otherwise it will be blank!
            </summary>
            <param name="path">
            The file path to save to. The type of image is deduced from the extension. If left unspecified the
            path will be a png file of the current time in the same folder as the executable.
            </param>
        </member>
        <member name="M:_0rison.Surface.CameraScene(_0rison.Scene)">
            <summary>
            Matches the view of the surface to the same view of a Scene.
            </summary>
            <param name="scene">The Scene to match the camera with.</param>
        </member>
        <member name="M:_0rison.Surface.CenterCamera(System.Single,System.Single)">
            <summary>
            Centers the camera of the surface.
            </summary>
            <param name="x">The X position to be the center of the scene.</param>
            <param name="y">The Y position to be the center of the scene.</param>
        </member>
        <member name="M:_0rison.Surface.RenderShaders">
            <summary>
            This goes through all the shaders and applies them between two buffers, and
            eventually spits out the final drawable object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:_0rison.Text">
            <summary>
            Graphic used to display simple text.  Much faster than RichText, but more limited options.
            </summary>
        </member>
        <member name="F:_0rison.Text.ShadowColor">
            <summary>
            The color of the text shadow.
            </summary>
        </member>
        <member name="F:_0rison.Text.ShadowX">
            <summary>
            The X position of the shadow.
            </summary>
        </member>
        <member name="F:_0rison.Text.ShadowY">
            <summary>
            The Y position of the shadow.
            </summary>
        </member>
        <member name="F:_0rison.Text.OutlineColor">
            <summary>
            The Color of the outline.
            </summary>
        </member>
        <member name="F:_0rison.Text.OutlineThickness">
            <summary>
            The thickness of the outline.
            </summary>
        </member>
        <member name="F:_0rison.Text.OutlineQuality">
            <summary>
            The quality of the outline.  Higher quality is more rendering passes!
            </summary>
        </member>
        <member name="P:_0rison.Text.String">
            <summary>
            The displayed string.
            </summary>
        </member>
        <member name="P:_0rison.Text.Lines">
            <summary>
            The number of lines in the text.
            </summary>
        </member>
        <member name="P:_0rison.Text.LineSpacing">
            <summary>
            The amount of space between each line of text.
            </summary>
        </member>
        <member name="P:_0rison.Text.FontSize">
            <summary>
            The font size.
            </summary>
        </member>
        <member name="P:_0rison.Text.TextStyle">
            <summary>
            Set the TextStyle (bold, italic, underline.)
            </summary>
        </member>
        <member name="P:_0rison.Text.Shadow">
            <summary>
            Set both ShadowX and ShadowY.
            </summary>
        </member>
        <member name="P:_0rison.Text.CenterY">
            <summary>
            Get the actual center Y of the Text.
            </summary>
        </member>
        <member name="P:_0rison.Text.BoundsTop">
            <summary>
            The top bounds of the Text.
            </summary>
        </member>
        <member name="P:_0rison.Text.BoundsLeft">
            <summary>
            The left bounds of the Text.
            </summary>
        </member>
        <member name="M:_0rison.Text.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new Text object.
            </summary>
            <param name="str">The string to display.</param>
            <param name="font">The file path to the font to use.</param>
            <param name="size">The size of the font.</param>
        </member>
        <member name="M:_0rison.Text.#ctor(System.String,System.IO.Stream,System.Int32)">
            <summary>
            Create a new Text object.
            </summary>
            <param name="str">The string to display.</param>
            <param name="font">The stream to load the font to use.</param>
            <param name="size">The size of the font.</param>
        </member>
        <member name="M:_0rison.Text.#ctor(System.String,_0rison.Font,System.Int32)">
            <summary>
            Create a new Text object.
            </summary>
            <param name="str">The string to display.</param>
            <param name="font">The Font to use.</param>
            <param name="size">The size of the font.</param>
        </member>
        <member name="M:_0rison.Text.#ctor(System.String,System.Int32)">
            <summary>
            Create a new Text object.
            </summary>
            <param name="str">The string to display.</param>
            <param name="size">The size of the font.</param>
        </member>
        <member name="M:_0rison.Text.#ctor(System.Int32)">
            <summary>
            Create a new Text object.
            </summary>
            <param name="size">The size of the font.</param>
        </member>
        <member name="M:_0rison.Text.CenterTextOrigin">
            <summary>
            Center the Text's origin. This factors in the Text's local bounds.
            </summary>
        </member>
        <member name="M:_0rison.Text.CenterTextOriginX">
            <summary>
            Center the Text's X origin.  This factors in the Text's left bounds.
            </summary>
        </member>
        <member name="M:_0rison.Text.CenterTextOriginY">
            <summary>
            Center the Text's Y origin.  This factors in the Text's top bounds.
            </summary>
        </member>
        <member name="M:_0rison.Text.Render(System.Single,System.Single)">
            <summary>
            Draw the Text.
            </summary>
            <param name="x">The X position offset.</param>
            <param name="y">The Y position offset.</param>
        </member>
        <member name="T:_0rison.Texture">
            <summary>
            Class representing a texture. Can perform pixel operations on the CPU, but those will be
            pretty slow and shouldn't be used that much.
            </summary>
        </member>
        <member name="F:_0rison.Texture.DefaultSmooth">
            <summary>
            The default setting to use for smoothing textures.
            Much easier to set this at the start of a program rather than
            adjust the settings for every single texture you use.
            </summary>
        </member>
        <member name="M:_0rison.Texture.#ctor(System.String,System.Boolean)">
            <summary>
            Load a texture from a file path.
            </summary>
            <param name="source">The file path to load from.</param>
            <param name="useCache">Determines if the cache should be checked first.</param>
        </member>
        <member name="M:_0rison.Texture.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a texture from a stream of bytes.
            </summary>
            <param name="stream">The stream to load from.</param>
            <param name="useCache">Determines if the cache should be checked first.</param>
        </member>
        <member name="M:_0rison.Texture.#ctor(_0rison.Texture)">
            <summary>
            Creates a new texture from a copy of another texture.  No cache option for this.
            </summary>
            <param name="copy">The texture to copy from.</param>
        </member>
        <member name="M:_0rison.Texture.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Create a texture from a byte array.
            </summary>
            <param name="bytes">The byte array to load from.</param>
            <param name="useCache">Determines if the cache should be checked first.</param>
        </member>
        <member name="M:_0rison.Texture.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an empty texture of width and height.  This does not use the cache.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
        </member>
        <member name="M:_0rison.Texture.#ctor(SFML.Graphics.Texture)">
            <summary>
            Load a texture from an SFML texture.
            </summary>
            <param name="texture"></param>
        </member>
        <member name="P:_0rison.Texture.Height">
            <summary>
            The height of the texture.
            </summary>
        </member>
        <member name="P:_0rison.Texture.Pixels">
            <summary>
            The array of pixels in the texture in bytes.
            </summary>
        </member>
        <member name="P:_0rison.Texture.Region">
            <summary>
            The rectangle created by the Texture's width and height.
            </summary>
        </member>
        <member name="P:_0rison.Texture.Smooth">
            <summary>
            Determines if the source texture is smoothed when transformed.
            </summary>
        </member>
        <member name="P:_0rison.Texture.Source">
            <summary>
            The file path source if the texture was loaded from a file.
            </summary>
        </member>
        <member name="P:_0rison.Texture.Width">
            <summary>
            The width of the Texture.
            </summary>
        </member>
        <member name="M:_0rison.Texture.CopyPixels(_0rison.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels from one texture to another using blitting.
            </summary>
            <param name="from"></param>
            <param name="fromX"></param>
            <param name="fromY"></param>
            <param name="toX"></param>
            <param name="toY"></param>
        </member>
        <member name="M:_0rison.Texture.CreateImage(System.Boolean)">
            <summary>
            Loads the image internally in the texture for image manipulation.  This is
            handled automatically, but it's exposed so that it can be manually controlled.
            </summary>
            <param name="forceNewImage">If set to true a new image will always be created instead of only when there is no image.</param>
        </member>
        <member name="M:_0rison.Texture.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get the Color from a specific pixel on the texture.
            Warning: This is slow!
            </summary>
            <param name="x">The x coordinate of the pixel to get.</param>
            <param name="y">The y coordinate of the pixel to get.</param>
            <returns>The Color of the pixel.</returns>
        </member>
        <member name="M:_0rison.Texture.SaveToFile(System.String)">
            <summary>
            Save the texture to a file. The supported image formats are bmp, png, tga and jpg.
            </summary>
            <param name="path">The file path to save to. The type of image is deduced from the extension.</param>
        </member>
        <member name="M:_0rison.Texture.SetPixel(System.Int32,System.Int32,_0rison.Color)">
            <summary>
            Sets the color of a specific pixel on the texture.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <param name="color">The Color to set the pixel to.</param>
        </member>
        <member name="M:_0rison.Texture.SetRect(System.Int32,System.Int32,System.Int32,System.Int32,_0rison.Color)">
            <summary>
            Sets the color of a rectangle of pixels on the texture.
            </summary>
            <param name="x">The x coordinate of the rectangle.</param>
            <param name="y">The y coordinate of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:_0rison.Texture.Update">
            <summary>
            Updates the texture to reflect changes made from SetPixel.
            </summary>
        </member>
        <member name="M:_0rison.Texture.SetBytes(System.Byte[])">
            <summary>
            Updates the texture with a byte array.
            Note: Updates immediately. Probably not the fastest.
            </summary>
            <param name="bytes">The byte array containing our pixels.</param>
        </member>
        <member name="M:_0rison.Texture.SetBytes(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the texture with a byte array, at the given position and size.
            Note: Updates immediately. Probably not the fastest.
            </summary>
            <param name="bytes">The byte array containing our pixels.</param>
            <param name="width">The width of the section we are updating.</param>
            <param name="height">The height of the section we are updating.</param>
            <param name="x">The X coordinate of the section we are updating.</param>
            <param name="y">The Y coordinate of the section we are updating.</param>
        </member>
        <member name="M:_0rison.Texture.Dispose">
            <summary>
            Dispose the SFML texture to clear up memory probably.
            Warning: might not want to do this since other Textures might be using the same cached texture!
            </summary>
        </member>
        <member name="T:_0rison.Tilemap">
            <summary>
            Graphic used for loading and rendering a tilemap.  Renders tiles using a vertex array.
            </summary>
        </member>
        <member name="P:_0rison.Tilemap.TileWidth">
            <summary>
            The width in pixels of each tile.
            </summary>
        </member>
        <member name="P:_0rison.Tilemap.TileHeight">
            <summary>
            The height in pixels of each tile.
            </summary>
        </member>
        <member name="P:_0rison.Tilemap.TileRows">
            <summary>
            The number of rows in the entire tilemap.
            </summary>
        </member>
        <member name="P:_0rison.Tilemap.TileColumns">
            <summary>
            The number of columsn in the entire tilemap.
            </summary>
        </member>
        <member name="P:_0rison.Tilemap.TileLayers">
            <summary>
            The tile layers to render.
            </summary>
        </member>
        <member name="F:_0rison.Tilemap.UsePositions">
            <summary>
            Determines if the X and Y positions of tiles are interpreted as pixels or tile coords.
            </summary>
        </member>
        <member name="F:_0rison.Tilemap.DefaultLayerName">
            <summary>
            The default layer name to use.
            </summary>
        </member>
        <member name="M:_0rison.Tilemap.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new Tilemap using the path of a texture.
            </summary>
            <param name="source">The file path to the texture to use.</param>
            <param name="width">The width of the Tilemap in pixels.</param>
            <param name="height">The height of the Tilemap in pixels.</param>
            <param name="tileWidth">The width of each tile in pixels.</param>
            <param name="tileHeight">The height of each tile in pixels.</param>
        </member>
        <member name="M:_0rison.Tilemap.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create a new Tilemap using the path of a texture.
            </summary>
            <param name="source">The file path to the texture to use.</param>
            <param name="size">The width and height of the Tilemap in pixels.</param>
            <param name="tileSize">The width and height of each tile in pixels.</param>
        </member>
        <member name="M:_0rison.Tilemap.#ctor(_0rison.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new Tilemap using a Texture.
            </summary>
            <param name="texture">The Texture to use.</param>
            <param name="width">The width of the Tilemap in pixels.</param>
            <param name="height">The height of the Tilemap in pixels.</param>
            <param name="tileWidth">The width of each tile in pixels.</param>
            <param name="tileHeight">The height of each tile in pixels.</param>
        </member>
        <member name="M:_0rison.Tilemap.#ctor(_0rison.Texture,System.Int32,System.Int32)">
            <summary>
            Create a new Tilemap using a Texture.
            </summary>
            <param name="texture">The Texture to use.</param>
            <param name="size">The width and height of the Tilemap in pixels.</param>
            <param name="tileSize">The width and height of each tile in pixels.</param>
        </member>
        <member name="M:_0rison.Tilemap.#ctor(_0rison.AtlasTexture,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new Tilemap using an AtlasTexture.
            </summary>
            <param name="texture">The AtlasTexture to use.</param>
            <param name="width">The width of the Tilemap in pixels.</param>
            <param name="height">The height of the Tilemap in pixels.</param>
            <param name="tileWidth">The width of each tile in pixels.</param>
            <param name="tileHeight">The height of each tile in pixels.</param>
        </member>
        <member name="M:_0rison.Tilemap.#ctor(_0rison.AtlasTexture,System.Int32,System.Int32)">
            <summary>
            Create a new Tilemap using an AtlasTexture.
            </summary>
            <param name="texture">The AtlasTexture to use.</param>
            <param name="size">The width and height of the Tilemap in pixels.</param>
            <param name="tileSize">The width and height of each tile in pixels.</param>
        </member>
        <member name="M:_0rison.Tilemap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new Tilemap without any texture.  Tiles will be solid colors instead.
            </summary>
            <param name="width">The width of the Tilemap in pixels.</param>
            <param name="height">The height of the Tilemap in pixels.</param>
            <param name="tileWidth">The width of each tile in pixels.</param>
            <param name="tileHeight">The height of each tile in pixels.</param>
        </member>
        <member name="M:_0rison.Tilemap.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new Tilemap without any texture.  Tiles will be solid colors instead.
            </summary>
            <param name="size">The width and height of the Tilemap in pixels.</param>
            <param name="tileSize">The width and height of each tile in pixels.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetTile(System.Int32,System.Int32,_0rison.Color,System.String)">
            <summary>
            Set a tile to a specific color.
            </summary>
            <param name="tileX">The tile's x position on the map.</param>
            <param name="tileY">The tile's y position on the map.</param>
            <param name="color">The tile's color.</param>
            <param name="layer">The tile's layer.</param>
            <returns>The TileInfo of the altered tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.SetTile(System.Int32,System.Int32,_0rison.Color,System.Enum)">
            <summary>
            Set a tile to a specific color.
            </summary>
            <param name="tileX">The tile's x position on the map.</param>
            <param name="tileY">The tile's y position on the map.</param>
            <param name="color">The tile's color.</param>
            <param name="layer">The tile's layer.</param>
            <returns>The TileInfo of the altered tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.SetTile(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Set a tile to a specific tile from the source texture.
            </summary>
            <param name="tileX">The tile's X position on the map.</param>
            <param name="tileY">The tile's Y position on the map.</param>
            <param name="sourceX">The source X position from the tile map in pixels.</param>
            <param name="sourceY">The source Y position from the tile map in pixels.</param>
            <param name="layer">The tile's layer.</param>
            <returns>The TileInfo for the altered tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.SetTile(System.Int32,System.Int32,System.Int32,System.Int32,System.Enum)">
            <summary>
            Set a tile to a specific tile from the source texture.
            </summary>
            <param name="tileX">The tile's X position on the map.</param>
            <param name="tileY">The tile's Y position on the map.</param>
            <param name="sourceX">The source X position from the tile map in pixels.</param>
            <param name="sourceY">The source Y position from the tile map in pixels.</param>
            <param name="layer">The tile's layer.</param>
            <returns>The TileInfo for the altered tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.SetTile(System.Xml.XmlElement)">
            <summary>
            Load tile data from an XmlElement.
            </summary>
            <param name="e">An XmlElement containing attributes x, y, tx, and ty.</param>
            <returns>The TileInfo for the loaded tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.SetTile(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Set a tile on the Tilemap to a specific tile.
            </summary>
            <param name="tileX">The X position of the tile to change.</param>
            <param name="tileY">The Y position of the tile to change.</param>
            <param name="tileIndex">The index of the tile to change to.</param>
            <param name="layer"></param>
            <returns>The TileInfo from the altered tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.SetTile(System.Int32,System.Int32,System.Int32,System.Enum)">
            <summary>
            Set a tile on the Tilemap to a specific tile.
            </summary>
            <param name="tileX">The X position of the tile to change.</param>
            <param name="tileY">The Y position of the tile to change.</param>
            <param name="tileIndex">The index of the tile to change to.</param>
            <returns>The TileInfo from the altered tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.SetTile(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Set a tile on the Tilemap to be flipped horizontally and/or vertically.
            </summary>
            <param name="tileX">The X position of the tile to change.</param>
            <param name="tileY">The Y position of the tile to change.</param>
            <param name="flipX">Whether the tile should be horizontally flipped.</param>
            <param name="flipY">Whether the tile should be vertically flipped.</param>
            <returns>The TileInfo from the altered tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.SetRect(System.Int32,System.Int32,System.Int32,System.Int32,_0rison.Color,System.String)">
            <summary>
            Set a rectangle area of tiles to a defined color.
            </summary>
            <param name="tileX">The X position of the tile to change.</param>
            <param name="tileY">The Y position of the tile to change.</param>
            <param name="tileWidth">The width of tiles to change.</param>
            <param name="tileHeight">The height of tiles to change.</param>
            <param name="color">The color to change the colors to.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetRect(System.Int32,System.Int32,System.Int32,System.Int32,_0rison.Color,System.Enum)">
            <summary>
            Set a rectangle area of tiles to a defined color.
            </summary>
            <param name="tileX">The X position of the tile to change.</param>
            <param name="tileY">The Y position of the tile to change.</param>
            <param name="tileWidth">The width of tiles to change.</param>
            <param name="tileHeight">The height of tiles to change.</param>
            <param name="color">The color to change the colors to.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Set a rectangle of tiles to a tile defined by texture coordinates.
            </summary>
            <param name="tileX">The X position of the rectangle to change.</param>
            <param name="tileY">The Y position of the rectangle to change.</param>
            <param name="tileWidth">The width of tiles to change.</param>
            <param name="tileHeight">The height of tiles to change.</param>
            <param name="sourceX">The X position in the source Texture to use to draw the tiles.</param>
            <param name="sourceY">The Y position in the source Texture to use to draw the tiles.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Enum)">
            <summary>
            Set a rectangle of tiles to a tile defined by texture coordinates.
            </summary>
            <param name="tileX">The X position of the rectangle to change.</param>
            <param name="tileY">The Y position of the rectangle to change.</param>
            <param name="tileWidth">The width of tiles to change.</param>
            <param name="tileHeight">The height of tiles to change.</param>
            <param name="sourceX">The X position in the source Texture to use to draw the tiles.</param>
            <param name="sourceY">The Y position in the source Texture to use to draw the tiles.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Set a rectangle of tiles to a tile defined by an index.
            </summary>
            <param name="tileX">The X position of the rectangle to change.</param>
            <param name="tileY">The Y position of the rectangle to change.</param>
            <param name="tileWidth">The width of tiles to change.</param>
            <param name="tileHeight">The height of tiles to change.</param>
            <param name="tileIndex">The index of the tile to change the tiles to.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Enum)">
            <summary>
            Set a rectangle of tiles to a tile defined by an index.
            </summary>
            <param name="tileX">The X position of the rectangle to change.</param>
            <param name="tileY">The Y position of the rectangle to change.</param>
            <param name="tileWidth">The width of tiles to change.</param>
            <param name="tileHeight">The height of tiles to change.</param>
            <param name="tileIndex">The index of the tile to change the tiles to.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetLayer(System.Int32,System.String)">
            <summary>
            Set all tiles of a specific layer.
            </summary>
            <param name="tileIndex">The index of the tile to change the tiles to.</param>
            <param name="layer">The layer to change.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetLayer(System.Int32,System.Int32,System.String)">
            <summary>
            Set all tiles of a specific layer.
            </summary>
            <param name="sourceX">The X position in the source Texture to use to draw the tiles.</param>
            <param name="sourceY">The Y position in the source Texture to use to draw the tiles.</param>
            <param name="layer">The layer to change.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetLayer(_0rison.Color,System.String)">
            <summary>
            Set all tiles of a specific layer.
            </summary>
            <param name="color">The color to change the tile to.</param>
            <param name="layer">The layer to change.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetLayer(System.Int32,System.Enum)">
            <summary>
            Set all tiles of a specific layer.
            </summary>
            <param name="tileIndex">The index of the tile to change the tiles to.</param>
            <param name="layer">The layer to change.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetLayer(System.Int32,System.Int32,System.Enum)">
            <summary>
            Set all tiles of a specific layer.
            </summary>
            <param name="sourceX">The X position in the source Texture to use to draw the tiles.</param>
            <param name="sourceY">The Y position in the source Texture to use to draw the tiles.</param>
            <param name="layer">The layer to change.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetLayer(_0rison.Color,System.Enum)">
            <summary>
            Set all tiles of a specific layer.
            </summary>
            <param name="color">The color to change the tile to.</param>
            <param name="layer">The layer to change.</param>
        </member>
        <member name="M:_0rison.Tilemap.GetTile(System.Int32,System.Int32,System.String)">
            <summary>
            Get the TileInfo of a specific tile on the tilemap.
            </summary>
            <param name="tileX">The X position of the tile to retrieve.</param>
            <param name="tileY">The Y position of the tile to retrieve.</param>
            <param name="layer">The layer to search through for the tile.</param>
            <returns>The TileInfo for the found tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.GetTile(System.Int32,System.Int32,System.Enum)">
            <summary>
            Get the TileInfo of a specific tile on the tilemap.
            </summary>
            <param name="tileX">The X position of the tile to retrieve.</param>
            <param name="tileY">The Y position of the tile to retrieve.</param>
            <param name="layer">The layer to search through for the tile.</param>
            <returns>The TileInfo for the found tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.LoadGrid(_0rison.GridCollider,_0rison.Color,System.String)">
            <summary>
            Load tiles in from a GridCollider.
            </summary>
            <param name="grid">The GridCollider to reference.</param>
            <param name="color">The color to set tiles that are collidable on the grid.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.SetAutoTileData(System.String)">
            <summary>
            Assign the tile data to use for LoadGridAutoTile.
            </summary>
            <param name="tileData">The tile data file.</param>
        </member>
        <member name="M:_0rison.Tilemap.LoadGridAutoTile(_0rison.GridCollider,System.String)">
            <summary>
            Load tiles in from a GridCollider and choose tiles based on the shape of the grid.
            </summary>
            <param name="grid">The GridCollider to reference.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.LoadGrid(_0rison.GridCollider,_0rison.Color,System.Enum)">
            <summary>
            Load tiles in from a GridCollider.
            </summary>
            <param name="grid">The GridCollider to reference.</param>
            <param name="color">The color to set tiles that are collidable on the grid.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.LayerName(System.Int32)">
            <summary>
            Get the layer name for a specific layer on the tilemap.
            </summary>
            <param name="layer">The layer depth id.</param>
            <returns>The string name of the layer.</returns>
        </member>
        <member name="M:_0rison.Tilemap.LayerDepth(System.String)">
            <summary>
            Get the layer depth of a layer on the tilemap by name.
            </summary>
            <param name="layer">The string layer name.</param>
            <returns>The layer depth id.</returns>
        </member>
        <member name="M:_0rison.Tilemap.LayerDepth(System.Enum)">
            <summary>
            Get the layer depth of a layer on the tilemap by enum value.
            </summary>
            <param name="layer">The enum value layer.</param>
            <returns>The layer depth id.</returns>
        </member>
        <member name="M:_0rison.Tilemap.LoadString(System.String,_0rison.Color,System.Char,System.Char,System.String)">
            <summary>
            Load the tilemap with a color based on a string.
            </summary>
            <param name="source">The string data to load.</param>
            <param name="color">The color to fill occupied tiles with.</param>
            <param name="empty">The character that represents an empty tile.</param>
            <param name="filled">The character that represents a filled tile.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.LoadString(System.String,_0rison.Color,System.Char,System.Char,System.Enum)">
            <summary>
            Load the tilemap with a color based on a string.
            </summary>
            <param name="source">The string data to load.</param>
            <param name="color">The color to fill occupied tiles with.</param>
            <param name="empty">The character that represents an empty tile.</param>
            <param name="filled">The character that represents a filled tile.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.LoadCSV(System.String,System.Char,System.Char,System.String)">
            <summary>
            Load the tilemap from a CSV formatted string.
            </summary>
            <param name="str">The string data to load.</param>
            <param name="columnSep">The character that separates columns in the CSV.</param>
            <param name="rowSep">The character that separates rows in the CSV.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.LoadCSV(System.String,System.Char,System.Char,System.Enum)">
            <summary>
            Load the tilemap from a CSV formatted string.
            </summary>
            <param name="str">The string data to load.</param>
            <param name="columnSep">The character that separates columns in the CSV.</param>
            <param name="rowSep">The character that separates rows in the CSV.</param>
            <param name="layer">The layer to place the tiles on.</param>
        </member>
        <member name="M:_0rison.Tilemap.ClearTile(System.Int32,System.Int32,System.String)">
            <summary>
            Remove a tile from the tilemap.
            </summary>
            <param name="tileX">The tile's X position on the map.</param>
            <param name="tileY">The tile's Y position on the map.</param>
            <param name="layer">The tile's layer.</param>
            <returns>The TileInfo for the cleared tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.ClearTile(System.Int32,System.Int32,System.Enum)">
            <summary>
            Remove a tile from the tilemap.
            </summary>
            <param name="tileX">The tile's X position on the map.</param>
            <param name="tileY">The tile's Y position on the map.</param>
            <param name="layer">The tile's layer.</param>
            <returns>The TileInfo for the cleared tile.</returns>
        </member>
        <member name="M:_0rison.Tilemap.ClearLayer(System.String)">
            <summary>
            Clear all tiles on a specific layer.
            </summary>
            <param name="layer">The string layer name.</param>
        </member>
        <member name="M:_0rison.Tilemap.ClearLayer(System.Enum)">
            <summary>
            Clear all tiles on a specific layer.
            </summary>
            <param name="layer">The enum value layer.</param>
        </member>
        <member name="M:_0rison.Tilemap.ClearAll">
            <summary>
            Clear all tiles on all layers.
            </summary>
        </member>
        <member name="M:_0rison.Tilemap.ClearRect(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Clear all tiles inside a specified rectangle.
            </summary>
            <param name="tileX">The X position of the rectangle to clear.</param>
            <param name="tileY">The Y position of the rectangle to clear.</param>
            <param name="tileWidth">The width of tiles to clear.</param>
            <param name="tileHeight">The height of tiles to clear.</param>
            <param name="layer">The layer to clear tiles from.</param>
        </member>
        <member name="M:_0rison.Tilemap.AddLayer(System.String,System.Int32)">
            <summary>
            Add a new layer to the Tilemap.
            </summary>
            <param name="name">The string name of the layer.</param>
            <param name="depth">The depth of the tiles.</param>
            <returns>The depth id of the layer.</returns>
        </member>
        <member name="M:_0rison.Tilemap.AddLayer(System.Enum,System.Int32)">
            <summary>
            Add a new layer to the Tilemap.
            </summary>
            <param name="name">The enum value of the layer.</param>
            <param name="depth">The depth of the tiles.</param>
            <returns>The depth id of the layer.</returns>
        </member>
        <member name="M:_0rison.Tilemap.RemoveLayer(System.String)">
            <summary>
            Remove a layer from the Tilemap and delete that layer's tiles.
            </summary>
            <param name="name">The name of the layer to delete.</param>
        </member>
        <member name="M:_0rison.Tilemap.RemoveLayer(System.Enum)">
            <summary>
            Remove a layer from the Tilemap and delete that layer's tiles.
            </summary>
            <param name="name">The name of the layer to delete.</param>
        </member>
        <member name="M:_0rison.Tilemap.LayerExists(System.String)">
            <summary>
            Check if a layer exists.
            </summary>
            <param name="name">The string name of the layer.</param>
            <returns>True if the layer exists.</returns>
        </member>
        <member name="M:_0rison.Tilemap.LayerExists(System.Enum)">
            <summary>
            Check if a layer exists.
            </summary>
            <param name="name">The enum value of the layer.</param>
            <returns>True if the layer exists.</returns>
        </member>
        <member name="M:_0rison.Tilemap.MergeTilemap(_0rison.Tilemap,System.String,System.Int32)">
            <summary>
            Merges another tilemap into this one.
            </summary>
            <param name="other">The tilemap to merge into this one.</param>
            <param name="above">True if the other tilemap's base layer should be above this one's base layer.</param>
        </member>
        <member name="M:_0rison.Tilemap.GetTiles(System.String)">
            <summary>
            Get the list of tiles on a specific layer.
            </summary>
            <param name="layerName">The name of the layer.</param>
            <returns>A list of tiles on that layer.</returns>
        </member>
        <member name="M:_0rison.Tilemap.GetTiles(System.Int32)">
            <summary>
            Get the list of tiles on a specific layer.
            </summary>
            <param name="layerDepth"></param>
            <returns>A list of tiles on that layer.</returns>
        </member>
        <member name="M:_0rison.Tilemap.GetTiles(System.Enum)">
            <summary>
            Get the list of tiles on a specific layer.
            </summary>
            <param name="layerName">The enum value of the layer.</param>
            <returns>A list of tiles on that layer.</returns>
        </member>
        <member name="M:_0rison.Tilemap.GetTileIndex(_0rison.TileInfo)">
            <summary>
            Get the index of a specific tile on the source Texture.
            </summary>
            <param name="tile">The tile to get the index of.</param>
            <returns>The index of the tile.</returns>
        </member>
        <member name="T:_0rison.TileInfo">
            <summary>
            A class containing all the info to describe a specific tile.
            </summary>
        </member>
        <member name="F:_0rison.TileInfo.X">
            <summary>
            The X position of the tile.
            </summary>
        </member>
        <member name="F:_0rison.TileInfo.Y">
            <summary>
            The Y position of the tile.
            </summary>
        </member>
        <member name="F:_0rison.TileInfo.TX">
            <summary>
            The X position of the source texture to render the tile from.
            </summary>
        </member>
        <member name="F:_0rison.TileInfo.TY">
            <summary>
            The Y position of the source texture to render the tile from.
            </summary>
        </member>
        <member name="F:_0rison.TileInfo.Width">
            <summary>
            The width of the tile.
            </summary>
        </member>
        <member name="F:_0rison.TileInfo.Height">
            <summary>
            The height of the tile.
            </summary>
        </member>
        <member name="F:_0rison.TileInfo.FlipX">
            <summary>
            Flipped tile options.
            </summary>
        </member>
        <member name="F:_0rison.TileInfo.FlipD">
            <summary>
            Flips the tile anti-diagonally, equivalent to a 90 degree rotation and a horizontal flip.
            Combined with FlipX and FlipY you can rotate the tile any direction.
            </summary>
        </member>
        <member name="F:_0rison.TileInfo.Color">
            <summary>
            The color of the tile, or the color to tint the texture.
            </summary>
        </member>
        <member name="P:_0rison.TileInfo.Alpha">
            <summary>
            The alpha of the tile.
            </summary>
        </member>
        <member name="M:_0rison.TileInfo.GetIndex(_0rison.Tilemap)">
            <summary>
            Returns the index of the tile on the source Texture of a Tilemap.
            </summary>
            <param name="tilemap">The Tilemap that uses the Texture to be tested against.</param>
            <returns>The index of the tile on the Tilemap's Texture.</returns>
        </member>
        <member name="T:_0rison.Vert">
            <summary>
            Class that represents a Vertex.  Just a wrapper for an SFML Vertex.
            </summary>
        </member>
        <member name="P:_0rison.Vert.Color">
            <summary>
            The Color of the Vert.
            </summary>
        </member>
        <member name="P:_0rison.Vert.X">
            <summary>
            The X position.
            </summary>
        </member>
        <member name="P:_0rison.Vert.Y">
            <summary>
            The Y position.
            </summary>
        </member>
        <member name="P:_0rison.Vert.Position">
            <summary>
            The X, Y position as a Vector2.
            </summary>
        </member>
        <member name="P:_0rison.Vert.TexCoords">
            <summary>
            The X, Y position of the Texture as a Vector2.
            </summary>
        </member>
        <member name="P:_0rison.Vert.U">
            <summary>
            The X position of the Texture.
            </summary>
        </member>
        <member name="P:_0rison.Vert.V">
            <summary>
            The Y position of the Texture.
            </summary>
        </member>
        <member name="M:_0rison.Vert.#ctor(System.Single,System.Single,_0rison.Color,System.Single,System.Single)">
            <summary>
            Create a new Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="color">The Color.</param>
            <param name="u">The X position on the Texture.</param>
            <param name="v">The Y position on the Texture.</param>
        </member>
        <member name="M:_0rison.Vert.#ctor(_0rison.Vert)">
            <summary>
            Create a new Vert.
            </summary>
            <param name="copy">A source Vert to copy.</param>
        </member>
        <member name="M:_0rison.Vert.#ctor">
            <summary>
            Create a new white Vert at 0, 0.
            </summary>
        </member>
        <member name="M:_0rison.Vert.#ctor(System.Single,System.Single)">
            <summary>
            Create a new Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
        </member>
        <member name="M:_0rison.Vert.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a new Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="u">The X position on the Texture.</param>
            <param name="v">The Y position on the Texture.</param>
        </member>
        <member name="M:_0rison.Vert.#ctor(System.Single,System.Single,_0rison.Color)">
            <summary>
            Create a new Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="color">The Color.</param>
        </member>
        <member name="T:_0rison.Input">
            <summary>
            Class used for managing input from the keyboard, mouse, and joysticks. Updated by the active Game.
            </summary>
        </member>
        <member name="F:_0rison.Input.Instance">
            <summary>
            A reference to the current active instance.
            </summary>
        </member>
        <member name="P:_0rison.Input.JoysticksConnected">
            <summary>
            The current number of joysticks connected.
            </summary>
        </member>
        <member name="P:_0rison.Input.JoysticksSupported">
            <summary>
            The maximum possible amount of joysticks that can be connected.
            </summary>
        </member>
        <member name="M:_0rison.Input.CharToKey(System.Char)">
            <summary>
            Convert a char to a Key code.
            </summary>
            <param name="key">The char to convert into a Key.</param>
            <returns>The Key.  Returns Key.Unknown if no match is found.</returns>
        </member>
        <member name="M:_0rison.Input.GetJoystickName(System.Int32)">
            <summary>
            Get the name of the Joystick.
            </summary>
            <param name="id">The connection id of the Joystick.</param>
            <returns>The name of the Joystick.</returns>
        </member>
        <member name="M:_0rison.Input.GetJoystickVendorId(System.Int32)">
            <summary>
            Get the vendor id of the Joystick.
            </summary>
            <param name="id">The connection id of the Joystick.</param>
            <returns>The vendor id of the Joystick.</returns>
        </member>
        <member name="M:_0rison.Input.GetJoystickProductId(System.Int32)">
            <summary>
            Get the product id of the Joystick.
            </summary>
            <param name="id">The connection id of the Joystick.</param>
            <returns>The name of the Joystick.</returns>
        </member>
        <member name="F:_0rison.Input.KeystringSize">
            <summary>
            The maximum size of the string of recent key presses.
            </summary>
        </member>
        <member name="F:_0rison.Input.CenteredMouse">
            <summary>
            Determines if the mouse should be locked to the center of the screen.
            </summary>
        </member>
        <member name="F:_0rison.Input.KeyString">
            <summary>
            The current string of keys that were pressed.
            </summary>
        </member>
        <member name="P:_0rison.Input.Game">
            <summary>
            The reference to the game that owns this class.
            </summary>
        </member>
        <member name="P:_0rison.Input.LastKey">
            <summary>
            The last known key that was pressed.
            </summary>
        </member>
        <member name="P:_0rison.Input.LastMouseButton">
            <summary>
            The last known mouse button that was pressed.
            </summary>
        </member>
        <member name="P:_0rison.Input.LastButton">
            <summary>
            The last known button pressed on each joystick.
            </summary>
        </member>
        <member name="P:_0rison.Input.MouseDeltaX">
            <summary>
            The X movement of the mouse since the last update.  Only updates if the mouse is locked inside the Game window.
            </summary>
        </member>
        <member name="P:_0rison.Input.MouseDeltaY">
            <summary>
            The Y movement of the mouse since the last update.  Only updates if the mouse is locked inside the Game window.
            </summary>
        </member>
        <member name="P:_0rison.Input.MouseX">
            <summary>
            The current X position of the mouse.
            </summary>
        </member>
        <member name="P:_0rison.Input.MouseY">
            <summary>
            The current Y position of the mouse.
            </summary>
        </member>
        <member name="P:_0rison.Input.MouseRawX">
            <summary>
            The raw X position of the mouse.  This can be set.
            </summary>
        </member>
        <member name="P:_0rison.Input.MouseRawY">
            <summary>
            The raw Y position of the mouse.  This can be set.
            </summary>
        </member>
        <member name="P:_0rison.Input.MouseScreenX">
            <summary>
            The X position of the mouse in screen space.
            </summary>
        </member>
        <member name="P:_0rison.Input.MouseScreenY">
            <summary>
            The Y position of the mouse in screen space.
            </summary>
        </member>
        <member name="P:_0rison.Input.MouseWheelDelta">
            <summary>
            The change in the mouse wheel value this update.
            </summary>
        </member>
        <member name="P:_0rison.Input.GameMouseX">
            <summary>
            The X position of the mouse in the game.  Use if the mouse is locked in the game window.
            This can be set if the mouse is locked inside the game window.
            </summary>
        </member>
        <member name="P:_0rison.Input.GameMouseY">
            <summary>
            The Y position of the mouse in the game.  Use if the mouse is locked in the game window.
            This can be set if the mouse is locked inside the game window.
            </summary>
        </member>
        <member name="M:_0rison.Input.KeyPressed(_0rison.Key)">
            <summary>
            Check if a key has been pressed this update.
            </summary>
            <param name="k">The key to check.</param>
            <returns>True if the key has been pressed.</returns>
        </member>
        <member name="M:_0rison.Input.KeyPressed(System.Char)">
            <summary>
            Check if a key has been pressed this update.
            </summary>
            <param name="c">The key to check.</param>
            <returns>True if the key has been pressed.</returns>
        </member>
        <member name="M:_0rison.Input.KeyReleased(_0rison.Key)">
            <summary>
            Check if a key has been released this update.
            </summary>
            <param name="k">The key to check.</param>
            <returns>True if the key has been released.</returns>
        </member>
        <member name="M:_0rison.Input.KeyReleased(System.Char)">
            <summary>
            Check if a key has been released this update.
            </summary>
            <param name="c">The key to check.</param>
            <returns>True if the key has been released.</returns>
        </member>
        <member name="M:_0rison.Input.KeyDown(_0rison.Key)">
            <summary>
            Check if a key is currently down.
            </summary>
            <param name="k">The key to check.</param>
            <returns>True if the key is down.</returns>
        </member>
        <member name="M:_0rison.Input.KeyDown(System.Char)">
            <summary>
            Check if a key is currently down.
            </summary>
            <param name="c">The key to check.</param>
            <returns>True if the key is down.</returns>
        </member>
        <member name="M:_0rison.Input.KeyUp(_0rison.Key)">
            <summary>
            Check if a key is currently up.
            </summary>
            <param name="k">The key to check.</param>
            <returns>True if the key is up.</returns>
        </member>
        <member name="M:_0rison.Input.KeyUp(System.Char)">
            <summary>
            Check if a key is currently up.
            </summary>
            <param name="c">The key to check.</param>
            <returns>True if the key is up.</returns>
        </member>
        <member name="M:_0rison.Input.ButtonPressed(System.Int32,System.Int32)">
            <summary>
            Check if a joystick button is pressed.
            </summary>
            <param name="button">The button to check.</param>
            <param name="joystick">The joystick to check.</param>
            <returns>True if the button is pressed.</returns>
        </member>
        <member name="M:_0rison.Input.ButtonPressed(_0rison.AxisButton,System.Int32)">
            <summary>
            Check if a joystick AxisButton is pressed.
            </summary>
            <param name="button">The AxisButton to check.</param>
            <param name="joystick">The joystick to check.</param>
            <returns>True if the button is pressed.</returns>
        </member>
        <member name="M:_0rison.Input.ButtonReleased(System.Int32,System.Int32)">
            <summary>
            Check if the joystick button is released.
            </summary>
            <param name="button">The button to check.</param>
            <param name="joystick">The joystick to check.</param>
            <returns>True if the button is released.</returns>
        </member>
        <member name="M:_0rison.Input.ButtonReleased(_0rison.AxisButton,System.Int32)">
            <summary>
            Check if the joystick AxisButton is released.
            </summary>
            <param name="button">The AxisButton to check.</param>
            <param name="joystick">The joystick to check.</param>
            <returns>True if the AxisButton is released.</returns>
        </member>
        <member name="M:_0rison.Input.ButtonDown(System.Int32,System.Int32)">
            <summary>
            Check if the joystick button is down.
            </summary>
            <param name="button">The button to check.</param>
            <param name="joystick">The joystick to check.</param>
            <returns>True if the button is down.</returns>
        </member>
        <member name="M:_0rison.Input.ButtonDown(_0rison.AxisButton,System.Int32)">
            <summary>
            Check if the joystick AxisButton is down.
            </summary>
            <param name="button">The AxisButton to check.</param>
            <param name="joystick">The joystick to check.</param>
            <returns>True if the AxisButton is down.</returns>
        </member>
        <member name="M:_0rison.Input.ButtonUp(System.Int32,System.Int32)">
            <summary>
            Check if the joystick button is up.
            </summary>
            <param name="button">The button to check.</param>
            <param name="joystick">The joystick to check.</param>
            <returns>True if the button is up.</returns>
        </member>
        <member name="M:_0rison.Input.ButtonUp(_0rison.AxisButton,System.Int32)">
            <summary>
            Check if the joystick button is up.
            </summary>
            <param name="button">The AxisButton to check.</param>
            <param name="joystick">The joystick to check.</param>
            <returns>True if the AxisButton is up.</returns>
        </member>
        <member name="M:_0rison.Input.GetAxis(_0rison.JoyAxis,System.Int32)">
            <summary>
            Get the value of a joystick axis from -100 to 100.
            </summary>
            <param name="axis">The axis to check.</param>
            <param name="joystick">The joystick to check.</param>
            <returns>The axis value from -100 to 100.</returns>
        </member>
        <member name="M:_0rison.Input.SetAxisThreshold(_0rison.JoyAxis,System.Single)">
            <summary>
            Set the threshold for an axis to act as an AxisButton.  Defaults to 50 or one half of the joystick's total range.
            </summary>
            <param name="axis">The JoyAxis to set.</param>
            <param name="threshold">The threshold that the axis must pass to act as a button press.</param>
        </member>
        <member name="M:_0rison.Input.GetAxisThreshold(_0rison.JoyAxis)">
            <summary>
            Gets the axis threshold for an axis to act as an AxisButton.
            </summary>
            <param name="axis">The JoyAxis.</param>
        </member>
        <member name="M:_0rison.Input.MouseButtonPressed(_0rison.MouseButton)">
            <summary>
            Check if a MouseButton is pressed.
            </summary>
            <param name="b">The MouseButton to check.</param>
            <returns>True if the MouseButton is pressed.</returns>
        </member>
        <member name="M:_0rison.Input.MouseButtonReleased(_0rison.MouseButton)">
            <summary>
            Check if a MouseButton is pressed.
            </summary>
            <param name="b">The MouseButton to check.</param>
            <returns>True if the MouseButton is pressed.</returns>
        </member>
        <member name="M:_0rison.Input.MouseButtonDown(_0rison.MouseButton)">
            <summary>
            Check if a MouseButton is pressed.
            </summary>
            <param name="b">The MouseButton to check.</param>
            <returns>True if the MouseButton is pressed.</returns>
        </member>
        <member name="M:_0rison.Input.MouseButtonUp(_0rison.MouseButton)">
            <summary>
            Check if a MouseButton is pressed.
            </summary>
            <param name="b">The MouseButton to check.</param>
            <returns>True if the MouseButton is pressed.</returns>
        </member>
        <member name="M:_0rison.Input.ClearKeystring">
            <summary>
            Clear the string of recently pressed keys.
            </summary>
        </member>
        <member name="T:_0rison.AxisButton">
            <summary>
            Buttons that represent the possible axes on a joystick.
            </summary>
        </member>
        <member name="T:_0rison.MouseButton">
            <summary>
            Mouse buttons.  Buttons on your mouse.
            </summary>
        </member>
        <member name="T:_0rison.MouseWheelDirection">
            <summary>
            The direction of the mouse wheel.
            </summary>
        </member>
        <member name="T:_0rison.Key">
            <summary>
            All the keys on your keyboard.
            </summary>
        </member>
        <member name="T:_0rison.Direction">
            <summary>
            Flags to represent Direction.
            </summary>
        </member>
        <member name="T:_0rison.JoyAxis">
            <summary>
            Axes on a joystick.
            </summary>
        </member>
        <member name="T:_0rison.Music">
            <summary>
            Class used to load and play music files. Music is streamed from the file source, or an IO stream.
            </summary>
        </member>
        <member name="P:_0rison.Music.GlobalVolume">
            <summary>
            The global volume to play all music at.
            </summary>
        </member>
        <member name="P:_0rison.Music.Volume">
            <summary>
            The local volume to play this music at.
            </summary>
        </member>
        <member name="P:_0rison.Music.Pitch">
            <summary>
            Adjust the pitch of the music.  Default value is 1.
            </summary>
        </member>
        <member name="P:_0rison.Music.Offset">
            <summary>
            Set the playback offset of the music in milliseconds.
            </summary>
        </member>
        <member name="P:_0rison.Music.Loop">
            <summary>
            Determines if the music should loop or not.
            </summary>
        </member>
        <member name="P:_0rison.Music.Duration">
            <summary>
            The duration in milliseconds of the music.
            </summary>
        </member>
        <member name="P:_0rison.Music.IsPlaying">
            <summary>
            Check if the Music is currently playing.
            </summary>
        </member>
        <member name="M:_0rison.Music.#ctor(System.String,System.Boolean)">
            <summary>
            Load a music file from a file path.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:_0rison.Music.#ctor(System.IO.Stream)">
            <summary>
            Load a music stream from an IO stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:_0rison.Music.Play">
            <summary>
            Play the music.
            </summary>
        </member>
        <member name="M:_0rison.Music.Stop">
            <summary>
            Stop the music!
            </summary>
        </member>
        <member name="M:_0rison.Music.Pause">
            <summary>
            Pause the music.
            </summary>
        </member>
        <member name="M:_0rison.Music.Dispose">
            <summary>
            Dispose the music. (I don't think this works right now.)
            </summary>
        </member>
        <member name="T:_0rison.Vertices">
            <summary>
            Graphic used for rendering a set of Vert objects.  Basically a wrapper for SFML's VertexArray.
            </summary>
        </member>
        <member name="F:_0rison.Vertices.Verts">
            <summary>
            The list of Verts.
            </summary>
        </member>
        <member name="P:_0rison.Vertices.PrimitiveType">
            <summary>
            The primitive type drawing mode for the Verts.
            </summary>
        </member>
        <member name="M:_0rison.Vertices.#ctor(System.String,_0rison.Vert[])">
            <summary>
            Create a new set of Vertices using a file path to a Texture.
            </summary>
            <param name="source">The file path to the Texture.</param>
            <param name="vertices">The Verts to use.</param>
        </member>
        <member name="M:_0rison.Vertices.#ctor(_0rison.Texture,_0rison.Vert[])">
            <summary>
            Create a new set of Vertices using a Texture.
            </summary>
            <param name="texture">The Texture to use.</param>
            <param name="vertices">The Verts to use.</param>
        </member>
        <member name="M:_0rison.Vertices.#ctor(_0rison.AtlasTexture,_0rison.Vert[])">
            <summary>
            Create a new set of Vertices using an AtlasTexture.
            </summary>
            <param name="texture">The AtlasTexture to use.</param>
            <param name="vertices">The Verts to use.</param>
        </member>
        <member name="M:_0rison.Vertices.#ctor(_0rison.Vert[])">
            <summary>
            Create a new set of Vertices with no Texture.
            </summary>
            <param name="vertices">The Verts to use.</param>
        </member>
        <member name="M:_0rison.Vertices.Clear">
            <summary>
            Clears all Verts from the Vertices.
            </summary>
        </member>
        <member name="M:_0rison.Vertices.Add(System.Single,System.Single,_0rison.Color,System.Single,System.Single)">
            <summary>
            Add a Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="color">The Color.</param>
            <param name="u">The X position on the Texture.</param>
            <param name="v">The Y position on the Texture.</param>
        </member>
        <member name="M:_0rison.Vertices.Add(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Add a Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="u">The X position on the Texture.</param>
            <param name="v">The Y position on the Texture.</param>
        </member>
        <member name="M:_0rison.Vertices.Add(System.Single,System.Single,_0rison.Color)">
            <summary>
            Add a Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="color">The Color.</param>
        </member>
        <member name="M:_0rison.Vertices.Add(System.Single,System.Single)">
            <summary>
            Add a Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
        </member>
        <member name="M:_0rison.Vertices.Add(_0rison.Vert[])">
            <summary>
            Add a set of Verts.
            </summary>
            <param name="vertices">The Verts to add.</param>
        </member>
        <member name="M:_0rison.Vertices.Remove(_0rison.Vert[])">
            <summary>
            Remove Verts.
            </summary>
            <param name="vertices">The Verts to remove.</param>
        </member>
        <member name="M:_0rison.Vertices.RemoveAt(System.Single,System.Single)">
            <summary>
            Remove Verts at a specific coordinate.
            </summary>
            <param name="x">The X position of the Vert to remove.</param>
            <param name="y">The Y position of the Vert to remove.</param>
        </member>
        <member name="T:_0rison.BoxCollider">
            <summary>
            Rectangle Collider.
            </summary>
        </member>
        <member name="M:_0rison.BoxCollider.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates a new box collider.
            </summary>
            <param name="width">The width of the collider.</param>
            <param name="height">The height of the collider.</param>
            <param name="tags">Any tags the collider should have.</param>
        </member>
        <member name="M:_0rison.BoxCollider.Render(_0rison.Color)">
            <summary>
            Draw the collider for debug purposes.
            </summary>
        </member>
        <member name="T:_0rison.CircleCollider">
            <summary>
            Circle Collider.
            </summary>
        </member>
        <member name="F:_0rison.CircleCollider.Radius">
            <summary>
            The radius of the circle.
            </summary>
        </member>
        <member name="M:_0rison.CircleCollider.Render(_0rison.Color)">
            <summary>
            Draw the collider for debug purposes.
            </summary>
        </member>
        <member name="T:_0rison.Collider">
            <summary>
            The base class used for collision detection.  Entities contain Colliders that can check for collisions
            with each other.  Note that some functions for detecting collisions can take generic Enums as their tags.
            Be aware that these functions are slightly slower than casting your Enums to int for the int tags functions.
            </summary>
        </member>
        <member name="F:_0rison.Collider.X">
            <summary>
            The X position of the Collider relative to the Entity.
            </summary>
        </member>
        <member name="F:_0rison.Collider.Y">
            <summary>
            The Y position of the Collider relative to the Entity.
            </summary>
        </member>
        <member name="F:_0rison.Collider.OriginX">
            <summary>
            The OriginX of the Collider.
            </summary>
        </member>
        <member name="F:_0rison.Collider.OriginY">
            <summary>
            The OriginY of the Collider.
            </summary>
        </member>
        <member name="F:_0rison.Collider.Entity">
            <summary>
            The entity that this collider is parented to.
            </summary>
        </member>
        <member name="F:_0rison.Collider.Collidable">
            <summary>
            Determines if this collider is collidable.  If false, it will not register collisions with
            other colliders, but can still check for collisions with other colliders.
            </summary>
        </member>
        <member name="P:_0rison.Collider.Tags">
            <summary>
            The tags that this Collider is registered with.
            </summary>
        </member>
        <member name="P:_0rison.Collider.Width">
            <summary>
            The width of the Collider.
            </summary>
        </member>
        <member name="P:_0rison.Collider.Height">
            <summary>
            The height of the Collider.
            </summary>
        </member>
        <member name="P:_0rison.Collider.CenterX">
            <summary>
            The X position of the center of the Collider.
            </summary>
        </member>
        <member name="P:_0rison.Collider.CenterY">
            <summary>
            The Y position of the center of the Collider.
            </summary>
        </member>
        <member name="P:_0rison.Collider.Left">
            <summary>
            The X position of the left side of the Collider.
            </summary>
        </member>
        <member name="P:_0rison.Collider.Right">
            <summary>
            The X position of the right side of the Collider.
            </summary>
        </member>
        <member name="P:_0rison.Collider.Top">
            <summary>
            The Y position of the top of the Collider.
            </summary>
        </member>
        <member name="P:_0rison.Collider.Bottom">
            <summary>
            The Y position of the bottom of the Collider.
            </summary>
        </member>
        <member name="P:_0rison.Collider.HalfHeight">
            <summary>
            Half of the Collider's height.
            </summary>
        </member>
        <member name="P:_0rison.Collider.HalfWidth">
            <summary>
            Half of the Collider's width.
            </summary>
        </member>
        <member name="M:_0rison.Collider.Overlap(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Checks for a collision with a specific point.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="px">The x of the point to check.</param>
            <param name="py">The y of the point to check.</param>
            <returns>True if the Collider at position x, y overlaps px, py.</returns>
        </member>
        <member name="M:_0rison.Collider.Overlap(System.Single,System.Single,System.Int32[])">
            <summary>
            Checks for a collision against the specified tags and returns true or false.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:_0rison.Collider.Overlap(System.Single,System.Single,_0rison.Collider)">
            <summary>
            Checks for a collision against a specific Collider and returns true or false.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="c">The Collider to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:_0rison.Collider.Overlap(System.Single,System.Single,_0rison.Entity)">
            <summary>
            Checks for a collision against a specific Entity and returns true or false.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="e">The Collider to check.</param>
            <returns>True of there was a collision.</returns>
        </member>
        <member name="M:_0rison.Collider.Overlap(System.Single,System.Single,System.Collections.Generic.List{System.Int32})">
            <summary>
            Checks for a collision against a list of Collliders and returns true or false.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The list of colliders to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:_0rison.Collider.Overlap(System.Single,System.Single,System.Enum[])">
            <summary>
            Checks for a collision against the specified tags and returns true or false.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:_0rison.Collider.Overlap(System.Single,System.Single,System.Collections.Generic.List{System.Enum})">
            <summary>
            Checks for a collision against the specified tags and returns true or false.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:_0rison.Collider.Overlap(System.Single,System.Single,System.Collections.Generic.List{_0rison.Entity})">
            <summary>
            Checks for a collision against a list of Entities and all of their colliders.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="entities">The Entities to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:_0rison.Collider.Overlap``1(System.Single,System.Single,System.Collections.Generic.List{``0})">
            <summary>
            Checks for a collision against a list of Entities and all of their colliders.
            </summary>
            <typeparam name="T">The type of entity to check.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="entities">The Entities to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:_0rison.Collider.Collide(System.Single,System.Single,System.Collections.Generic.List{_0rison.Entity})">
            <summary>
            Checks for a collision against a list of Entities and all of their colliders.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="entities">The Entities to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:_0rison.Collider.Collide(System.Single,System.Single,System.Int32[])">
            <summary>
            Checks for a collision against specified tags.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>The collider that was hit first.</returns>
        </member>
        <member name="M:_0rison.Collider.Collide(System.Single,System.Single,System.Enum[])">
            <summary>
            Checks for a collision against specified tags.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>The collider that was hit first.</returns>
        </member>
        <member name="M:_0rison.Collider.Collide(System.Single,System.Single,_0rison.Collider)">
            <summary>
            Checks for a collision with a specific collider.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="c">The collider to check for.</param>
            <returns>The collider that was hit first.</returns>
        </member>
        <member name="M:_0rison.Collider.Collide(System.Single,System.Single,_0rison.Entity)">
            <summary>
            Checks for a collision with a specific entity.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="e">The entity to check for.</param>
            <returns>The collider that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.Collide(System.Single,System.Single,System.Collections.Generic.List{System.Int32})">
            <summary>
            Checks for a collision with a list of tags.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>The Collider that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.Collide(System.Single,System.Single,System.Collections.Generic.List{System.Enum})">
            <summary>
            Checks for a collision with a list of tags.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>The Collider that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity(System.Single,System.Single,System.Int32[])">
            <summary>
            Checks for a collision with a list of tags and returns an Entity.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity``1(System.Single,System.Single,System.Int32[])">
            <summary>
            Checks for a collision with a list of tags and returns an Entity.
            </summary>
            <typeparam name="T">The type of Entity to return.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity(System.Single,System.Single,System.Enum[])">
            <summary>
            Checks for a collision with a list of tags and returns an Entity.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity``1(System.Single,System.Single,System.Enum[])">
            <summary>
            Checks for a collision with a list of tags and returns an Entity.
            </summary>
            <typeparam name="T">The type of Entity to return.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity(System.Single,System.Single,_0rison.Entity)">
            <summary>
            Checks for a collision with a specific Entity and returns an Entity.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="e">The Entity to check for.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity``1(System.Single,System.Single,_0rison.Entity)">
            <summary>
            Checks for a collision with a specific Entity and returns an Entity.
            </summary>
            <typeparam name="T">The type of Entity to return.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="e">The Entity to check for.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity(System.Single,System.Single,_0rison.Collider)">
            <summary>
            Checks for a collision with a specific Collider and returns an Entity.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="c">The Collider to check for.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity``1(System.Single,System.Single,_0rison.Collider)">
            <summary>
            Checks for a collision with a specific Collider and returns an Entity.
            </summary>
            <typeparam name="T">The type of Entity to return.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="c">The Collider to check for.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity(System.Single,System.Single,System.Collections.Generic.List{System.Int32})">
            <summary>
            Checks for a collision with a list of tags and returns an Entity.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The list of tags to check.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity``1(System.Single,System.Single,System.Collections.Generic.List{System.Int32})">
            <summary>
            Checks for a collision with a list of tags and returns an Entity.
            </summary>
            <typeparam name="T">The type of Entity to return.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The list of tags to check.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity(System.Single,System.Single,System.Collections.Generic.List{_0rison.Entity})">
            <summary>
            Checks for a collision with a list of Entities and returns an Entity.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="entities">The list of Entities to check.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntity``1(System.Single,System.Single,System.Collections.Generic.List{``0})">
            <summary>
            Checks for a collision with a list of Entities and returns an Entity.
            </summary>
            <typeparam name="T">The type of Entity to return.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="entities">The list of Entities to check.</param>
            <returns>The Entity that was hit.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideList(System.Single,System.Single,System.Int32[])">
            <summary>
            Creates a list of Colliders that this Collider is colliding with.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of colliders.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideList(System.Single,System.Single,System.Enum[])">
            <summary>
            Creates a list of Colliders that this Collider is colliding with.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of colliders.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideList(System.Single,System.Single,System.Collections.Generic.List{System.Enum})">
            <summary>
            Creates a list of Colliders that this Collider is colliding with.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of colliders.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideList(System.Single,System.Single,System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates a list of Colliders that this Collider is colliding with.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of colliders.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntities(System.Single,System.Single,System.Int32[])">
            <summary>
            Creates a list of Entities that the Collider has collided with.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntities(System.Single,System.Single,System.Enum[])">
            <summary>
            Creates a list of Entities that the Collider has collided with.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntities(System.Single,System.Single,System.Collections.Generic.List{System.Enum})">
            <summary>
            Creates a list of Entities that the Collider has collided with.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntities``1(System.Single,System.Single,System.Int32[])">
            <summary>
            Creates a list of Entities that the Collider has collided with.
            </summary>
            <typeparam name="T">The type of list to return.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntities``1(System.Single,System.Single,System.Enum[])">
            <summary>
            Creates a list of Entities that the Collider has collided with.
            </summary>
            <typeparam name="T">The type of list to return.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntities``1(System.Single,System.Single,System.Collections.Generic.List{System.Enum})">
            <summary>
            Creates a list of Entities that the Collider has collided with.
            </summary>
            <typeparam name="T">The type of list to return.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntities``1(System.Single,System.Single,System.Collections.Generic.List{``0})">
            <summary>
            Creates a list of Entities that the Collider has collided with.
            </summary>
            <typeparam name="T">The type of Entity.</typeparam>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="entities">The Entities to check.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:_0rison.Collider.CollideEntities(System.Single,System.Single,System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates a list of entities that the Collider has collided with.
            </summary>
            <param name="x">The x position to check.</param>
            <param name="y">The y position to check.</param>
            <param name="tags">The tags to check.</param>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:_0rison.Collider.Added">
            <summary>
            Callback for when the Collider has been added to an Entity.
            </summary>
        </member>
        <member name="M:_0rison.Collider.Removed">
            <summary>
            Callback for when the Collider has been removed from an Entity.
            </summary>
        </member>
        <member name="M:_0rison.Collider.Render(_0rison.Color)">
            <summary>
            Callback for when the Collider renders (usually for debugging purposes.)
            </summary>
        </member>
        <member name="M:_0rison.Collider.AddTag(System.Int32)">
            <summary>
            Add a new tag to the Collider.
            </summary>
            <param name="tag">The tag to add.</param>
            <returns>The Collider.</returns>
        </member>
        <member name="M:_0rison.Collider.AddTag(System.Enum[])">
            <summary>
            Add new tags to the Collider.
            </summary>
            <param name="tags">The tags to add.</param>
            <returns>The Collider.</returns>
        </member>
        <member name="M:_0rison.Collider.AddTag(System.Int32[])">
            <summary>
            Add new tags to the Collider.
            </summary>
            <param name="tags">The tags to add.</param>
            <returns>The Collider.</returns>
        </member>
        <member name="M:_0rison.Collider.RemoveTag(System.Int32)">
            <summary>
            Remove a tag from the Collider.
            </summary>
            <param name="tag">The tags to remove.</param>
            <returns>The Collider.</returns>
        </member>
        <member name="M:_0rison.Collider.RemoveTag(System.Int32[])">
            <summary>
            Remove tags from the Collider.
            </summary>
            <param name="tags">The tags to remove.</param>
            <returns>The Collider.</returns>
        </member>
        <member name="M:_0rison.Collider.RemoveTag(System.Enum[])">
            <summary>
            Remove tags from the Collider.
            </summary>
            <param name="tags">The tags to remove.</param>
            <returns>The Collider.</returns>
        </member>
        <member name="M:_0rison.Collider.CenterOrigin">
            <summary>
            Center the origin of the Collider.  Based off of Width and Height.
            </summary>
        </member>
        <member name="M:_0rison.Collider.SetPosition(System.Single,System.Single)">
            <summary>
            Set the positon of the Collider.
            </summary>
            <param name="x">The X position of the Collider.</param>
            <param name="y">The Y position of the Collider.</param>
        </member>
        <member name="M:_0rison.Collider.SetPosition(_0rison.Vector2)">
            <summary>
            Set the position of the Collider.
            </summary>
            <param name="xy">The Vector2 position of the Collider.</param>
        </member>
        <member name="M:_0rison.Collider.SetOrigin(System.Single,System.Single)">
            <summary>
            Set the origin of the Collider 
            </summary>
            <param name="x">The X origin of the Collider.</param>
            <param name="y">The Y origin of the Collider.</param>
        </member>
        <member name="M:_0rison.Collider.SetOrigin(_0rison.Vector2)">
            <summary>
            Set the origin of the Collider.
            </summary>
            <param name="xy">The Vector2 origin of the Collider.</param>
        </member>
        <member name="M:_0rison.Collider.OverlapTest(_0rison.Collider,_0rison.Collider)">
            <summary>
            Giant function that checks for overlaps between many different types
            </summary>
            <param name="first">The first collider to test.</param>
            <param name="second">The second collider to test.</param>
            <returns>True if overlapping something</returns>
        </member>
        <member name="T:_0rison.GridCollider">
            <summary>
            Grid Collider.  Can be mainly used to create collision to correspond to a Tilemap.
            </summary>
        </member>
        <member name="P:_0rison.GridCollider.TileWidth">
            <summary>
            The width of the tiles.
            </summary>
        </member>
        <member name="P:_0rison.GridCollider.TileHeight">
            <summary>
            The height of the tiles.
            </summary>
        </member>
        <member name="P:_0rison.GridCollider.TileRows">
            <summary>
            The total number of rows on the grid.
            </summary>
        </member>
        <member name="P:_0rison.GridCollider.TileColumns">
            <summary>
            The total number of columns on the grid.
            </summary>
        </member>
        <member name="P:_0rison.GridCollider.Width">
            <summary>
            The width of the grid. (TileColumns * TileWidth)
            </summary>
        </member>
        <member name="P:_0rison.GridCollider.Height">
            <summary>
            The height of the grid (TileRows * TileHeight)
            </summary>
        </member>
        <member name="M:_0rison.GridCollider.GridX(System.Single)">
            <summary>
            Convert an X position to a tile on the grid.
            </summary>
            <param name="x">The position to convert.</param>
            <returns>The X position of the tile that was found at that position.</returns>
        </member>
        <member name="M:_0rison.GridCollider.GridY(System.Single)">
            <summary>
            Convert an Y position to a tile on the grid.
            </summary>
            <param name="y">The position to convert.</param>
            <returns>The Y position of the tile that was found at that position.</returns>
        </member>
        <member name="P:_0rison.GridCollider.TileArea">
            <summary>
            The area in tile size.
            </summary>
        </member>
        <member name="P:_0rison.GridCollider.Area">
            <summary>
            The area in pixels.
            </summary>
        </member>
        <member name="M:_0rison.GridCollider.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Create a new GridCollider.
            </summary>
            <param name="width">The width in pixels of the GridCollider.</param>
            <param name="height">The height in pixels of the GridCollider.</param>
            <param name="tileWidth">The width of each tile on the grid.</param>
            <param name="tileHeight">The heigth of each tile on the grid.</param>
            <param name="tags">The tags to register for the collider.</param>
        </member>
        <member name="M:_0rison.GridCollider.SetTile(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set the collision status of a tile on the GridCollider.
            </summary>
            <param name="x">The X position of the tile.</param>
            <param name="y">The Y position of the tile.</param>
            <param name="collidable">True if collidable.</param>
        </member>
        <member name="M:_0rison.GridCollider.SetRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set the collision status of a rectangle area on the GridCollider.
            </summary>
            <param name="x">The X position of the top left corner of the rectangle.</param>
            <param name="y">The Y position of the top left corner of the rectangle.</param>
            <param name="width">The width in tiles of the rectangle.</param>
            <param name="height">The height in tiles of the rectangle.</param>
            <param name="collidable">True if collidable.</param>
        </member>
        <member name="M:_0rison.GridCollider.Clear(System.Boolean)">
            <summary>
            Clears the entire grid.
            </summary>
            <param name="collidable">Optionally set to true to clear grid with collidable cells.</param>
        </member>
        <member name="M:_0rison.GridCollider.GetTile(System.Int32,System.Int32)">
            <summary>
            Get the collision status of a tile on the GridCollider.
            </summary>
            <param name="x">The X position of the tile.</param>
            <param name="y">The Y position of the tile.</param>
            <returns>True if the tile is collidable.</returns>
        </member>
        <member name="M:_0rison.GridCollider.GetTileAtPosition(System.Single,System.Single)">
            <summary>
            Get the collision status of a tile at a position in the Scene.
            </summary>
            <param name="x">The X position in the Scene.</param>
            <param name="y">The Y position in the Scene.</param>
            <returns>True if the tile at that position is collidable.</returns>
        </member>
        <member name="M:_0rison.GridCollider.GetRect(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Check for a collidable tile in a rectangle on the GridCollider.
            </summary>
            <param name="x">The X position of the top left corner of the rectangle.</param>
            <param name="y">The Y position of the top left corner of the rectangle.</param>
            <param name="width">The width in tiles of the rectangle.</param>
            <param name="height">The height in tiles of the rectangle.</param>
            <param name="collidable">True if any tile in the rectangle is collidable.</param>
        </member>
        <member name="M:_0rison.GridCollider.LoadString(System.String,System.Char,System.Char)">
            <summary>
            Convert a string into tiles on the GridCollider.
            </summary>
            <param name="source">The source string data.</param>
            <param name="empty">The character representing an empty space on the grid.</param>
            <param name="filled">The character representing a collidable space on the grid.</param>
        </member>
        <member name="M:_0rison.GridCollider.LoadCSV(System.String,System.String,System.String,System.Char,System.Char)">
            <summary>
            Convert a CSV file into tiles on the GridCollider.
            </summary>
            <param name="source">The source CSV data.</param>
            <param name="empty">String representing an empty space on the grid.</param>
            <param name="filled">String representing a collidable space on the grid.</param>
            <param name="columnSep">The separator character for columns.</param>
            <param name="rowSep">The separator character for rows.</param>
        </member>
        <member name="M:_0rison.GridCollider.LoadTilemap(_0rison.Tilemap,System.Int32)">
            <summary>
            Load collision data from a Tilemap.
            </summary>
            <param name="source">The source Tilemap.</param>
            <param name="layerDepth">The layer of tiles to use to mark collisions.</param>
        </member>
        <member name="M:_0rison.GridCollider.LoadTilemap(_0rison.Tilemap,System.String)">
            <summary>
            Load collision data from a Tilemap.
            </summary>
            <param name="source">The source Tilemap.</param>
            <param name="layerName">The layer of tiles to use to mark collisions.</param>
        </member>
        <member name="M:_0rison.GridCollider.LoadTilemap(_0rison.Tilemap,System.Enum)">
            <summary>
            Load collision data from a Tilemap.
            </summary>
            <param name="source">The source Tilemap.</param>
            <param name="layerName">The layer of tiles to use to mark collisions.</param>
        </member>
        <member name="M:_0rison.GridCollider.Render(_0rison.Color)">
            <summary>
            Draw the collider for debug purposes.
            </summary>
        </member>
        <member name="T:_0rison.LineCollider">
            <summary>
            Line Collider.
            </summary>
        </member>
        <member name="F:_0rison.LineCollider.X2">
            <summary>
            The X position of the end of the line.
            </summary>
        </member>
        <member name="F:_0rison.LineCollider.Y2">
            <summary>
            The Y position of the end of the line.
            </summary>
        </member>
        <member name="P:_0rison.LineCollider.Width">
            <summary>
            The width of the area the line occupies.
            </summary>
        </member>
        <member name="P:_0rison.LineCollider.Height">
            <summary>
            The height of the area the line occupies.
            </summary>
        </member>
        <member name="P:_0rison.LineCollider.Bottom">
            <summary>
            The bottom most Y position of the line.
            </summary>
        </member>
        <member name="P:_0rison.LineCollider.Top">
            <summary>
            The top most Y position of the line.
            </summary>
        </member>
        <member name="P:_0rison.LineCollider.Left">
            <summary>
            The left most X position of the line.
            </summary>
        </member>
        <member name="P:_0rison.LineCollider.Right">
            <summary>
            The right most X position of the line.
            </summary>
        </member>
        <member name="P:_0rison.LineCollider.Line2">
            <summary>
            Convert the LineCollider into a Line2 object.
            </summary>
        </member>
        <member name="M:_0rison.LineCollider.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32[])">
            <summary>
            Create a LineCollider.
            </summary>
            <param name="x1">The X position of the start of the line.</param>
            <param name="y1">The Y position of the start of the line.</param>
            <param name="x2">The X position of the end of the line.</param>
            <param name="y2">The X position of the end of the line.</param>
            <param name="tags">The tags to register for the Collider.</param>
        </member>
        <member name="M:_0rison.LineCollider.Render(_0rison.Color)">
            <summary>
            Draw the collider for debug purposes.
            </summary>
        </member>
        <member name="T:_0rison.PixelCollider">
            <summary>
            Collider that can use an image as a mask.  This is not recommended to use for most cases as it can
            be pretty expensive to process.
            </summary>
        </member>
        <member name="F:_0rison.PixelCollider.Threshold">
            <summary>
            The amount of Alpha a pixel needs to exceed to register as a collision.
            If 0, any pixel with an alpha above 0 will register as collidable.
            </summary>
        </member>
        <member name="P:_0rison.PixelCollider.Pixels">
            <summary>
            The byte array of pixels.
            </summary>
        </member>
        <member name="M:_0rison.PixelCollider.#ctor(System.String,System.Int32[])">
            <summary>
            Creates a pixel collider.
            </summary>
            <param name="source">The source image to create the collider from.</param>
            <param name="tags">The tags to register the collider with.</param>
        </member>
        <member name="M:_0rison.PixelCollider.PixelAt(System.Int32,System.Int32)">
            <summary>
            Check if a pixel is collidable at x, y.
            </summary>
            <param name="x">The X position of the pixel to check.</param>
            <param name="y">The Y position of the pixel to check.</param>
            <returns>True if the pixel collides.</returns>
        </member>
        <member name="M:_0rison.PixelCollider.PixelAt(System.Int32,System.Int32,System.Single)">
            <summary>
            Check if a pixel is collidable at X, Y.
            </summary>
            <param name="x">The X position of the pixel to check.</param>
            <param name="y">The Y position of the pixel to check.</param>
            <param name="threshold">The alpha threshold that should register a collision.</param>
            <returns>True if the pixel collides.</returns>
        </member>
        <member name="M:_0rison.PixelCollider.PixelAtRelative(System.Int32,System.Int32)">
            <summary>
            Check if a pixel is collideable at X - Left, Y - Top.
            </summary>
            <param name="x">The X position of the pixel to check.</param>
            <param name="y">The Y position of the pixel to check.</param>
            <returns>True if the pixel collides.</returns>
        </member>
        <member name="M:_0rison.PixelCollider.PixelAtRelative(System.Int32,System.Int32,System.Single)">
            <summary>
            Check if a pixel is collideable at X - Left, Y - Top.
            </summary>
            <param name="x">The X position of the pixel to check.</param>
            <param name="y">The Y position of the pixel to check.</param>
            <param name="threshold">The alpha threshold that should register a collision.</param>
            <returns>True if the pixel collides.</returns>
        </member>
        <member name="M:_0rison.PixelCollider.PixelArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Check if any pixels in the area defined by X, Y, X2, Y2 are collideable.
            </summary>
            <param name="x">The left of the area to check.</param>
            <param name="y">The top of the area to check.</param>
            <param name="x2">The right of the area to check.</param>
            <param name="y2">The bottom of the area to check.</param>
            <returns>True if the pixel collides.</returns>
        </member>
        <member name="M:_0rison.PixelCollider.PixelArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Check if any pixels in the area defined by X, Y, X2, Y2 are collideable.
            </summary>
            <param name="x">The left of the area to check.</param>
            <param name="y">The top of the area to check.</param>
            <param name="x2">The right of the area to check.</param>
            <param name="y2">The bottom of the area to check.</param>
            <param name="threshold">The alpha threshold that should register a collision.</param>
            <returns>True if the pixel collides.</returns>
        </member>
        <member name="M:_0rison.PixelCollider.Render(_0rison.Color)">
            <summary>
            Draw the collider for debug purposes.
            </summary>
        </member>
        <member name="T:_0rison.PointCollider">
            <summary>
            Point Collider.
            </summary>
        </member>
        <member name="M:_0rison.PointCollider.Render(_0rison.Color)">
            <summary>
            Draw the collider for debug purposes.
            </summary>
        </member>
        <member name="T:_0rison.Speed">
            <summary>
            Class used for tracking an X and Y speed of an object. Speed also has an XMax and YMax that can
            be used to clamp the X and Y values automatically.
            </summary>
        </member>
        <member name="F:_0rison.Speed.MaxX">
            <summary>
            The maximum X speed.
            </summary>
        </member>
        <member name="F:_0rison.Speed.MaxY">
            <summary>
            The maximum Y speed.
            </summary>
        </member>
        <member name="F:_0rison.Speed.HardClamp">
            <summary>
            Determines if the maximum values will be hard clamped.
            If true, values will never exceed the maximums.
            </summary>
        </member>
        <member name="P:_0rison.Speed.X">
            <summary>
            The current X value of the speed.
            </summary>
        </member>
        <member name="P:_0rison.Speed.Y">
            <summary>
            The current Y value of the speed.
            </summary>
        </member>
        <member name="P:_0rison.Speed.Max">
            <summary>
            Shortcut to set both MaxX and MaxY.
            </summary>
        </member>
        <member name="P:_0rison.Speed.Length">
            <summary>
            The length of the speed object.
            </summary>
        </member>
        <member name="M:_0rison.Speed.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Create a new Speed object.
            </summary>
            <param name="x">The initial X value.</param>
            <param name="y">The initial Y value.</param>
            <param name="maxX">The maximum X value.</param>
            <param name="maxY">The maximum Y value.</param>
            <param name="hardClamp">Determines if the value can exceed the maximum.</param>
        </member>
        <member name="M:_0rison.Speed.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a new Speed object.
            </summary>
            <param name="x">The initial X value.</param>
            <param name="y">The initial Y value.</param>
            <param name="maxX">The maximum X value.</param>
            <param name="maxY">The maximum Y value.</param>
        </member>
        <member name="M:_0rison.Speed.#ctor(System.Single,System.Single)">
            <summary>
            Create a new Speed object.
            </summary>
            <param name="maxX">The maximum X value.</param>
            <param name="maxY">The maximum Y value.</param>
        </member>
        <member name="M:_0rison.Speed.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Create a new Speed object.
            </summary>
            <param name="maxX">The maximum X value.</param>
            <param name="maxY">The maximum Y value.</param>
            <param name="hardClamp">Determines if the value can exceed the maximum.</param>
        </member>
        <member name="M:_0rison.Speed.#ctor(System.Single,System.Boolean)">
            <summary>
            Create a new Speed object.
            </summary>
            <param name="max">The maximum X and Y values.</param>
            <param name="hardClamp">Determines if the value can exceed the maximum.</param>
        </member>
        <member name="M:_0rison.Speed.#ctor(System.Single)">
            <summary>
            Create a new Speed object.
            </summary>
            <param name="max">The maximum X and Y values.</param>
        </member>
        <member name="M:_0rison.Speed.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>
            A String that represents this instance.
            </returns>
        </member>
        <member name="T:_0rison.Scene">
            <summary>
            Class used to manage Entities. The active Game should update the active Scene, which then updates
            all of the contained Entities.
            </summary>
        </member>
        <member name="F:_0rison.Scene.Tweener">
            <summary>
            The Glide instance for this Scene to control all tweens.
            </summary>
        </member>
        <member name="F:_0rison.Scene.Timer">
            <summary>
            The current time since this Scene has started.
            </summary>
        </member>
        <member name="F:_0rison.Scene.OnUpdate">
            <summary>
            An action that triggers during Update().
            </summary>
        </member>
        <member name="F:_0rison.Scene.OnUpdateFirst">
            <summary>
            An action that triggers during UpdateFirst().
            </summary>
        </member>
        <member name="F:_0rison.Scene.OnUpdateLast">
            <summary>
            An action that triggers during UpdateLast().
            </summary>
        </member>
        <member name="F:_0rison.Scene.OnRender">
            <summary>
            An action that triggers during Render(), after all entities have been rendered.
            </summary>
        </member>
        <member name="F:_0rison.Scene.OnBegin">
            <summary>
            An action that triggers during Begin().
            </summary>
        </member>
        <member name="F:_0rison.Scene.OnEnd">
            <summary>
            An action that triggers during End().
            </summary>
        </member>
        <member name="F:_0rison.Scene.OnAdd">
            <summary>
            An action that triggers when an entity is Added.
            </summary>
        </member>
        <member name="F:_0rison.Scene.OnRemove">
            <summary>
            An action that triggers when an entity is removed.
            </summary>
        </member>
        <member name="F:_0rison.Scene.OnPause">
            <summary>
            An action that triggers when the Scene is paused because a Scene is stacked on top of it.
            </summary>
        </member>
        <member name="F:_0rison.Scene.OnResume">
            <summary>
            An action that triggers when the Scene is resumed because the active Scene on top of it was popped.
            </summary>
        </member>
        <member name="F:_0rison.Scene.CameraAngle">
            <summary>
            The angle of the camera.
            </summary>
        </member>
        <member name="F:_0rison.Scene.CameraZoom">
            <summary>
            The zoom of the camera.
            </summary>
        </member>
        <member name="F:_0rison.Scene.Width">
            <summary>
            The width of the scene.
            </summary>
        </member>
        <member name="F:_0rison.Scene.Height">
            <summary>
            The height of the scene.
            </summary>
        </member>
        <member name="F:_0rison.Scene.ApplyCamera">
            <summary>
            Determines if the scene will control the game surface's camera.
            </summary>
        </member>
        <member name="F:_0rison.Scene.Instance">
            <summary>
            A reference back to the current scene being run by the game.
            </summary>
        </member>
        <member name="F:_0rison.Scene.DrawScenesBelow">
            <summary>
            Determines if scenes below this scene on the stack are allowed to render.
            </summary>
        </member>
        <member name="F:_0rison.Scene.CameraBounds">
            <summary>
            The bounds that the camera should be clamped inside.
            </summary>
        </member>
        <member name="F:_0rison.Scene.UseCameraBounds">
            <summary>
            Determines if the camera will be clamped inside the CameraBounds rectangle.
            </summary>
        </member>
        <member name="F:_0rison.Scene.Visible">
            <summary>
            Determines if the scene will render its graphics or not.
            </summary>
        </member>
        <member name="P:_0rison.Scene.Game">
            <summary>
            A reference to the Game that owns this Scene.
            </summary>
        </member>
        <member name="P:_0rison.Scene.Surface">
            <summary>
            The default surface to render the scene's graphics to.  If null then render
            to the default game surface.
            </summary>
        </member>
        <member name="P:_0rison.Scene.Surfaces">
            <summary>
            The list of surfaces the Scene should render to.
            </summary>
        </member>
        <member name="P:_0rison.Scene.HalfWidth">
            <summary>
            Half of the scene's width.
            </summary>
        </member>
        <member name="P:_0rison.Scene.HalfHeight">
            <summary>
            Half of the scene's height.
            </summary>
        </member>
        <member name="P:_0rison.Scene.Input">
            <summary>
            A reference to the Input from the Game controlling this scene.
            </summary>
        </member>
        <member name="P:_0rison.Scene.EntityCount">
            <summary>
            The current number of entities in the scene.
            </summary>
        </member>
        <member name="P:_0rison.Scene.MouseX">
            <summary>
            The current mouse X position in relation to the scene space.
            </summary>
        </member>
        <member name="P:_0rison.Scene.MouseY">
            <summary>
            The current mouse Y position in relation to the scene space.
            </summary>
        </member>
        <member name="P:_0rison.Scene.MouseRawX">
            <summary>
            The current raw mouse X position in relation to the scene space.
            </summary>
        </member>
        <member name="P:_0rison.Scene.MouseRawY">
            <summary>
            The current raw mouse Y position in relation to the scene space.
            </summary>
        </member>
        <member name="P:_0rison.Scene.CameraX">
            <summary>
            The X position of the camera in the scene.
            </summary>
        </member>
        <member name="P:_0rison.Scene.CameraCenterX">
            <summary>
            The X position of the center of the camera.
            </summary>
        </member>
        <member name="P:_0rison.Scene.CameraCenterY">
            <summary>
            The Y position of the center of the camera.
            </summary>
        </member>
        <member name="P:_0rison.Scene.CameraY">
            <summary>
            The Y position of the camera in the scene.
            </summary>
        </member>
        <member name="P:_0rison.Scene.Debugger">
            <summary>
            A reference to the debugger object from the game that owns this scene.
            </summary>
        </member>
        <member name="M:_0rison.Scene.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a Scene with a specified width and height. If the width and height are not defined they
            will be inferred by the Game class that uses the Scene.
            </summary>
            <param name="width">The width of the scene.</param>
            <param name="height">The height of the scene.</param>
        </member>
        <member name="M:_0rison.Scene.CenterCamera(System.Single,System.Single)">
            <summary>
            Centers the camera of the scene.
            </summary>
            <param name="x">The x coordinate to be the center of the scene.</param>
            <param name="y">The y coordinate to be the center of the scene.</param>
        </member>
        <member name="M:_0rison.Scene.Add``1(``0)">
            <summary>
            Add an entity to the scene.
            </summary>
            <param name="e">Adds a new entity</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Scene.AddMultiple(_0rison.Entity[])">
            <summary>
            Add multiple entities to the scene.
            </summary>
            <param name="entities">The entities to add.</param>
            <returns>A list of the entities.</returns>
        </member>
        <member name="M:_0rison.Scene.SetGraphic``1(``0)">
            <summary>
            Set the only graphic of the scene.
            </summary>
            <param name="g">The graphic.</param>
            <returns>The graphic.</returns>
        </member>
        <member name="M:_0rison.Scene.AddGraphic``1(``0)">
            <summary>
            Adds a graphic to the scene.
            </summary>
            <param name="g">The graphic.</param>
            <returns>The graphic.</returns>
        </member>
        <member name="M:_0rison.Scene.AddGraphics(_0rison.Graphic[])">
            <summary>
            Add multiple graphics to the scene.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>A list of the graphics added.</returns>
        </member>
        <member name="M:_0rison.Scene.RemoveGraphic``1(``0)">
            <summary>
            Removes a graphic from the scene.
            </summary>
            <typeparam name="T">The type (inferred from the parameter.)</typeparam>
            <param name="g">The graphic to remove.</param>
            <returns>The graphic.</returns>
        </member>
        <member name="M:_0rison.Scene.ClearGraphics">
            <summary>
            Removes all graphics from the scene.
            </summary>
        </member>
        <member name="M:_0rison.Scene.Remove``1(``0)">
            <summary>
            Removes an entity from the scene.
            </summary>
            <typeparam name="T">The type (inferred from the parameter.)</typeparam>
            <param name="e">The entity to remove.</param>
            <returns>The entity.</returns>
        </member>
        <member name="M:_0rison.Scene.RemoveAll">
            <summary>
            Remove all entities from the scene.
            </summary>
        </member>
        <member name="M:_0rison.Scene.AddSurface(_0rison.Surface)">
            <summary>
            Add a surface to the list of surfaces that the scene should render to.
            This only applies to the Scene's graphics, NOT the entities in the scene.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:_0rison.Scene.RemoveSurface(_0rison.Surface)">
            <summary>
            Remove a surface from the list of targets that the scene should render to.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:_0rison.Scene.ClearSurfaces">
            <summary>
            Remove all surface targets and revert back to the default game surface.
            </summary>
        </member>
        <member name="M:_0rison.Scene.Begin">
            <summary>
            Called when the scene begins after being switched to, or added to the stack.
            </summary>
        </member>
        <member name="M:_0rison.Scene.End">
            <summary>
            Called when the scene ends after being switched away from, or removed from the stack.
            </summary>
        </member>
        <member name="M:_0rison.Scene.Pause">
            <summary>
            Called when the scene is paused because a new scene is stacked on it.
            </summary>
        </member>
        <member name="M:_0rison.Scene.Resume">
            <summary>
            Called when the scene resumes after a scene is added above it.
            </summary>
        </member>
        <member name="M:_0rison.Scene.UpdateFirst">
            <summary>
            The first update of the scene.
            </summary>
        </member>
        <member name="M:_0rison.Scene.UpdateLast">
            <summary>
            The last update of the scene.
            </summary>
        </member>
        <member name="M:_0rison.Scene.Update">
            <summary>
            The main update loop of the scene.
            </summary>
        </member>
        <member name="M:_0rison.Scene.Render">
            <summary>
            Renders the scene.  Graphics added to the scene render first.
            Graphics drawn in Render() will render on top of all entities.
            </summary>
        </member>
        <member name="M:_0rison.Scene.UpdateLists">
            <summary>
            Update the internal lists stored by the scene.  The engine will usually take care of this!
            </summary>
        </member>
        <member name="M:_0rison.Scene.Tween(System.Object,System.Object,System.Single,System.Single)">
            <summary>
            Tweens a set of numeric properties on an object.
            </summary>
            <param name="target">The object to tween.</param>
            <param name="values">The values to tween to, in an anonymous type ( new { prop1 = 100, prop2 = 0} ).</param>
            <param name="duration">Duration of the tween in seconds.</param>
            <param name="delay">Delay before the tween starts, in seconds.</param>
            <returns>The tween created, for setting properties on.</returns>
        </member>
        <member name="M:_0rison.Scene.PauseGroup(System.Int32)">
            <summary>
            Pause a group of entities.
            </summary>
            <param name="group">The group to pause.</param>
        </member>
        <member name="M:_0rison.Scene.ResumeGroup(System.Int32)">
            <summary>
            Resume a paused group of entities.
            </summary>
            <param name="group">The group to resume.</param>
        </member>
        <member name="M:_0rison.Scene.PauseGroupToggle(System.Int32)">
            <summary>
            Pause or resume a group of entities. If paused, resume. If running, pause.
            </summary>
            <param name="group">The group to toggle.</param>
        </member>
        <member name="M:_0rison.Scene.IsGroupPaused(System.Int32)">
            <summary>
            If a group of entities is currently paused. Note that pausing wont happen until the next update
            aftering calling pause.
            </summary>
            <param name="group">The group to check.</param>
            <returns>True if the group is paused.</returns>
        </member>
        <member name="M:_0rison.Scene.GetEntities``1">
            <summary>
            Get a list of entities of type T from the Scene.
            </summary>
            <typeparam name="T">The type of entity to collect.</typeparam>
            <returns>A list of entities of type T.</returns>
        </member>
        <member name="M:_0rison.Scene.GetEntity``1">
            <summary>
            Get the first instance of an entity of type T.
            </summary>
            <typeparam name="T">The entity type to search for.</typeparam>
            <returns>The first entity of that type in the scene.</returns>
        </member>
        <member name="M:_0rison.Scene.GetCount``1">
            <summary>
            Count how many entities of type T are in this Scene.
            </summary>
            <typeparam name="T">The type of entity to count.</typeparam>
            <returns>The number of entities of type T.</returns>
        </member>
        <member name="T:_0rison.Session">
            <summary>
            Class that represents a player session.  Use this for maintaining and using information about
            a player.  For example a two player game might have two sessions, one for each player, each with
            their own controls configured and save data.
            </summary>
        </member>
        <member name="M:_0rison.Session.Create(System.String)">
            <summary>
            Create a new Session using the current Game.Instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:_0rison.Session.Name">
            <summary>
            The name of this Session. This is important as it will determine the name of save data
            files and you can also find a session by name.
            </summary>
        </member>
        <member name="F:_0rison.Session.Controller">
            <summary>
            The Controller to use for this Session.
            </summary>
        </member>
        <member name="M:_0rison.Session.GetController``1">
            <summary>
            Gets the Controller as a specific type of Controller.
            </summary>
            <typeparam name="T">The type of Controller.</typeparam>
            <returns>The Controller as type T.</returns>
        </member>
        <member name="P:_0rison.Session.Id">
            <summary>
            The Id of this session in the Game.
            </summary>
        </member>
        <member name="P:_0rison.Session.Game">
            <summary>
            The game that manages this session.
            </summary>
        </member>
        <member name="M:_0rison.Session.#ctor(_0rison.Game,System.String)">
            <summary>
            Create a new Session.
            </summary>
            <param name="game">The Game that the session is tied to.</param>
        </member>
        <member name="T:_0rison.Sound">
            <summary>
            Class used to play a sound from a file or an IO Stream. Sounds are cached if loaded from a file.
            </summary>
        </member>
        <member name="P:_0rison.Sound.GlobalVolume">
            <summary>
            The global volume of all sounds.
            </summary>
        </member>
        <member name="P:_0rison.Sound.ListenerPosition">
            <summary>
            Where the Listener is in 3D space.
            </summary>
        </member>
        <member name="P:_0rison.Sound.ListenerX">
            <summary>
            The Listener's X position.
            </summary>
        </member>
        <member name="P:_0rison.Sound.ListenerY">
            <summary>
            The Listener's Y position.
            </summary>
        </member>
        <member name="P:_0rison.Sound.ListenerZ">
            <summary>
            The Listener's Z position.
            </summary>
        </member>
        <member name="P:_0rison.Sound.ListenerDirection">
            <summary>
            What direction the Listener is pointing. Should be a unit vector.
            </summary>
        </member>
        <member name="F:_0rison.Sound.Volume">
            <summary>
            The local volume of this sound.
            </summary>
        </member>
        <member name="P:_0rison.Sound.Pitch">
            <summary>
            Adjust the pitch of the sound. Default value is 1.
            </summary>
        </member>
        <member name="P:_0rison.Sound.Offset">
            <summary>
            The playback offset of the sound in milliseconds.
            </summary>
        </member>
        <member name="P:_0rison.Sound.Loop">
            <summary>
            Determines if the sound should loop or not.
            </summary>
        </member>
        <member name="P:_0rison.Sound.Duration">
            <summary>
            The duration of the sound in milliseconds.
            </summary>
        </member>
        <member name="P:_0rison.Sound.RelativeToListener">
            <summary>
            Whether or not the sound plays relative to the Listener position.
            Only mono sounds are able to be spatial.
            </summary>
        </member>
        <member name="P:_0rison.Sound.Position">
            <summary>
            Where the sound is in 3D space.
            </summary>
        </member>
        <member name="P:_0rison.Sound.X">
            <summary>
            The sound's X position.
            </summary>
        </member>
        <member name="P:_0rison.Sound.Y">
            <summary>
            The sound's Y position.
            </summary>
        </member>
        <member name="P:_0rison.Sound.Z">
            <summary>
            The sound's Z position.
            </summary>
        </member>
        <member name="P:_0rison.Sound.Attenuation">
            <summary>
            The sound's attenuation factor.
            Determines how the sound fades over distance.
            </summary>
        </member>
        <member name="P:_0rison.Sound.MinimumDistance">
            <summary>
            The minimum distance to hear the sound at max volume.
            Past this distance the sound is faded according to it's attenuation.
            0 is an invalid value.
            </summary>
        </member>
        <member name="P:_0rison.Sound.IsPlaying">
            <summary>
            Check if the Sound is currently playing.
            </summary>
        </member>
        <member name="M:_0rison.Sound.#ctor(System.String,System.Boolean)">
            <summary>
            Load a new sound from a filepath. If this file has been used before it will be loaded from the cache.
            </summary>
            <param name="source">The path to the sound file.</param>
            <param name="loop">Determines if the sound should loop.</param>
        </member>
        <member name="M:_0rison.Sound.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Load a new sound from an IO Stream.
            </summary>
            <param name="stream">The memory stream of the sound data.</param>
            <param name="loop">Determines if the sound should loop.</param>
        </member>
        <member name="M:_0rison.Sound.#ctor(_0rison.Sound)">
            <summary>
            Load a new sound from copying another sound.
            </summary>
            <param name="sound">The sound to copy from.</param>
        </member>
        <member name="M:_0rison.Sound.Play">
            <summary>
            Play the sound.
            </summary>
        </member>
        <member name="M:_0rison.Sound.Stop">
            <summary>
            Stop the sound.
            </summary>
        </member>
        <member name="M:_0rison.Sound.Pause">
            <summary>
            Pause the sound.
            </summary>
        </member>
        <member name="M:_0rison.Sound.CenterSound(System.Single,System.Single,System.Single)">
            <summary>
            Centers the sound at the given position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:_0rison.Sound.CenterSound(System.Single,System.Single)">
            <summary>
            Centers the sound at the given position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:_0rison.Sound.CenterSound(_0rison.Vector3)">
            <summary>
            Centers the sound at the given position.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:_0rison.Sound.CenterSound(_0rison.Vector2)">
            <summary>
            Centers the sound at the given position.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:_0rison.Sound.CenterListener(System.Single,System.Single,System.Single)">
            <summary>
            Centers the Listener at the given position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:_0rison.Sound.CenterListener(System.Single,System.Single)">
            <summary>
            Centers the Listener at the given position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:_0rison.Sound.CenterListener(_0rison.Vector3)">
            <summary>
            Centers the Listener at the given position.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:_0rison.Sound.CenterListener(_0rison.Vector2)">
            <summary>
            Centers the Listener at the given position.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:_0rison.Sound.PointListener(System.Single,System.Single,System.Single)">
            <summary>
            Points the Listener in the given direction.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:_0rison.Sound.PointListener(System.Single,System.Single)">
            <summary>
            Points the Listener in the given direction.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:_0rison.Sound.PointListener(_0rison.Vector3)">
            <summary>
            Points the Listener in the given direction.
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:_0rison.Sound.PointListener(_0rison.Vector2)">
            <summary>
            Points the Listener in the given direction.
            </summary>
            <param name="direction"></param>
        </member>
        <member name="T:_0rison.Files">
            <summary>
            Manages files used for game assets.  Can use a packed data file of paths and byte arrays.
            The game will attempt to use local files before the packed data file.
            Packed data is expected as:
            bool: true to continue reading, false to stop
            string: the path of the file that was packed
            int32: the size of the file that was packed
            bytes: the actual data from the file
            </summary>
        </member>
        <member name="F:_0rison.Files.Data">
            <summary>
            The unpacked data from a packed data file.  File paths mapped to byte arrays.
            </summary>
        </member>
        <member name="F:_0rison.Files.AssetsFolderPrefix">
            <summary>
            The root folder that assets can be found in when loading data.
            </summary>
        </member>
        <member name="M:_0rison.Files.LoadPackedData(System.String)">
            <summary>
            Reads data from a uncompressed packed file
            </summary>
            <param name="path">The path to the packed data file.</param>
        </member>
        <member name="M:_0rison.Files.FileExists(System.String)">
            <summary>
            Check if a file exists, or if it has been loaded from the packed data.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the file exists or if it has been loaded from the packed data.</returns>
        </member>
        <member name="M:_0rison.Files.LoadFileStream(System.String)">
            <summary>
            Load a file as a memory stream from local files or packed data.
            Probably don't use this a lot it probably is memory leak city.
            </summary>
            <param name="path">The path to load from.</param>
            <returns>The stream.</returns>
        </member>
        <member name="M:_0rison.Files.LoadFileBytes(System.String)">
            <summary>
            Load a file as a byte array from local files or packed data.
            </summary>
            <param name="path">The path to load from.</param>
            <returns>The byte array of the data from the file.</returns>
        </member>
        <member name="M:_0rison.Files.IsUsingDataPack(System.String)">
            <summary>
            Check if a file is being loaded from a local file or the packed data.
            Note that the game will attempt to load from local files before packed data.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the data is coming from the packed file.</returns>
        </member>
        <member name="T:_0rison.Sounds">
            <summary>
            Class that manages the cache of sounds.
            </summary>
        </member>
        <member name="T:_0rison.Fonts">
            <summary>
            Class that manages the cache of fonts.
            </summary>
        </member>
        <member name="T:_0rison.Textures">
            <summary>
            Class that manages the cache of Textures.
            </summary>
        </member>
        <member name="M:_0rison.Textures.Reload(System.String)">
            <summary>
            This doesn't really work right now.  Textures in images won't update
            if you do this.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:_0rison.Textures.ReloadAll">
            <summary>
            This doesn't work right now.  Textures in images won't update if you
            do this.
            </summary>
        </member>
        <member name="T:_0rison.Color">
            <summary>
            Class that represents a color with red, green, blue, and alpha channels.
            </summary>
        </member>
        <member name="M:_0rison.Color.Lerp(_0rison.Color,_0rison.Color,System.Single)">
            <summary>
            Interpolate from one Color to another.
            </summary>
            <param name="from">The start Color.</param>
            <param name="to">The end Color.</param>
            <param name="amount">The amount of completion on the lerp. (0 - 1)</param>
            <returns>The interpolated Color.</returns>
        </member>
        <member name="M:_0rison.Color.Lerp(System.Single,_0rison.Color[])">
            <summary>
            Interpolate through a set of Colors.
            </summary>
            <param name="amount">The amount of completion on the lerp. (0 - 1)</param>
            <param name="colors">The Colors to interpolate through.</param>
            <returns>The interpolated Color.</returns>
        </member>
        <member name="M:_0rison.Color.Mix(_0rison.Color[])">
            <summary>
            Return a new color made by mixing multiple colors.
            Mixes the colors evenly.
            </summary>
            <param name="colors">The colors to be mixed.</param>
            <returns>A new color of all the colors mixed together.</returns>
        </member>
        <member name="M:_0rison.Color.FromHSV(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a new color from HSV values.
            </summary>
            <param name="h">Hue, 0 to 360.</param>
            <param name="s">Saturation, 0 to 1.</param>
            <param name="v">Value, 0 to 1.</param>
            <param name="a">Alpha, 0 to 1.</param>
            <returns>A new RGBA color.</returns>
        </member>
        <member name="M:_0rison.Color.AddCustom(_0rison.Color,System.Enum)">
            <summary>
            Store a custom Color.  Actually stores a new copy of that Color.
            </summary>
            <param name="color">The Color to store.</param>
            <param name="name">The name of the Color.</param>
        </member>
        <member name="M:_0rison.Color.AddCustom(System.String,System.Enum)">
            <summary>
            Store a custom Color.  Actually stores a new copy of that Color.
            </summary>
            <param name="color">The Color to store.</param>
            <param name="name">The name of the Color.</param>
        </member>
        <member name="M:_0rison.Color.AddCustom(System.UInt32,System.Enum)">
            <summary>
            Store a custom Color.  Actually stores a new copy of that Color.
            </summary>
            <param name="color">The Color to store.</param>
            <param name="name">The name of the Color.</param>
        </member>
        <member name="M:_0rison.Color.AddCustom(_0rison.Color,System.String)">
            <summary>
            Store a custom Color.  Actually stores a new copy of that Color.
            </summary>
            <param name="color">The Color to store.</param>
            <param name="name">The name of the Color.</param>
        </member>
        <member name="M:_0rison.Color.AddCustom(System.String,System.String)">
            <summary>
            Store a custom Color.  Actually stores a new copy of that Color.
            </summary>
            <param name="color">The Color to store.</param>
            <param name="name">The name of the Color.</param>
        </member>
        <member name="M:_0rison.Color.AddCustom(System.UInt32,System.String)">
            <summary>
            Store a custom Color.  Actually stores a new copy of that Color.
            </summary>
            <param name="color">The Color to store.</param>
            <param name="name">The name of the Color.</param>
        </member>
        <member name="M:_0rison.Color.Custom(System.Enum)">
            <summary>
            Get a stored custom Color.  Returns a new copy of it.
            </summary>
            <param name="name">The name of the Color stored.</param>
            <returns>A new copy of the custom Color.</returns>
        </member>
        <member name="M:_0rison.Color.Shade(System.Single)">
            <summary>
            Create a shade of gray based on a value 0 to 1.
            </summary>
            <param name="rgb">The level of gray. 0 is black, 1 is white.</param>
            <returns>A color of RGB equal to the value input for rgb.</returns>
        </member>
        <member name="M:_0rison.Color.Shade(System.Single,System.Single)">
            <summary>
            Create a shade of gray based on a value 0 to 1.
            </summary>
            <param name="rgb">The level of gray. 0 is black, 1 is white.</param>
            <param name="a">The alpha of the returned Color.</param>
            <returns>A color of RGB equal to the value input for rgb with alpha a.</returns>
        </member>
        <member name="M:_0rison.Color.FromBytes(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a Color using byte values 0 - 255.
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
            <param name="a">Alpha</param>
            <returns>A new Color.</returns>
        </member>
        <member name="P:_0rison.Color.R">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:_0rison.Color.G">
            <summary>
            Green
            </summary>
        </member>
        <member name="P:_0rison.Color.B">
            <summary>
            Blue
            </summary>
        </member>
        <member name="P:_0rison.Color.A">
            <summary>
            Alpha
            </summary>
        </member>
        <member name="P:_0rison.Color.ByteR">
            <summary>
            The bytes for Red.
            </summary>
        </member>
        <member name="P:_0rison.Color.ByteG">
            <summary>
            The bytes for Green.
            </summary>
        </member>
        <member name="P:_0rison.Color.ByteB">
            <summary>
            The bytes for Blue.
            </summary>
        </member>
        <member name="P:_0rison.Color.ByteA">
            <summary>
            The bytes for Alpha.
            </summary>
        </member>
        <member name="M:_0rison.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a new color.
            </summary>
            <param name="r">Red, 0 to 1.</param>
            <param name="g">Green, 0 to 1.</param>
            <param name="b">Blue, 0 to 1.</param>
            <param name="a">Alpha, 0 to 1.</param>
        </member>
        <member name="M:_0rison.Color.#ctor(_0rison.Color)">
            <summary>
            Create a color by copying the RGBA from another color.
            </summary>
            <param name="copy">The color to copy.</param>
        </member>
        <member name="M:_0rison.Color.#ctor(System.Xml.XmlElement)">
            <summary>
            Create a new color from an XML element.
            </summary>
            <param name="e">An XmlElement that contains attributes R, G, B, and A, from 0 to 255.</param>
        </member>
        <member name="M:_0rison.Color.Copy">
            <summary>
            Return a new color containing the channels from this color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_0rison.Color.#ctor(System.String)">
            <summary>
            Create a new color from a string.  Formats are "RGB", "RGBA", "RRGGBB", and "RRGGBBAA".
            </summary>
            <param name="hex">A string with a hex representation of each channel.</param>
        </member>
        <member name="M:_0rison.Color.#ctor(System.UInt32)">
            <summary>
            Create a new color from a hex number.  Formats are 0xRGB, 0xRRGGBB, 0xRGBA, 0xRRGGBBAA.
            </summary>
            <param name="hex">A hex number representing a color.</param>
        </member>
        <member name="P:_0rison.Color.ColorString">
            <summary>
            Get a hex string of the Color.
            </summary>
        </member>
        <member name="T:_0rison.Counter">
            <summary>
            Component used for a value with built in min, max, and wrapping capabilities. Can be useful for making
            menus.
            </summary>
        </member>
        <member name="F:_0rison.Counter.Value">
            <summary>
            The current value of the Counter.
            </summary>
        </member>
        <member name="F:_0rison.Counter.Wrap">
            <summary>
            Determines if the value should wrap around when exceeding the min or max.
            </summary>
        </member>
        <member name="F:_0rison.Counter.Cap">
            <summary>
            Determines if the value should be clamped by the minimum and maximum value.
            </summary>
        </member>
        <member name="F:_0rison.Counter.Min">
            <summary>
            The minimum value of the Counter.
            </summary>
        </member>
        <member name="F:_0rison.Counter.Max">
            <summary>
            The maximum value of the Counter.
            </summary>
        </member>
        <member name="F:_0rison.Counter.InitialValue">
            <summary>
            The starting value of the Counter.
            </summary>
        </member>
        <member name="F:_0rison.Counter.OnIncrement">
            <summary>
            A callback for when the Counter increments.
            </summary>
        </member>
        <member name="F:_0rison.Counter.OnDecrement">
            <summary>
            A callback for when the Counter decrements.
            </summary>
        </member>
        <member name="F:_0rison.Counter.OnMax">
            <summary>
            A callback for when the counter reaches the maximum value.
            </summary>
        </member>
        <member name="F:_0rison.Counter.OnMin">
            <summary>
            A callback for when the counter reaches the minimum value.
            </summary>
        </member>
        <member name="P:_0rison.Counter.AtMax">
            <summary>
            If the Counter is currently at or exceeding the maximum value.
            </summary>
        </member>
        <member name="P:_0rison.Counter.AtMin">
            <summary>
            If the Counter is currently at or exceeding the minimum value.
            </summary>
        </member>
        <member name="P:_0rison.Counter.Length">
            <summary>
            The length of the Counter from Min to Max.
            </summary>
        </member>
        <member name="M:_0rison.Counter.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a new Counter.
            </summary>
            <param name="value">The initial value.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="wrap">If the counter should wrap when it reaches the minimum or maximum values.</param>
            <param name="cap">If the counter shouldn't be allowed to exceed the minimum or maximum values.</param>
        </member>
        <member name="M:_0rison.Counter.Reset">
            <summary>
            Reset the Counter back to its initial value.
            </summary>
        </member>
        <member name="M:_0rison.Counter.Increment(System.Int32)">
            <summary>
            Increment the value of the Counter.
            </summary>
            <param name="value">How much to increment by.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:_0rison.Counter.Decrement(System.Int32)">
            <summary>
            Decrement the value of the Counter.
            </summary>
            <param name="value">How much to decrement by.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:_0rison.Counter.Update">
            <summary>
            Update the Counter.
            </summary>
        </member>
        <member name="M:_0rison.Counter.GoToMax">
            <summary>
            Force the value to the maximum value.
            </summary>
        </member>
        <member name="M:_0rison.Counter.GoToMin">
            <summary>
            Force the value to the minimum value.
            </summary>
        </member>
        <member name="T:_0rison.Coroutine">
            <summary>
            Class that manages Coroutines.
            </summary>
        </member>
        <member name="F:_0rison.Coroutine.Instance">
            <summary>
            The reference to the main Coroutine object managed by 0rison.
            </summary>
        </member>
        <member name="M:_0rison.Coroutine.#ctor">
            <summary>
            Create a new Coroutine manager.
            </summary>
        </member>
        <member name="M:_0rison.Coroutine.Start(System.Collections.IEnumerator)">
            <summary>
            Starts a new coroutine and returns an int id for that routine.
            </summary>
            <param name="routine">The coroutine to start running.</param>
            <returns>A unique int id for that routine.</returns>
        </member>
        <member name="M:_0rison.Coroutine.StopAll">
            <summary>
            Immediately clear and stop all Coroutines.
            </summary>
        </member>
        <member name="M:_0rison.Coroutine.Stop(System.Int32)">
            <summary>
            Stop a routine from running based off its int id.
            </summary>
            <param name="routineId">The id of the routine to stop.</param>
        </member>
        <member name="M:_0rison.Coroutine.Update">
            <summary>
            Updates all the routines.  The coroutine in the Game automatically runs this.
            </summary>
        </member>
        <member name="P:_0rison.Coroutine.Count">
            <summary>
            The current number of running routines.
            </summary>
        </member>
        <member name="P:_0rison.Coroutine.Running">
            <summary>
            If any routines are currently running.
            </summary>
        </member>
        <member name="M:_0rison.Coroutine.PublishEvent(System.String)">
            <summary>
            Publishes an event to the coroutine manager.  Used for WaitForEvent.
            Events are cleared on every update.
            </summary>
            <param name="id">The string id of the event.</param>
        </member>
        <member name="M:_0rison.Coroutine.PublishEvent(System.Enum)">
            <summary>
            Publishes an event to the coroutine manager.  Used for WaitForEvent.
            Events are cleared on every update.
            </summary>
            <param name="id">The enum id of the event.</param>
        </member>
        <member name="M:_0rison.Coroutine.WaitForEvent(System.String)">
            <summary>
            Waits until a specific event has been published.
            </summary>
            <param name="id">The string id of the event.</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Coroutine.WaitForEvent(System.Enum)">
            <summary>
            Waits until a specific event has been published.
            </summary>
            <param name="id">The enum id of the event.</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Coroutine.HasEvent(System.String)">
            <summary>
            Check if an event has been published.
            </summary>
            <param name="id">The string id of the event.</param>
            <returns>True if the event has been published.</returns>
        </member>
        <member name="M:_0rison.Coroutine.HasEvent(System.Enum)">
            <summary>
            Check if an event has been published.
            </summary>
            <param name="id">The enum id of the event.</param>
            <returns>True if the event has been published.</returns>
        </member>
        <member name="M:_0rison.Coroutine.WaitForSeconds(System.Single)">
            <summary>
            Waits until an amount of time has passed.
            </summary>
            <param name="seconds">The number of seconds to wait.</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Coroutine.WaitForFrames(System.Int32)">
            <summary>
            Waits until an amount of frames have passed.  Don't use this with non-fixed framerates.
            </summary>
            <param name="frames">The number of frames to wait.</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Coroutine.WaitForTween(_0rison.Tween)">
            <summary>
            Waits for a Tween to complete.
            </summary>
            <param name="tween">The Tween to wait on.</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Coroutine.WaitForDelegate(System.Func{System.Boolean})">
            <summary>
            Waits for an anonymous method that returns true or false.
            </summary>
            <param name="func">The method to run until it returns true.</param>
            <returns></returns>
        </member>
        <member name="T:_0rison.Debugger">
            <summary>
            The debug console.  Only exists when the game is built in Debug Mode.  The game will handle
            using this class.  Can be summoned by default with the ~ key.
            </summary>
        </member>
        <member name="F:_0rison.Debugger.Instance">
            <summary>
            Reference to the active instance of the debugger.
            </summary>
        </member>
        <member name="F:_0rison.Debugger.ToggleKey">
            <summary>
            The key used to summon and dismiss the debug console.
            </summary>
        </member>
        <member name="P:_0rison.Debugger.IsOpen">
            <summary>
            If the debug console is currently open.
            </summary>
        </member>
        <member name="P:_0rison.Debugger.Visible">
            <summary>
            If the debug console is currently visible.
            </summary>
        </member>
        <member name="P:_0rison.Debugger.DebugCameraX">
            <summary>
            The offset of the camera X set by debug camera mode.
            </summary>
        </member>
        <member name="P:_0rison.Debugger.DebugCameraY">
            <summary>
            The offset of the camera Y set by debug camera mode.
            </summary>
        </member>
        <member name="P:_0rison.Debugger.LiveConsoleSize">
            <summary>
            The size of the live console in lines. If 0 the live console is hidden.
            </summary>
        </member>
        <member name="M:_0rison.Debugger.Summon">
            <summary>
            Summons the Debugger.
            </summary>
        </member>
        <member name="M:_0rison.Debugger.ShowPerformance(System.Int32)">
            <summary>
            Display performance information at a specified detail level. Set to 0 to disable. 5 is the most detailed.
            </summary>
            <param name="level">The level of detail.  0 for disabled, 5 for the most detailed.</param>
        </member>
        <member name="M:_0rison.Debugger.LogTag(System.String)">
            <summary>
            Toggle the logging of a specific tag. If the tag is off, it will be turned on, and vice versa.
            </summary>
            <param name="tag">The tag to toggle.</param>
        </member>
        <member name="M:_0rison.Debugger.EnableCommandGroup(System.String)">
            <summary>
            Enables commands in a specific group to be used.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:_0rison.Debugger.DisableCommandGroup(System.String)">
            <summary>
            Disables commands in a specific group.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:_0rison.Debugger.Log(System.String,System.Object,System.Boolean)">
            <summary>
            Writes log data to the console.
            </summary>
            <param name="tag">The tag to associate the log with.</param>
            <param name="str">The string to add to the console.</param>
            <param name="timestamp">Include a timestamp with the item.</param>
        </member>
        <member name="M:_0rison.Debugger.Log(System.Object,System.Boolean)">
            <summary>
            Writes log data to the console.
            </summary>
            <param name="str">The string to add to the console.</param>
            <param name="timestamp">Include a timestamp with the item.</param>
        </member>
        <member name="M:_0rison.Debugger.Error(System.String)">
            <summary>
            Send an error message to the debugger.  Only really makes sense when the debugger is currently open,
            so probably want to call this from an _0risonCommand method when something goes wrong.
            </summary>
            <param name="message">The message to show.</param>
        </member>
        <member name="M:_0rison.Debugger.Watch(System.String,System.Object)">
            <summary>
            Add a variable to the watch list of the debug console.  This must be called on every update
            to see the latest value!
            </summary>
            <param name="str">The label for the value.</param>
            <param name="obj">The value.</param>
        </member>
        <member name="M:_0rison.Debugger.RegisterCommands">
            <summary>
            Refreshes the available commands by finding any methods tagged with the _0risonCommand attribute.
            Don't do this a lot.
            </summary>
        </member>
        <member name="F:_0rison._0risonCommand.Alias">
            <summary>
            The string that can be typed into the console to invoke this method.
            </summary>
        </member>
        <member name="F:_0rison._0risonCommand.UsageText">
            <summary>
            The text that will appear when the method is called with no parameters (note: will never show up if the method has no parameters by default.)
            </summary>
        </member>
        <member name="F:_0rison._0risonCommand.HelpText">
            <summary>
            The text that will appear along with the method when the user invokes the help command.
            </summary>
        </member>
        <member name="F:_0rison._0risonCommand.Group">
            <summary>
            The method group to associate this method with. Groups can be added or removed during runtime.
            </summary>
        </member>
        <member name="F:_0rison._0risonCommand.IsBuffered">
            <summary>
            If true the method will not run until the next update.
            </summary>
        </member>
        <member name="M:_0rison._0risonCommand.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Use named parameters to define this to make your life way easier.
            </summary>
            <param name="alias">The string that can be typed into the console to invoke this method.</param>
            <param name="usageText">The text that will appear when the method is called with no parameters (note: will never show up if the method has no parameters by default.)</param>
            <param name="helpText">The text that will appear along with the method when the user invokes the help command.</param>
            <param name="group">The method group to associate this method with. Groups can be added or removed during runtime.</param>
            <param name="isBuffered">If true the method will not run until the next update.</param>
        </member>
        <member name="T:_0rison.DebugInput">
            <summary>
            Class that is used for debug input. Wraps the Input class but only works when debug input
            is enabled.
            </summary>
        </member>
        <member name="F:_0rison.DebugInput.Instance">
            <summary>
            The active instance of DebugInput.
            </summary>
        </member>
        <member name="F:_0rison.DebugInput.Enabled">
            <summary>
            Determines if debug input will be used.  If false all checks will return false.
            </summary>
        </member>
        <member name="F:_0rison.DebugInput.Game">
            <summary>
            The parent Game.
            </summary>
        </member>
        <member name="M:_0rison.DebugInput.KeyPressed(_0rison.Key)">
            <summary>
            Check if a key was pressed.
            </summary>
            <param name="k">The key to check.</param>
            <returns>True if that key was pressed.</returns>
        </member>
        <member name="M:_0rison.DebugInput.KeyReleased(_0rison.Key)">
            <summary>
            Check if a key was released.
            </summary>
            <param name="k">The key to check.</param>
            <returns>True if that key was released.</returns>
        </member>
        <member name="M:_0rison.DebugInput.KeyDown(_0rison.Key)">
            <summary>
            Check if a key is down.
            </summary>
            <param name="k">The key to check.</param>
            <returns>True if that key is down.</returns>
        </member>
        <member name="M:_0rison.DebugInput.KeyUp(_0rison.Key)">
            <summary>
            Check if a key is up.
            </summary>
            <param name="k">The key to check.</param>
            <returns>True if that key is up.</returns>
        </member>
        <member name="T:_0rison.Draw">
            <summary>
            Class used for rendering graphics.
            </summary>
        </member>
        <member name="M:_0rison.Draw.Graphic(_0rison.Graphic,System.Single,System.Single)">
            <summary>
            Renders a Graphic to the current target Surface.
            </summary>
            <param name="graphic">The Graphic to render.</param>
            <param name="x">The x offset to position the Graphic at.</param>
            <param name="y">The y offset to position the Graphic at.</param>
        </member>
        <member name="M:_0rison.Draw.Entity(_0rison.Entity)">
            <summary>
            Renders an Entity.
            </summary>
            <param name="e">The Entity to render.</param>
        </member>
        <member name="M:_0rison.Draw.Entity(_0rison.Entity,System.Single,System.Single)">
            <summary>
            Renders an Entity at a specified X Y position.
            </summary>
            <param name="e">The Entity to render.</param>
            <param name="x">The X position to place the Entity for rendering.</param>
            <param name="y">The Y position to place the Entity for rendering.</param>
        </member>
        <member name="M:_0rison.Draw.Text(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            Draws simple Text.  Should only be used for debugging as this creates Text Graphics each time it's called!
            </summary>
            <param name="str">The string to display.</param>
            <param name="size">The size of the Text.</param>
            <param name="x">The X position to render the Text from.</param>
            <param name="y">The Y position to render the Text from.</param>
        </member>
        <member name="M:_0rison.Draw.ImageClip(_0rison.Image,_0rison.Rectangle,System.Single,System.Single)">
            <summary>
            Renders a clipped Image to the current target Surface.
            </summary>
            <param name="image">the Image to render.</param>
            <param name="clip">The portion of the Image to render.</param>
            <param name="x">The x offset to position the Image at.</param>
            <param name="y">The y offset to position the Image at.</param>
        </member>
        <member name="M:_0rison.Draw.ImageWaveX(_0rison.Image,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an Image in parts to form a horizontally waving image.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="step">How many steps to iterate through for the wave.</param>
            <param name="timer">The timer the wave should act with.</param>
            <param name="rate">The rate which the wave should move at.</param>
            <param name="amp">How far the wave will offset the image.</param>
            <param name="freq">How frequent the wave should repeat.</param>
            <param name="x">The x position to draw the image from.</param>
            <param name="y">The y position to draw the image from.</param>
        </member>
        <member name="M:_0rison.Draw.ImageWaveY(_0rison.Image,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an Image in parts to form a vertically waving image.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="step">How many steps to iterate through for the wave.</param>
            <param name="timer">The timer the wave should act with.</param>
            <param name="rate">The rate which the wave should move at.</param>
            <param name="amp">How far the wave will offset the image.</param>
            <param name="freq">How frequent the wave should repeat.</param>
            <param name="x">The x position to draw the image from.</param>
            <param name="y">The y position to draw the image from.</param>
        </member>
        <member name="M:_0rison.Draw.SetTarget(_0rison.Surface)">
            <summary>
            Change the Surface that is being rendered to.
            </summary>
            <param name="target">The new target Surface.</param>
        </member>
        <member name="M:_0rison.Draw.ResetTarget">
            <summary>
            Reset the Surface that is being rendered to back to the default for the current Game.
            </summary>
        </member>
        <member name="M:_0rison.Draw.Circle(System.Single,System.Single,System.Int32,_0rison.Color,_0rison.Color,System.Single)">
            <summary>
            Draws a circle.  Recommended to use only for debugging purposes.
            </summary>
            <param name="x">The X position of the top left of the circle.</param>
            <param name="y">The Y position of the top left of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="fill">The fill color of the circle.</param>
            <param name="outline">The outline color of the circle.</param>
            <param name="outlineThickness">The outline thickness of the circle.</param>
        </member>
        <member name="M:_0rison.Draw.Circle(System.Single,System.Single,System.Single,_0rison.Color)">
            <summary>
            Draws a circle.  Recommended to use only for debugging purposes.
            </summary>
            <param name="x">The X position of the top left of the circle.</param>
            <param name="y">The Y position of the top left of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="color">The fill color of the circle.</param>
        </member>
        <member name="M:_0rison.Draw.Rectangle(System.Single,System.Single,System.Single,System.Single,_0rison.Color,_0rison.Color,System.Single)">
            <summary>
            Draws a rectangle.  Recommended to use only for debugging purposes.
            </summary>
            <param name="x">The X position of the top left of the rectangle.</param>
            <param name="y">The Y position of the top left of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="fill">The fill color of the rectangle.</param>
            <param name="outline">The outline color of the rectangle.</param>
            <param name="outlineThickness">The outline thickness of the rectangle.</param>
        </member>
        <member name="M:_0rison.Draw.Line(System.Single,System.Single,System.Single,System.Single,_0rison.Color)">
            <summary>
            Draws a line using an OpenGL line.
            </summary>
            <param name="x1">The X position of the first point.</param>
            <param name="y1">The Y position of the first point.</param>
            <param name="x2">The X position of the second point.</param>
            <param name="y2">The Y position of the second point.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:_0rison.Draw.Line(System.Single,System.Single,System.Single,System.Single,_0rison.Color,System.Single)">
            <summary>
            Draws a line with a thickness using a quad.
            </summary>
            <param name="x1">The X position of the first point.</param>
            <param name="y1">The Y position of the first point.</param>
            <param name="x2">The X position of the second point.</param>
            <param name="y2">The Y position of the second point.</param>
            <param name="color">The color of the line.</param>
            <param name="thickness">The thickness of the line.</param>
        </member>
        <member name="M:_0rison.Draw.RoundedLine(System.Single,System.Single,System.Single,System.Single,_0rison.Color,System.Single)">
            <summary>
            Draws a line with rounded ends.
            </summary>
            <param name="x1">The X position of the first point.</param>
            <param name="y1">The Y position of the first point.</param>
            <param name="x2">The X position of the second point.</param>
            <param name="y2">The Y position of the second point.</param>
            <param name="color">The color of the line.</param>
            <param name="thickness">The thickness of the line.</param>
        </member>
        <member name="P:_0rison.Draw.Target">
            <summary>
            The current target Surface to render to.
            </summary>
        </member>
        <member name="P:_0rison.Draw.GameTarget">
            <summary>
            The surface that current Game is rendering to.
            </summary>
        </member>
        <member name="T:_0rison.Flash">
            <summary>
            Entity that acts as a screen flash.  Best used when using the constructor that allows for
            initial parameters be set:
            <example>
            Flash(Color.Red) { Alpha = 0.5, Blend = BlendMode.Add };
            </example>
            </summary>
        </member>
        <member name="F:_0rison.Flash.DefaultLifeSpan">
            <summary>
            The default life span for all created Flash Entities.
            </summary>
        </member>
        <member name="F:_0rison.Flash.Color">
            <summary>
            The Color for the Flash.
            </summary>
        </member>
        <member name="F:_0rison.Flash.Alpha">
            <summary>
            The initial alpha for the Flash.
            </summary>
        </member>
        <member name="F:_0rison.Flash.FinalAlpha">
            <summary>
            The final alpha for the Flash.
            </summary>
        </member>
        <member name="F:_0rison.Flash.Blend">
            <summary>
            The BlendMode for the Flash.
            </summary>
        </member>
        <member name="M:_0rison.Flash.#ctor(_0rison.Color)">
            <summary>
            Create a new Flash.
            </summary>
            <param name="color">The Color of the Flash.</param>
        </member>
        <member name="M:_0rison.Flash.Added">
            <summary>
            Added to the Scene.
            </summary>
        </member>
        <member name="M:_0rison.Flash.Update">
            <summary>
            Updated.
            </summary>
        </member>
        <member name="M:_0rison.Flash.Removed">
            <summary>
            Removed from the Scene.
            </summary>
        </member>
        <member name="T:_0rison.Particle">
            <summary>
            Entity that is a quick way to make a particle.  Has lots of parameters that can be set, so
            use this with that constructor where you do { } and put a bunch of properties inside.
            <example>
            var p = new Particle(0, 0, "particle.png", 100, 100) {
                LifeSpan = 30,
                Angle = 10,
                FinalScaleX = 0,
                LockScaleRatio = true
            };
            </example>
            </summary>
        </member>
        <member name="F:_0rison.Particle.Ease">
            <summary>
            The ease function to use when interpolating values.
            </summary>
        </member>
        <member name="F:_0rison.Particle.Image">
            <summary>
            The ImageSet that the Particle is rendering.
            </summary>
        </member>
        <member name="F:_0rison.Particle.DefaultLifeSpan">
            <summary>
            The default life span for all Particle Entities.
            </summary>
        </member>
        <member name="F:_0rison.Particle.SpeedX">
            <summary>
            The initial horizontal speed.
            </summary>
        </member>
        <member name="F:_0rison.Particle.SpeedY">
            <summary>
            The initial vertical speed.
            </summary>
        </member>
        <member name="F:_0rison.Particle.OffsetX">
            <summary>
            The horizontal offset from the spawn position.
            </summary>
        </member>
        <member name="F:_0rison.Particle.OffsetY">
            <summary>
            The vertical offset from the spawn position.
            </summary>
        </member>
        <member name="F:_0rison.Particle.ScaleX">
            <summary>
            The initial X scale of the rendered Image.
            </summary>
        </member>
        <member name="F:_0rison.Particle.ScaleY">
            <summary>
            The initial Y scale fo the rendered Image.
            </summary>
        </member>
        <member name="F:_0rison.Particle.Angle">
            <summary>
            The angle of the Image.
            </summary>
        </member>
        <member name="F:_0rison.Particle.Alpha">
            <summary>
            The initial alpha of the Image.
            </summary>
        </member>
        <member name="F:_0rison.Particle.ColorR">
            <summary>
            The initial Color R component of the Image.
            </summary>
        </member>
        <member name="F:_0rison.Particle.ColorG">
            <summary>
            The initial Color G component of the Image.
            </summary>
        </member>
        <member name="F:_0rison.Particle.ColorB">
            <summary>
            The initial Color B component of the Image.
            </summary>
        </member>
        <member name="F:_0rison.Particle.Delay">
            <summary>
            The amount of time that must pass before the Entity is spawned.
            </summary>
        </member>
        <member name="F:_0rison.Particle.AdvanceSteps">
            <summary>
            How many steps the particle should move by its speed when first created.
            </summary>
        </member>
        <member name="F:_0rison.Particle.MotionAngle">
            <summary>
            Determines if the image angle should be locked to the direction of the particle's movement.
            </summary>
        </member>
        <member name="F:_0rison.Particle.Blend">
            <summary>
            The BlendMode of the Image rendered.
            </summary>
        </member>
        <member name="F:_0rison.Particle.FrameOffset">
            <summary>
            The starting frame in the ImageSet.
            </summary>
        </member>
        <member name="F:_0rison.Particle.Loops">
            <summary>
            How many times to loop the ImageSet animation during the Particle's lifespan.
            </summary>
        </member>
        <member name="F:_0rison.Particle.LockScaleRatio">
            <summary>
            Determines if the ScaleY will always be locked to the ScaleX.
            </summary>
        </member>
        <member name="F:_0rison.Particle.CenterOrigin">
            <summary>
            Determines if the Image will have a centered origin.
            </summary>
        </member>
        <member name="F:_0rison.Particle.FlipX">
            <summary>
            Flip the ImageSet horizontally.
            </summary>
        </member>
        <member name="F:_0rison.Particle.FlipY">
            <summary>
            Flip the ImageSet vertically.
            </summary>
        </member>
        <member name="F:_0rison.Particle.Animate">
            <summary>
            Determines if the Particle should animate the ImageSet.
            </summary>
        </member>
        <member name="F:_0rison.Particle.Shader">
            <summary>
            The shader to use on the ImageSet.
            </summary>
        </member>
        <member name="F:_0rison.Particle.Frames">
            <summary>
            The specific frames to display for the ImageSet.  If set it will override the default FrameCount.
            </summary>
        </member>
        <member name="P:_0rison.Particle.Color">
            <summary>
            The Color of the Particle.  Overrides ColorR, ColorG, ColorB.
            </summary>
        </member>
        <member name="P:_0rison.Particle.SpeedLen">
            <summary>
            The magnitude of the particle's movement.  Overrides SpeedX and SpeedY.
            </summary>
        </member>
        <member name="P:_0rison.Particle.SpeedDir">
            <summary>
            The direction of the particle's movement.  Overrides SpeedX and SpeedY.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FrameCount">
            <summary>
            How many frames are present in the ImageSet for the Particle to animate through.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalSpeedX">
            <summary>
            The final horizontal speed of the Particle.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalSpeedY">
            <summary>
            The final vertical speed of the Particle.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalScaleX">
            <summary>
            The final X scale of the rendered Image.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalScaleY">
            <summary>
            The final Y scale of the rendered Image.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalAngle">
            <summary>
            The final angle of the rendered Image.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalX">
            <summary>
            The final X position of the Particle. If set this overrides speed values.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalY">
            <summary>
            The final Y position of the Particle. If set this overrides speed values.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalAlpha">
            <summary>
            The final Alpha of the rendered Image.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalColorR">
            <summary>
            The final Color R component of the rendered Image.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalColorG">
            <summary>
            The final Color G component of the rendered Image.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalColorB">
            <summary>
            The final Color B component of the rendered Image.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalColor">
            <summary>
            The final Color of the rendered Image.  If set will override the R G B components.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalSpeedLen">
            <summary>
            The final speed length of the Particle.  If set will override SpeedX and SpeedY.
            </summary>
        </member>
        <member name="P:_0rison.Particle.FinalSpeedDir">
            <summary>
            The final speed direction of the Particle.  If set will override SpeedX and SpeedY.
            </summary>
        </member>
        <member name="P:_0rison.Particle.OriginX">
            <summary>
            The X origin of the rendered Image.
            </summary>
        </member>
        <member name="P:_0rison.Particle.OriginY">
            <summary>
            The Y origin of the rendered Image.
            </summary>
        </member>
        <member name="M:_0rison.Particle.#ctor(System.Single,System.Single,System.String,System.Int32,System.Int32)">
            <summary>
            Create a new Particle.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="source">The source file path of the ImageSet.</param>
            <param name="width">The width of the ImageSet cell.</param>
            <param name="height">The height of the ImageSet cell.</param>
        </member>
        <member name="M:_0rison.Particle.#ctor(System.Single,System.Single,_0rison.Texture,System.Int32,System.Int32)">
            <summary>
            Create a new Particle.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="texture">The Texture to use for the ImageSet.</param>
            <param name="width">The width of the ImageSet cell.</param>
            <param name="height">The height of the ImageSet cell.</param>
        </member>
        <member name="M:_0rison.Particle.#ctor(System.Single,System.Single,_0rison.AtlasTexture,System.Int32,System.Int32)">
            <summary>
            Create a new Particle.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="texture"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:_0rison.Particle.#ctor(System.Single,System.Single)">
            <summary>
            Create a blank Particle.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
        </member>
        <member name="M:_0rison.Particle.#ctor(System.Single,System.Single,_0rison.ImageSet)">
            <summary>
            Create a new Particle.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="ImageSet">The ImageSet to use for the Particle.</param>
        </member>
        <member name="M:_0rison.Particle.Added">
            <summary>
            Added to the Scene.
            </summary>
        </member>
        <member name="M:_0rison.Particle.Start">
            <summary>
            Start the Particle.
            </summary>
        </member>
        <member name="M:_0rison.Particle.Update">
            <summary>
            Update the Particle.
            </summary>
        </member>
        <member name="M:_0rison.Particle.Removed">
            <summary>
            Removed from the Scene.
            </summary>
        </member>
        <member name="T:_0rison.Extensions">
            <summary>
            Various extensions for classes are in here.
            </summary>
        </member>
        <member name="M:_0rison.Extensions.AttributeInt(System.Xml.XmlNode,System.String)">
            <summary>
            Parse an attribute from an XmlElement as an int.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <param name="name">The name of the attribute.</param>
            <returns>An value as an int.</returns>
        </member>
        <member name="M:_0rison.Extensions.AttributeInt(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Parse an attribute from an XmlElement as an int.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <param name="name">The name of the attribute.</param>
            <param name="returnOnNull">The default value to return if that attribute doesn't exist.</param>
            <returns>The value as an int.</returns>
        </member>
        <member name="M:_0rison.Extensions.AttributeString(System.Xml.XmlNode,System.String)">
            <summary>
            Parse an attibute from an XmlElement as a string.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:_0rison.Extensions.AttributeString(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Parse an attibute from an XmlElement as a string.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <param name="name">The name of the attribute.</param>
            <param name="returnOnNull">The default value to return if that attribute doesn't exist.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:_0rison.Extensions.AttributeFloat(System.Xml.XmlNode,System.String)">
            <summary>
            Parse an attribute from an XmlElement as a float.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The value as a float.</returns>
        </member>
        <member name="M:_0rison.Extensions.AttributeFloat(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Parse an attribute from an XmlElement as a float.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <param name="name">The name of the attribute.</param>
            <param name="returnOnNull">The default value to return if that attribute doesn't exist.</param>
            <returns>The value as a float.</returns>
        </member>
        <member name="M:_0rison.Extensions.AttributeBool(System.Xml.XmlNode,System.String)">
            <summary>
            Parse an attribute from an XmlElement as a bool.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The value as a bool.</returns>
        </member>
        <member name="M:_0rison.Extensions.AttributeBool(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Parse an attribute from an XmlElement as a bool.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <param name="name">The name of the attribute.</param>
            <param name="returnOnNull">The default value to return if that attribute doesn't exist.</param>
            <returns>The value as a bool.</returns>
        </member>
        <member name="M:_0rison.Extensions.AttributeColor(System.Xml.XmlNode,System.String)">
            <summary>
            Parse an attribute from an XmlElement as a Color.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The value as a Color.</returns>
        </member>
        <member name="M:_0rison.Extensions.AttributeColor(System.Xml.XmlNode,System.String,_0rison.Color)">
            <summary>
            Parse an attribute from an XmlElement as a Color.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <param name="name">The name of the attribute.</param>
            <param name="returnOnNull">The default value to return if that attribute doesn't exist.</param>
            <returns>The value as a Color.</returns>
        </member>
        <member name="M:_0rison.Extensions.InnerInt(System.Xml.XmlNode)">
            <summary>
            Parse the inner text of an XmlElement as an int.
            </summary>
            <param name="xml">The XmlElement to parse.</param>
            <returns>The value as an int.</returns>
        </member>
        <member name="M:_0rison.Extensions.InnerFloat(System.Xml.XmlNode)">
            <summary>
            Parse the inner text of an XmlElement as a float.
            </summary>
            <param name="xml"></param>
            <returns>The value as a float.</returns>
        </member>
        <member name="M:_0rison.Extensions.InnerBool(System.Xml.XmlNode)">
            <summary>
            Parse the inner text of an XmlElement as a bool.
            </summary>
            <param name="xml"></param>
            <returns>The value as a bool.</returns>
        </member>
        <member name="M:_0rison.Extensions.InnerColor(System.Xml.XmlNode)">
            <summary>
            Parse the inner text of an XmlElement as a Color.
            </summary>
            <param name="xml"></param>
            <returns>The value as a Color.</returns>
        </member>
        <member name="M:_0rison.Extensions.Int(System.Xml.XmlAttributeCollection,System.String,System.Int32)">
            <summary>
            Parse an int from an attribute collection.
            </summary>
            <param name="a"></param>
            <param name="name">The attribute to parse.</param>
            <param name="returnOnNull">The value to return if null.</param>
            <returns>The attribute as an int.</returns>
        </member>
        <member name="M:_0rison.Extensions.ValueAsInt(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            Get a value out of a Dictionary of strings as an int, and return a default value if the key
            is not present in the Dictionary.
            </summary>
            <param name="d">The Dictionary.</param>
            <param name="key">The key to search for.</param>
            <param name="onNull">The value to return if that key is not found.</param>
            <returns>The value from the Dictionary as an int.</returns>
        </member>
        <member name="M:_0rison.Extensions.ValueAsFloat(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Single)">
            <summary>
            Get a value out of a Dictionary of strings as a a float, and return a default value if the key
            is not present in the Dictionary.
            </summary>
            <param name="d">The Dictionary.</param>
            <param name="key">The key to search for.</param>
            <param name="onNull">The value to return if that key is not found.</param>
            <returns>The value from the Dictionary as an float.</returns>
        </member>
        <member name="M:_0rison.Extensions.ValueAsBool(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Get a value out of a Dictionary of strings as a a bool, and return a default value if the key
            is not present in the Dictionary.
            </summary>
            <param name="d">The Dictionary.</param>
            <param name="key">The key to search for.</param>
            <param name="onNull">The value to return if that key is not found.</param>
            <returns>The value from the Dictionary as a bool.</returns>
        </member>
        <member name="M:_0rison.Extensions.ValueAsColor(System.Collections.Generic.Dictionary{System.String,System.String},System.String,_0rison.Color)">
            <summary>
            Get the value out of a Dictionary of strings as a Color, and return a default value if the key
            is not present in the Dictionary.
            </summary>
            <param name="d">The Dictionary.</param>
            <param name="key">The key to search for.</param>
            <param name="onNull">The value to return if that key is not found.</param>
            <returns>The value fro the Dictionary as a Color.</returns>
        </member>
        <member name="M:_0rison.Extensions.RemoveIfContains``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Removes an item from a list only if the list contains that item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="l"></param>
            <param name="element">The element to remove.</param>
            <returns>True if the element was removed successfully.</returns>
        </member>
        <member name="M:_0rison.Extensions.Add``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            Add multiple items to a list.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
            <param name="l">The list.</param>
            <param name="elements">The elements to add.</param>
        </member>
        <member name="M:_0rison.Extensions.ToColor(System.UInt32)">
            <summary>
            Converts a RGB or RGBA uint value to a Color.
            </summary>
            <param name="i">The uint.</param>
            <returns>A new Color from the uint.</returns>
        </member>
        <member name="M:_0rison.Extensions.ToColor(System.Int32)">
            <summary>
            Converts a RGB or RGBA int value to a Color.
            </summary>
            <param name="i">The int.</param>
            <returns>A new Color from the int.</returns>
        </member>
        <member name="M:_0rison.Extensions.HasFlag(System.Enum,System.Enum)">
            <summary>
            Check to see if a flags enumeration has a specific flag set.
            </summary>
            <param name="variable">Flags enumeration to check</param>
            <param name="value">Flag to check for</param>
            <returns>True if the Enum contains the flag.</returns>
        </member>
        <member name="T:_0rison.Ease">
            <summary>
            Static class with useful easer functions that can be used by Tweens.
            </summary>
        </member>
        <member name="M:_0rison.Ease.ToAndFro(System.Func{System.Single,System.Single})">
            <summary>
            Ease a value to its target and then back. Use this to wrap another easing function.
            </summary>
        </member>
        <member name="M:_0rison.Ease.ToAndFro(System.Single)">
            <summary>
            Ease a value to its target and then back.
            </summary>
        </member>
        <member name="M:_0rison.Ease.Linear(System.Single)">
            <summary>
            Linear.
            </summary>
            <param name="t">Time.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.ElasticIn(System.Single)">
            <summary>
            Elastic in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.ElasticOut(System.Single)">
            <summary>
            Elastic out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.ElasticInOut(System.Single)">
            <summary>
            Elastic in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.QuadIn(System.Single)">
            <summary>
            Quadratic in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.QuadOut(System.Single)">
            <summary>
            Quadratic out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.QuadInOut(System.Single)">
            <summary>
            Quadratic in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.CubeIn(System.Single)">
            <summary>
            Cubic in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.CubeOut(System.Single)">
            <summary>
            Cubic out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.CubeInOut(System.Single)">
            <summary>
            Cubic in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.QuartIn(System.Single)">
            <summary>
            Quart in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.QuartOut(System.Single)">
            <summary>
            Quart out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.QuartInOut(System.Single)">
            <summary>
            Quart in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.QuintIn(System.Single)">
            <summary>
            Quint in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.QuintOut(System.Single)">
            <summary>
            Quint out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.QuintInOut(System.Single)">
            <summary>
            Quint in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.SineIn(System.Single)">
            <summary>
            Sine in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.SineOut(System.Single)">
            <summary>
            Sine out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.SineInOut(System.Single)">
            <summary>
            Sine in and out
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.BounceIn(System.Single)">
            <summary>
            Bounce in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.BounceOut(System.Single)">
            <summary>
            Bounce out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.BounceInOut(System.Single)">
            <summary>
            Bounce in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.CircIn(System.Single)">
            <summary>
            Circle in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.CircOut(System.Single)">
            <summary>
            Circle out
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.CircInOut(System.Single)">
            <summary>
            Circle in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.ExpoIn(System.Single)">
            <summary>
            Exponential in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.ExpoOut(System.Single)">
            <summary>
            Exponential out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.ExpoInOut(System.Single)">
            <summary>
            Exponential in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.BackIn(System.Single)">
            <summary>
            Back in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.BackOut(System.Single)">
            <summary>
            Back out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:_0rison.Ease.BackInOut(System.Single)">
            <summary>
            Back in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:_0rison.IntExtensions.Times(System.Int32,System.Action)" -->
        <!-- Badly formed XML comment ignored for member "M:_0rison.IntExtensions.Times(System.Int32,System.Action{System.Int32})" -->
        <!-- Badly formed XML comment ignored for member "M:_0rison.IntExtensions.UpTo(System.Int32,System.Int32,System.Action{System.Int32})" -->
        <member name="M:_0rison.IntExtensions.DownTo(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Iterates from the start down to the given end value inclusive, calling the provided callback with each value in the sequence.
            </summary>
            <description>
            Used to iterate from a start value to a target value
            
            5.DownTo(0, i => Console.WriteLine(i));
            
            is the equivalent of
            
            for(var i = 5; i >= 0; i++) {
                Console.WriteLine(i);
            }
            </description>
        </member>
        <member name="M:_0rison.FloatExtensions.MapToRange(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps a value in one range to the equivalent value in another range.
            </summary>
        </member>
        <member name="M:_0rison.FloatExtensions.MapToRange(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Maps a value in one range to the equivalent value in another range.  Clamps the value to be valid within the range if clamp is specified as true.
            </summary>
        </member>
        <member name="M:_0rison.FloatExtensions.ToPercent(System.Single)">
            <summary>
            Converts a float into a percent value (1 => 100%)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates over each element in the IEnumerable, passing in the element to the provided callback.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.EachReverse``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates over each element backwards in the IEnumerable, passing in the element to the provided callback.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="iterable"></param>
            <param name="callback"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:_0rison.IEnumerableExtensions.Each``1(System.Collections.IEnumerable,System.Action{``0})" -->
        <member name="M:_0rison.IEnumerableExtensions.EachWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Iterates over each element in the IEnumerable, passing in the element and the index to the provided callback.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.EachWithIndex``1(System.Collections.IEnumerable,System.Action{``0,System.Int32})">
            <summary>
            Iterates over each element in the IEnumerable, passing in the element and the index to the provided callback.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.EachIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32})">
            <summary>
            Iterates over each element in the two dimensional array, passing in the index to the provided callback.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.EachIndex``1(System.Collections.IEnumerable,System.Action{System.Int32})">
            <summary>
            Iterates over each element in the two dimensional array, passing in the index to the provided callback.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.InParallelWith``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Action{``0,``1})">
            <summary>
            Iterates over each element in both the iterable1 and iterable2 collections, passing in the current element of each collection into the provided callback.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.InParallelWith(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Action{System.Object,System.Object})">
            <summary>
            Iterates over each element in both the iterable1 and iterable2 collections, passing in the current element of each collection into the provided callback.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.ExceptWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Matches all elements where the given condition is not true. This is the
            opposite of Linq's Where clause.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the first element that has the smallest value (as determined by the selector) within the collection 
            (as determined by the comparer).  This is equivalent to using Min except that the element itself
            is returned, and not the value used to make the Min determination.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the first element that has the smallest value (as determined by the selector) within the collection 
            (as determined by the comparer).  This is equivalent to using Min except that the element itself
            is returned, and not the value used to make the Min determination.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the first element that has the largest value (as determined by the selector) within the collection 
            (as determined by the comparer).  This is equivalent to using Max except that the element itself
            is returned, and not the value used to make the Max determination.
            </summary>
        </member>
        <member name="M:_0rison.IEnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the first element that has the largest value (as determined by the selector) within the collection 
            (as determined by the comparer).  This is equivalent to using Max except that the element itself
            is returned, and not the value used to make the Max determination.
            </summary>
        </member>
        <member name="M:_0rison.ArrayExtensions.IndexOf``1(``0[],``0)">
            <summary>
            Returns the first index in the array where the target exists.  If the target cannot be found, returns -1.
            </summary>
        </member>
        <member name="M:_0rison.ArrayExtensions.FromIndexToEnd``1(``0[],System.Int32)">
            <summary>
            Returns a sub-section of the current array, starting at the specified index and continuing to the end of the array.
            </summary>
        </member>
        <member name="M:_0rison.ArrayExtensions.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            Wrapper for System.Array.FindIndex to allow it to be called directly on an array.
            </summary>
        </member>
        <member name="M:_0rison.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>
            Wrapper for System.Array.FindIndex to allow it to be called directly on an array.
            </summary>
        </member>
        <member name="M:_0rison.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Wrapper for System.Array.FindIndex to allow it to be called directly on an array.
            </summary>
        </member>
        <member name="M:_0rison.ArrayExtensions.RandomElement``1(``0[])">
            Returns a randomly selected item from the array
        </member>
        <member name="M:_0rison.ArrayExtensions.RandomElement``1(``0[],System.Single[])">
            Returns a randomly selected item from the array determined by a float array of weights
        </member>
        <!-- Badly formed XML comment ignored for member "M:_0rison.ArrayExtensions.RandomElement``1(``0[],System.Collections.Generic.List{System.Single})" -->
        <member name="M:_0rison.ArrayExtensions.EachWithIndex``1(``0[0:,0:],System.Action{``0,System.Int32,System.Int32})">
            <summary>
            Iterates over each element in the two dimensional array, passing in the element and the index to the provided callback.
            </summary>
        </member>
        <member name="M:_0rison.ArrayExtensions.EachIndex``1(``0[0:,0:],System.Action{System.Int32,System.Int32})">
            <summary>
            Iterates over each element in the two dimensional array, passing in the index to the provided callback.
            </summary>
        </member>
        <member name="M:_0rison.ListExtensions.FromIndexToEnd``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Returns a sub-section of the current list, starting at the specified index and continuing to the end of the list.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:_0rison.ListExtensions.IndexOf``1(System.Collections.Generic.IList{``0},``0)" -->
        <!-- Badly formed XML comment ignored for member "M:_0rison.ListExtensions.RandomElement``1(System.Collections.Generic.IList{``0})" -->
        <member name="M:_0rison.ListExtensions.RandomElementOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a randomly selected item from IList or default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:_0rison.ListExtensions.RandomElement``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{System.Single})" -->
        <member name="M:_0rison.ListExtensions.InsertOrAdd``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            Attempts to Insert the item, but Adds it if the index is invalid.
            </summary>
        </member>
        <member name="M:_0rison.ListExtensions.ElementAfter``1(System.Collections.Generic.IList{``0},``0,System.Boolean)">
            <summary>
            Returns the element after the given element. This can wrap. If the element is the only one in the list, itself is returned.
            </summary>
        </member>
        <member name="M:_0rison.ListExtensions.ElementBefore``1(System.Collections.Generic.IList{``0},``0,System.Boolean)">
            <summary>
            Returns the element before the given element. This can wrap. If the element is the only one in the list, itself is returned.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:_0rison.DictionaryExtensions.Each``2(System.Collections.Generic.Dictionary{``0,``1},System.Action{``0,``1})" -->
        <!-- Badly formed XML comment ignored for member "M:_0rison.DictionaryExtensions.EachWithIndex``2(System.Collections.Generic.Dictionary{``0,``1},System.Action{``0,``1,System.Int32})" -->
        <member name="M:_0rison.StringExtensions.Interpolate(System.String,System.Object[])">
            <summary>
            Interpolates the arguments into the string using string.Format
            </summary>
            <param name="formatString">The string to be interpolated into</param>
            <param name="args">The values to be interpolated into the string </param>
        </member>
        <member name="M:_0rison.StringExtensions.Fmt(System.String,System.Object[])">
            <summary>
            Alias for <see cref="M:_0rison.StringExtensions.Interpolate(System.String,System.Object[])"/> for the typing averse
            </summary>
            <param name="formatString">The string to be interpolated into</param>
            <param name="args">The values to be interpolated into the string </param>
        </member>
        <member name="M:_0rison.TypeExtensions.Subclasses(System.Type)">
            <summary>
            Returns an array of all concrete subclasses of the provided type.
            </summary>
        </member>
        <member name="M:_0rison.TypeExtensions.TypeAndSubclasses(System.Type)">
            <summary>
            Returns an array of the provided type and all concrete subclasses of that type.
            </summary>
        </member>
        <member name="M:_0rison.EnumExtensions.Next``1(System.Enum)">
            <summary>
            Returns the next enum value wrapping to the first value if passed the last
            </summary>
        </member>
        <member name="T:_0rison.Line2">
            <summary>
            Class for a simple line with two points.
            </summary>
        </member>
        <member name="F:_0rison.Line2.X1">
            <summary>
            The X position for the first point.
            </summary>
        </member>
        <member name="F:_0rison.Line2.Y1">
            <summary>
            The Y position for the first point.
            </summary>
        </member>
        <member name="F:_0rison.Line2.X2">
            <summary>
            The X position for the second point.
            </summary>
        </member>
        <member name="F:_0rison.Line2.Y2">
            <summary>
            The Y position for the second point.
            </summary>
        </member>
        <member name="P:_0rison.Line2.PointA">
            <summary>
            The first point of the line as a vector2.
            </summary>
        </member>
        <member name="P:_0rison.Line2.PointB">
            <summary>
            The second point of a line as a vector2.
            </summary>
        </member>
        <member name="P:_0rison.Line2.A">
            <summary>
            A in the line equation Ax + By = C.
            </summary>
        </member>
        <member name="P:_0rison.Line2.B">
            <summary>
            B in the line equation Ax + By = C.
            </summary>
        </member>
        <member name="P:_0rison.Line2.C">
            <summary>
            C in the line equation Ax + By = C.
            </summary>
        </member>
        <member name="M:_0rison.Line2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a new Line2.
            </summary>
            <param name="x1">X of the first point</param>
            <param name="y1">Y of the first point</param>
            <param name="x2">X of the second point</param>
            <param name="y2">Y of the second point</param>
        </member>
        <member name="M:_0rison.Line2.#ctor(_0rison.Vector2,_0rison.Vector2)">
            <summary>
            Create a new Line2.
            </summary>
            <param name="xy1">X,Y of the first point</param>
            <param name="xy2">X,Y of the second point</param>
        </member>
        <member name="M:_0rison.Line2.Intersects(_0rison.Line2)">
            <summary>
            Intersection test on another line. (http://ideone.com/PnPJgb)
            </summary>
            <param name="other">The line to test against</param>
            <returns></returns>
        </member>
        <member name="M:_0rison.Line2.IntersectsRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Check intersection against a rectangle.
            </summary>
            <param name="x">X Position of the rectangle.</param>
            <param name="y">Y Position of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <returns>True if the line intersects any line on the rectangle, or if the line is inside the rectangle.</returns>
        </member>
        <member name="M:_0rison.Line2.IntersectCircle(_0rison.Vector2,System.Single)">
            <summary>
            Check the intersection against a circle.
            </summary>
            <param name="circle"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="T:_0rison.MathHelper">
            <summary>
            Contains commonly used precalculated values and mathematical operations.
            </summary>
        </member>
        <member name="F:_0rison.MathHelper.E">
            <summary>
            Represents the mathematical constant e(2.71828175).
            </summary>
        </member>
        <member name="F:_0rison.MathHelper.Log10E">
            <summary>
            Represents the log base ten of e(0.4342945).
            </summary>
        </member>
        <member name="F:_0rison.MathHelper.Log2E">
            <summary>
            Represents the log base two of e(1.442695).
            </summary>
        </member>
        <member name="F:_0rison.MathHelper.Pi">
            <summary>
            Represents the value of pi(3.14159274).
            </summary>
        </member>
        <member name="F:_0rison.MathHelper.PiOver2">
            <summary>
            Represents the value of pi divided by two(1.57079637).
            </summary>
        </member>
        <member name="F:_0rison.MathHelper.PiOver4">
            <summary>
            Represents the value of pi divided by four(0.7853982).
            </summary>
        </member>
        <member name="F:_0rison.MathHelper.TwoPi">
            <summary>
            Represents the value of pi times two(6.28318548).
            </summary>
        </member>
        <member name="M:_0rison.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
            <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
            <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
            <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
            <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
            <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
        </member>
        <member name="M:_0rison.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:_0rison.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
            <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:_0rison.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
            <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:_0rison.MathHelper.Distance(System.Single,System.Single)">
            <summary>
            Calculates the absolute value of the difference of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>Distance between the two values.</returns>
        </member>
        <member name="M:_0rison.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position.</param>
            <param name="tangent1">Source tangent.</param>
            <param name="value2">Source position.</param>
            <param name="tangent2">Source tangent.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:_0rison.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns> 
            <remarks>This method performs the linear interpolation based on the following formula.
            <c>value1 + (value2 - value1) * amount</c>
            Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.
            </remarks>
        </member>
        <member name="M:_0rison.MathHelper.Max(System.Single,System.Single)">
            <summary>
            Returns the greater of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:_0rison.MathHelper.Min(System.Single,System.Single)">
            <summary>
            Returns the lesser of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:_0rison.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Weighting value.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:_0rison.MathHelper.ToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
            <remarks>
            This method uses double precission internally,
            though it returns single float
            Factor = 180 / pi
            </remarks>
        </member>
        <member name="M:_0rison.MathHelper.ToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
            <remarks>
            This method uses double precission internally,
            though it returns single float
            Factor = pi / 180
            </remarks>
        </member>
        <member name="M:_0rison.MathHelper.WrapAngle(System.Single)">
            <summary>
            Reduces a given angle to a value between π and -π.
            </summary>
            <param name="angle">The angle to reduce, in radians.</param>
            <returns>The new angle, in radians.</returns>
        </member>
        <member name="M:_0rison.MathHelper.IsPowerOfTwo(System.Int32)">
            <summary>
            Determines if value is powered by two.
            </summary>
            <param name="value">A value.</param>
            <returns><c>true</c> if <c>value</c> is powered by two; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:_0rison.Matrix">
            <summary>
            Struct for representing a Matrix.
            </summary>
        </member>
        <member name="M:_0rison.Matrix.FindDeterminants(_0rison.Matrix@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Helper method for using the Laplace expansion theorem using two rows expansions to calculate major and 
            minor determinants of a 4x4 matrix. This method is used for inverting a matrix.
            </summary>
        </member>
        <member name="T:_0rison.Quaternion">
            <summary>
            Struct for representing a Quaternion.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:_0rison.OgmoProject" -->
        <member name="F:_0rison.OgmoProject.DisplayGrids">
            <summary>
            Determines if grid layers will render in the game.  Only applies at loading time.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.ImagePath">
            <summary>
            The default image path to search for tilemaps in.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.UseCameraBounds">
            <summary>
            Determines if loaded levels will use camera bounds in the Scene.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.UseAtlas">
            <summary>
            Determines if tilemaps are located in an Atlas.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.BackgroundColor">
            <summary>
            The default background color of the Ogmo Project.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.GridColor">
            <summary>
            The default background grid color of the Ogmo Project.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.Layers">
            <summary>
            The known layers loaded from the Ogmo Editor oep file.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.TileMaps">
            <summary>
            Mapping the tile layers to file paths.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.Entities">
            <summary>
            The entities stored to create tilemaps and grids.  Cleared every time LoadLevel is called.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.CreationMethodName">
            <summary>
            The name of the method to use for creating Entities when loading an .oel file into a Scene.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.BaseTileDepth">
            <summary>
            The drawing layer to place the first loaded tile map on.
            </summary>
        </member>
        <member name="F:_0rison.OgmoProject.TileDepthIncrement">
            <summary>
            Determines the drawing layers for each subsequently loaded tile map.  For example, the first
            tilemap will be at Layer 0, the second at Layer 100, the third at Layer 200, etc.
            </summary>
        </member>
        <member name="P:_0rison.OgmoProject.CurrentLevel">
            <summary>
            The level data last loaded with LoadLevel()
            </summary>
        </member>
        <member name="M:_0rison.OgmoProject.#ctor(System.String,System.String)">
            <summary>
            Create an OgmoProject from a source .oep file.
            </summary>
            <param name="source">The path to the .oep file.</param>
            <param name="imagePath">The default image path to use for loading tilemaps.</param>
        </member>
        <member name="M:_0rison.OgmoProject.RemapAsset(System.String,System.String)">
            <summary>
            Assign a replacement asset for a Tilemap when LoadLevel is called.
            </summary>
            <param name="searchPath">The asset path to find (searches at the end of the string!)</param>
            <param name="replacement">The full path to replace the matching asset with.</param>
        </member>
        <member name="M:_0rison.OgmoProject.GetValue``1(System.String,System.String)">
            <summary>
            Get a value from an Ogmo level.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="name">The name of the value.</param>
            <param name="data">The level data to use.  If left blank will use the CurrentLevel.</param>
            <returns>The value cast to type T.</returns>
        </member>
        <member name="M:_0rison.OgmoProject.GetValue``1(System.Enum,System.String)">
            <summary>
            Get a value from an Ogmo level.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="name">The name of the value.</param>
            <param name="source">The level data to use.  If left blank will use the CurrentLevel.</param>
            <returns>The value cast to type T.</returns>
        </member>
        <member name="M:_0rison.OgmoProject.LoadLevel(System.String,_0rison.Scene)">
            <summary>
            Load level data from a string into a Scene.
            </summary>
            <param name="data">The level data to load.</param>
            <param name="scene">The Scene to load into.</param>
        </member>
        <member name="M:_0rison.OgmoProject.LoadLevelFromFile(System.String,_0rison.Scene)">
            <summary>
            Load data into a Scene from a source .oel file.
            </summary>
            <param name="path">The oel to load.</param>
            <param name="scene">The Scene to load into.</param>
        </member>
        <member name="M:_0rison.OgmoProject.RegisterTag(System.Int32,System.String)">
            <summary>
            Register a collision tag on a grid layer loaded from the oel file.
            </summary>
            <param name="tag">The tag to use.</param>
            <param name="layerName">The layer name that should use the tag.</param>
        </member>
        <member name="M:_0rison.OgmoProject.RegisterTag(System.Enum,System.String)">
            <summary>
            Register a collision tag on a grid layer loaded from the oel file.
            </summary>
            <param name="tag">The enum tag to use. (Casts to int!)</param>
            <param name="layerName">The layer name that should use the tag.</param>
        </member>
        <member name="M:_0rison.OgmoProject.GetEntityFromLayerName(System.String)">
            <summary>
            Get the Entity that was created for a specific Ogmo layer.
            </summary>
            <param name="layerName">The name of the layer to find.</param>
            <returns>The Entity created for that layer.</returns>
        </member>
        <member name="M:_0rison.OgmoProject.GetLayerNames">
            <summary>
            Get a list of all the known layer names from the .oep file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:_0rison.OgmoLayer">
            <summary>
            Class representing a layer loaded from Ogmo.
            </summary>
        </member>
        <member name="F:_0rison.OgmoLayer.Name">
            <summary>
            The name of the layer.
            </summary>
        </member>
        <member name="F:_0rison.OgmoLayer.ExportMode">
            <summary>
            The export mode of the layer from Ogmo Editor.
            </summary>
        </member>
        <member name="F:_0rison.OgmoLayer.Type">
            <summary>
            The type of the layer from Ogmo Editor.
            </summary>
        </member>
        <member name="F:_0rison.OgmoLayer.GridWidth">
            <summary>
            The width of each grid cell.
            </summary>
        </member>
        <member name="F:_0rison.OgmoLayer.GridHeight">
            <summary>
            The height of each grid cell.
            </summary>
        </member>
        <member name="F:_0rison.OgmoLayer.ScrollX">
            <summary>
            The horizontal parallax of the layer.
            </summary>
        </member>
        <member name="F:_0rison.OgmoLayer.ScrollY">
            <summary>
            The vertical parallax of the layer.
            </summary>
        </member>
        <member name="F:_0rison.OgmoLayer.Color">
            <summary>
            The color of layer from Ogmo Editor.
            </summary>
        </member>
        <member name="M:_0rison.OgmoLayer.#ctor(System.String,System.String)">
            <summary>
            Create a new OgmoLayer.
            </summary>
            <param name="name">The name of the layer.</param>
            <param name="type">The type of the layer.</param>
        </member>
        <member name="M:_0rison.OgmoLayer.#ctor(System.Xml.XmlElement)">
            <summary>
            Create a new OgmoLayer by parsing an XmlElement.
            </summary>
            <param name="xml">An XmlElement from an Ogmo Editor project file.</param>
        </member>
        <member name="T:_0rison.OgmoData">
            <summary>
            A simple data class that just extends Dictionary.
            </summary>
        </member>
        <member name="T:_0rison.Point">
            <summary>
            Struct for representing a Point.
            </summary>
        </member>
        <member name="T:_0rison.Rand">
            <summary>
            Class full of random number generation related functions.
            </summary>
        </member>
        <member name="P:_0rison.Rand.Value">
            <summary>
            A raw random value.
            </summary>
        </member>
        <member name="P:_0rison.Rand.Angle">
            <summary>
            A random float from 0 to 360.
            </summary>
        </member>
        <member name="P:_0rison.Rand.Direction">
            <summary>
            Generate a random direction.
            </summary>
        </member>
        <member name="P:_0rison.Rand.Bool">
            <summary>
            Generate a random bool.
            </summary>
        </member>
        <member name="P:_0rison.Rand.Color">
            <summary>
            Generate a random Color.
            </summary>
        </member>
        <member name="P:_0rison.Rand.ColorAlpha">
            <summary>
            Generate a random Color with a random Alpha.
            </summary>
        </member>
        <member name="P:_0rison.Rand.Flip">
            <summary>
            Generate a random bool.
            </summary>
        </member>
        <member name="P:_0rison.Rand.Sign">
            <summary>
            Generate a random sign.
            </summary>
        </member>
        <member name="M:_0rison.Rand.PushSeed(System.Int32)">
            <summary>
            Push a random seed to use for all random number generation.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:_0rison.Rand.PopSeed">
            <summary>
            Pop the top random seed.
            </summary>
            <returns>The random seed popped.</returns>
        </member>
        <member name="M:_0rison.Rand.Int">
            <summary>
            Generate a random int.
            </summary>
            <returns>A random int.</returns>
        </member>
        <member name="M:_0rison.Rand.Int(System.Int32)">
            <summary>
            Generate a random int.
            </summary>
            <param name="max">Maximum value.</param>
            <returns>A random int.</returns>
        </member>
        <member name="M:_0rison.Rand.Int(System.Int32,System.Int32)">
            <summary>
            Generate a random int.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>A random int.</returns>
        </member>
        <member name="M:_0rison.Rand.Float">
            <summary>
            Generate a random float.
            </summary>
            <returns>A random float.</returns>
        </member>
        <member name="M:_0rison.Rand.Float(System.Single)">
            <summary>
            Generate a random float.
            </summary>
            <param name="max">The maximum value.</param>
            <returns>A random float.</returns>
        </member>
        <member name="M:_0rison.Rand.Float(System.Single,System.Single)">
            <summary>
            Generate a random float.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A random float.</returns>
        </member>
        <member name="M:_0rison.Rand.Float(_0rison.Range)">
            <summary>
            Generate a random float.
            </summary>
            <param name="range">A Range that will set the minimum and maximum.</param>
            <returns>A random float.</returns>
        </member>
        <member name="M:_0rison.Rand.CircleXY(System.Single)">
            <summary>
            Generate a random point inside of a circle.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <returns>A random Vector2 position inside the radius.</returns>
        </member>
        <member name="M:_0rison.Rand.CircleXY(System.Single,System.Single)">
            <summary>
            Generate a random point inside a circle.
            </summary>
            <param name="radiusMin">The minimum radius.</param>
            <param name="radiusMax">The maximum radius.</param>
            <returns>A random Vector2 position inside the radius.</returns>
        </member>
        <member name="M:_0rison.Rand.CircleXY(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generate a random point inside a circle.
            </summary>
            <param name="radiusMin">The minimum radius.</param>
            <param name="radiusMax">The maximum radius.</param>
            <param name="angleMin">The minimum angle.</param>
            <param name="angleMax">The maximum angle.</param>
            <returns>A random Vector2 position inside the radius and angle.</returns>
        </member>
        <member name="M:_0rison.Rand.XY(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generate a random point in a minimum and maximum set.
            </summary>
            <param name="xMin">The minimum X value.</param>
            <param name="xMax">The maximum X value.</param>
            <param name="yMin">The minimum Y value.</param>
            <param name="yMax">The maximum Y value.</param>
            <returns>A random position inside the set.</returns>
        </member>
        <member name="M:_0rison.Rand.XY(_0rison.Rectangle)">
            <summary>
            Generate a random point in a Rectangle.
            </summary>
            <param name="rect">The Rectangle the point will be in.</param>
            <returns>A random position inside the Rectangle.</returns>
        </member>
        <member name="M:_0rison.Rand.XY(System.Single,System.Single)">
            <summary>
            Generate a random point in a maximum set.
            </summary>
            <param name="xMax">The maximum X value.</param>
            <param name="yMax">The maximum Y value.</param>
            <returns>A random position from 0, 0 to the maximum values.</returns>
        </member>
        <member name="M:_0rison.Rand.IntXY(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate a random integer point in a minimum and maximum set.
            </summary>
            <param name="xMin">The minimum X value.</param>
            <param name="xMax">The maximum X value.</param>
            <param name="yMin">The minimum Y value.</param>
            <param name="yMax">The maximum Y value.</param>
            <returns>A random integer position inside the set.</returns>
        </member>
        <member name="M:_0rison.Rand.IntXY(System.Int32,System.Int32)">
            <summary>
            Generate a random integer point in a minimum and maximum set.
            </summary>
            <param name="xMax">The maximum X value.</param>
            <param name="yMax">The maximum Y value.</param>
            <returns>A random integer position inside the set.</returns>
        </member>
        <member name="M:_0rison.Rand.Choose``1(``0[])">
            <summary>
            Choose an element out of an array of objects.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="choices">The array of possible choices.</param>
            <returns>The chosen object.</returns>
        </member>
        <member name="M:_0rison.Rand.ChooseElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Choose an element out of an array of objects.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="choices">The array of possible choices.</param>
            <returns>The chosen object.</returns>
        </member>
        <member name="M:_0rison.Rand.Choose(System.String)">
            <summary>
            Choose a random character out of a string.
            </summary>
            <param name="str">The string to choose from.</param>
            <returns>The chosen character as a string.</returns>
        </member>
        <member name="M:_0rison.Rand.ChooseRemove``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Choose a random element in a collection of objects, and remove the object from the collection.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="choices">The collection of possible choices.</param>
            <returns>The chosen element.</returns>
        </member>
        <member name="M:_0rison.Rand.Shuffle``1(``0[])">
            <summary>
            Shuffle an array of objects.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="list">The array to shuffle.</param>
        </member>
        <member name="M:_0rison.Rand.Shuffle``1(System.Collections.Generic.List{``0})">
            <summary>
            Shuffle a list of objects.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="list">The list to shuffle.</param>
        </member>
        <member name="M:_0rison.Rand.Chance(System.Single)">
            <summary>
            A random percent chance from 0 to 100.
            </summary>
            <param name="percent">Percent from 0 to 100.</param>
            <returns>True if it succeeded.</returns>
        </member>
        <member name="M:_0rison.Rand.String(System.Int32,System.String)">
            <summary>
            Generate a random string.
            </summary>
            <param name="length">The length of the string to return.</param>
            <param name="charSet">The set of characters to pull from.</param>
            <returns>A string of randomly chosen characters.</returns>
        </member>
        <member name="T:_0rison.Range">
            <summary>
            Class used to represent a range using a min and max.
            </summary>
        </member>
        <member name="F:_0rison.Range.Min">
            <summary>
            The minimum of the range.
            </summary>
        </member>
        <member name="F:_0rison.Range.Max">
            <summary>
            The maximum of the range.
            </summary>
        </member>
        <member name="P:_0rison.Range.RandInt">
            <summary>
            Get a random int from the range.  Floors the Min and Ceils the Max.
            </summary>
            <returns>A random int.</returns>
        </member>
        <member name="P:_0rison.Range.RandFloat">
            <summary>
            Get a random float from the range.
            </summary>
            <returns>A random float.</returns>
        </member>
        <member name="M:_0rison.Range.#ctor(System.Single,System.Single)">
            <summary>
            Create a new Range.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:_0rison.Range.#ctor(System.Single)">
            <summary>
            Create a new Range.
            </summary>
            <param name="max">Maximum value.  Minimum is -Maximum.</param>
        </member>
        <member name="M:_0rison.Range.Overlap(_0rison.Range)">
            <summary>
            Test if this Range overlaps another Range.
            </summary>
            <param name="r">The Range to test against.</param>
            <returns>True if the ranges overlap.</returns>
        </member>
        <member name="T:_0rison.Rectangle">
            <summary>
            Struct for representing a Rectangle.
            </summary>
        </member>
        <member name="T:_0rison.Ref">
            <summary>
            Class of utility functions for ref related things.
            </summary>
        </member>
        <member name="M:_0rison.Ref.Swap``1(``0@,``0@)">
            <summary>
            Swap two values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
        </member>
        <member name="M:_0rison.Ref.Shift``1(``0@,``0@,``0@)">
            <summary>
            Shift three values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
            <param name="c">Third value.</param>
        </member>
        <member name="M:_0rison.Ref.Shift``1(``0@,``0@,``0@,``0@)">
            <summary>
            Shift four values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
            <param name="c">Third value.</param>
            <param name="d">Fourth value.</param>
        </member>
        <member name="M:_0rison.Ref.Shift``1(``0@,``0@,``0@,``0@,``0@)">
            <summary>
            Shift five values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
            <param name="c">Third value.</param>
            <param name="d">Fourth value.</param>
            <param name="e">Fifth value.</param>
        </member>
        <member name="M:_0rison.Ref.Shift``1(``0@,``0@,``0@,``0@,``0@,``0@)">
            <summary>
            Shift six values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
            <param name="c">Third value.</param>
            <param name="d">Fourth value.</param>
            <param name="e">Fifth value.</param>
            <param name="f">Sixth value.</param>
        </member>
        <member name="M:_0rison.Ref.EqualsAny``1(``0@,``0[])">
            <summary>
            Test if a value equals any value on a list.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="p">The value to check for.</param>
            <param name="values">The values to check.</param>
            <returns>True if any of the values equal the value to check for.</returns>
        </member>
        <member name="M:_0rison.Ref.EqualsAll``1(``0@,``0[])">
            <summary>
            Test if a value equals any value on a list.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="p">The value to check for.</param>
            <param name="values">The values to check.</param>
            <returns>True if any of the values equal the value to check for.</returns>
        </member>
        <member name="T:_0rison.Util">
            <summary>
            Main utility function class. Various useful functions for 2d game development and 0rison stuff.
            </summary>
        </member>
        <member name="F:_0rison.Util.RIGHT">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:_0rison.Util.UP">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:_0rison.Util.LEFT">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:_0rison.Util.DOWN">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:_0rison.Util.UP_RIGHT">
            <summary>
            Up Right
            </summary>
        </member>
        <member name="F:_0rison.Util.UP_LEFT">
            <summary>
            Up Left
            </summary>
        </member>
        <member name="F:_0rison.Util.DOWN_RIGHT">
            <summary>
            Down Right
            </summary>
        </member>
        <member name="F:_0rison.Util.DOWN_LEFT">
            <summary>
            Down Left
            </summary>
        </member>
        <member name="F:_0rison.Util.DEG_TO_RAD">
            <summary>
            Degrees to Radians
            </summary>
        </member>
        <member name="F:_0rison.Util.RAD_TO_DEG">
            <summary>
            Radians to Degrees
            </summary>
        </member>
        <member name="M:_0rison.Util.Log(System.Object)">
            <summary>
            A shortcut function to send text to the debugger log.
            </summary>
            <param name="str">The string to send.</param>
        </member>
        <member name="M:_0rison.Util.LogTag(System.String,System.Object)">
            <summary>
            A shortcut function to send text to the debugger log.
            </summary>
            <param name="tag">The tag to log with.</param>
            <param name="str">The string to send.</param>
        </member>
        <member name="M:_0rison.Util.ShowDebugger">
            <summary>
            Summon the Debugger.
            </summary>
        </member>
        <member name="M:_0rison.Util.Watch(System.String,System.Object)">
            <summary>
            A shortcut function to watch a value in the debugger. This must be called every update to
            keep the value updated (not an automatic watch.)
            </summary>
            <param name="str">The name of the value.</param>
            <param name="obj">The value.</param>
        </member>
        <member name="M:_0rison.Util.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolate between two values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="t">The progress of the interpolation.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:_0rison.Util.LerpSet(System.Single,System.Single[])">
            <summary>
            Interpolate through a set of numbers.
            </summary>
            <param name="amount">The amount of completion of the lerp. (0 - 1)</param>
            <param name="numbers">The numbers to interpolate through.</param>
            <returns>The interpolated number.</returns>
        </member>
        <member name="M:_0rison.Util.LerpSetLoop(System.Single,System.Single[])">
            <summary>
            Interpolate through a looping set of numbers.
            </summary>
            <param name="amount">The amount of completion of the lerp. (0 - 1)</param>
            <param name="numbers">The numbers to interpolate through.</param>
            <returns>The interpolated number.</returns>
        </member>
        <member name="M:_0rison.Util.LerpColor(_0rison.Color,_0rison.Color,System.Single)">
            <summary>
            Interpolate from one Color to another.
            </summary>
            <param name="from">The start Color.</param>
            <param name="to">The end Color.</param>
            <param name="amount">The amount of completion on the lerp. (0 - 1)</param>
            <returns>The interpolated Color.</returns>
        </member>
        <member name="M:_0rison.Util.LerpColor(System.Single,_0rison.Color[])">
            <summary>
            Interpolate through a set of Colors.
            </summary>
            <param name="amount">The amount of completion on the lerp. (0 - 1)</param>
            <param name="colors">The Colors to interpolate through.</param>
            <returns>The interpolated Color.</returns>
        </member>
        <member name="M:_0rison.Util.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value inside a range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">Min clamp.</param>
            <param name="max">Max clamp.</param>
            <returns>The new value between min and max.</returns>
        </member>
        <member name="M:_0rison.Util.Clamp(_0rison.Vector2,_0rison.Vector2,_0rison.Vector2)">
            <summary>
            Clamps a value inside a range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">Min clamp.</param>
            <param name="max">Max clamp.</param>
            <returns>The new value between min and max.</returns>
        </member>
        <member name="M:_0rison.Util.Clamp(_0rison.Vector2,_0rison.Vector2)">
            <summary>
            Clamps a value inside a range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="max">Max clamp.</param>
            <returns>The new value between 0 and max.</returns>
        </member>
        <member name="M:_0rison.Util.Clamp(System.Single,System.Single)">
            <summary>
            Clamps a value inside a range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="max">Max clamp</param>
            <returns>The new value between 0 and max.</returns>
        </member>
        <member name="M:_0rison.Util.Clamp(System.Single,_0rison.Range)">
            <summary>
            Clamps a value inside a range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="range">The range.</param>
            <returns>The clamped value in the range.</returns>
        </member>
        <member name="M:_0rison.Util.ApproachAngle(System.Single,System.Single,System.Single)">
            <summary>
            Steps an angle value toward a target based on a certain amount.
            </summary>
            <param name="from">The angle value to step.</param>
            <param name="to">The target value to approach.</param>
            <param name="amount">The amount to approach by.</param>
            <returns>The new angle value approaching the target from 0 to 360.</returns>
        </member>
        <member name="M:_0rison.Util.Approach(System.Single,System.Single,System.Single)">
            <summary>
            Steps a value toward a target based on a certain amount.
            </summary>
            <param name="val">The value to step.</param>
            <param name="target">The target to approach.</param>
            <param name="maxMove">The maximum increment toward the target.</param>
            <returns>The new value approaching the target.</returns>
        </member>
        <member name="M:_0rison.Util.Approach(_0rison.Vector2,_0rison.Vector2,_0rison.Vector2)">
            <summary>
            Steps a value toward a target based on a certain amount.
            </summary>
            <param name="val">The value to step.</param>
            <param name="target">The target to approach.</param>
            <param name="maxMove">The maximum increment toward the target.</param>
            <returns>The new value approaching the target.</returns>
        </member>
        <member name="M:_0rison.Util.SnapToGrid(System.Single,System.Single,System.Single)">
            <summary>
            Snaps a value to the nearest value on a grid.
            </summary>
            <param name="value">The input value.</param>
            <param name="increment">The size of each grid space.</param>
            <param name="offset">The offset to apply after the snap.</param>
            <returns>The snapped value.</returns>
        </member>
        <member name="M:_0rison.Util.HexToByte(System.Char)">
            <summary>
            Converts a hex character to a byte.
            </summary>
            <param name="c">The input character.</param>
            <returns>The byte.</returns>
        </member>
        <member name="M:_0rison.Util.Min(System.Single[])">
            <summary>
            Get the minimum value from a set of values.
            </summary>
            <param name="values">The values to test.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:_0rison.Util.Max(System.Single[])">
            <summary>
            Get the maximum value from a set of values.
            </summary>
            <param name="values">The values to test.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="M:_0rison.Util.Scale(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Convert a number in a range of min, max to a number in the range min2, max2.
            Also known as RemapRange in some frameworks.
            </summary>
            <param name="value">The input value.</param>
            <param name="min">The original minimum.</param>
            <param name="max">The original maximum.</param>
            <param name="min2">The new minimum.</param>
            <param name="max2">The new maximum.</param>
            <returns>A value scaled from the original min and max to the new min and max.</returns>
        </member>
        <member name="M:_0rison.Util.ScaleClamp(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Convert a number in range of min, max to a number in the range min2, max2, but also
            clamp the result inside min2 and max2.
            </summary>
            <param name="value">The input value.</param>
            <param name="min">The original minimum.</param>
            <param name="max">The original maximum.</param>
            <param name="min2">The new minimum.</param>
            <param name="max2">The new maximum.</param>
            <returns>A value scaled from the original min and max to the new min and max, and clamped to the new min and max.</returns>
        </member>
        <member name="M:_0rison.Util.SinScale(System.Single,System.Single,System.Single)">
            <summary>
            Shortcut to Scale the value from a sine wave.  Original min and max are -1 and 1.
            </summary>
            <param name="value">The input value to sine.</param>
            <param name="min">The new minimum.</param>
            <param name="max">The new maximum.</param>
            <returns>A value scaled from -1 and 1 to the new min and max.</returns>
        </member>
        <member name="M:_0rison.Util.SinScaleClamp(System.Single,System.Single,System.Single)">
            <summary>
            Shortcut to ScaleClamp the value from a sine wave.  Original min and max are -1 and 1.
            </summary>
            <param name="value">The input value to sine.</param>
            <param name="min">The new minimum.</param>
            <param name="max">The new maximum.</param>
            <returns>A value scaled from -1 and 1 to the new min and max, and clamped to the new min and max.</returns>
        </member>
        <member name="M:_0rison.Util.Floor(System.Single)">
            <summary>
            Round down.
            </summary>
            <param name="value">The value.</param>
            <returns>The value rounded down.</returns>
        </member>
        <member name="M:_0rison.Util.Ceil(System.Single)">
            <summary>
            Round up.
            </summary>
            <param name="value">The value.</param>
            <returns>The value rounded up.</returns>
        </member>
        <member name="M:_0rison.Util.Round(System.Single)">
            <summary>
            Round.
            </summary>
            <param name="value">The value.</param>
            <returns>The value rounded.</returns>
        </member>
        <member name="M:_0rison.Util.Angle(System.Single,System.Single)">
            <summary>
            The angle of a x and y coordinate.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <returns>An angle between 0 - 360 degrees.</returns>
        </member>
        <member name="M:_0rison.Util.Angle(_0rison.Entity,_0rison.Entity)">
            <summary>
            Get the angle between two Entities.
            </summary>
            <param name="e1">The first Entity.</param>
            <param name="e2">The second Entity.</param>
            <returns>The angle between the two Entity's positions between 0 - 360 degrees.</returns>
        </member>
        <member name="M:_0rison.Util.Angle(_0rison.Vector2)">
            <summary>
            The angle of a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>An angle between 0 - 360 degrees.</returns>
        </member>
        <member name="M:_0rison.Util.Angle(_0rison.Vector2,_0rison.Vector2)">
            <summary>
            Get the angle between two vectors.
            </summary>
            <param name="from">The first vector.</param>
            <param name="to">The second vector.</param>
            <returns>The angle between the two vectors.</returns>
        </member>
        <member name="M:_0rison.Util.Angle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Get the angle between two positions.
            </summary>
            <param name="x1">The first X position.</param>
            <param name="y1">The first Y position.</param>
            <param name="x2">The second X position.</param>
            <param name="y2">The second Y position.</param>
            <returns>The angle between the two positions.</returns>
        </member>
        <member name="M:_0rison.Util.AngleDifference(System.Single,System.Single)">
            <summary>
            Get the difference between two angles from -180 to 180.
            </summary>
            <param name="a">The first angle.</param>
            <param name="b">The second angle.</param>
            <returns>The difference between the angles from -180 to 180.</returns>
        </member>
        <member name="M:_0rison.Util.AngleDifferenceSign(System.Single,System.Single)">
            <summary>
            Get the shortest direction from angle a to angle b.
            </summary>
            <param name="a">The first angle.</param>
            <param name="b">The second angle..</param>
            <returns>1 for clockwise, -1 for counter clockwise, 0 if angles are the same.</returns>
        </member>
        <member name="M:_0rison.Util.Rotate(_0rison.Vector2,System.Single)">
            <summary>
            Rotate a position by an angle.
            </summary>
            <param name="vector">The position to rotate.</param>
            <param name="amount">The amount to rotate the position in degrees.</param>
            <returns>The new rotated position.</returns>
        </member>
        <member name="M:_0rison.Util.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotate a position by an angle.
            </summary>
            <param name="x">The X position to rotate.</param>
            <param name="y">The Y position to rotate.</param>
            <param name="amount">The amount to rotate the position in degrees.</param>
            <returns>The new rotated position.</returns>
        </member>
        <member name="M:_0rison.Util.RotateAround(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Rotate a position by an angle around an anchor point.
            </summary>
            <param name="x">The X position to rotate.</param>
            <param name="y">The Y position to rotate.</param>
            <param name="aroundX">The X position to rotate around.</param>
            <param name="aroundY">The Y position to rotate around.</param>
            <param name="amount">The amount to rotate the position in degrees.</param>
            <returns>The new rotated position.</returns>
        </member>
        <member name="M:_0rison.Util.RotateAround(_0rison.Vector2,_0rison.Vector2,System.Single)">
            <summary>
            Rotate a position by an angle around an anchor point.
            </summary>
            <param name="point">The position to rotate.</param>
            <param name="around">The position to rotate around.</param>
            <param name="amount">The amount to rotate the position in degrees.</param>
            <returns>The new rotated position.</returns>
        </member>
        <member name="M:_0rison.Util.ScaleAround(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Scale a position by an amount around an anchor point.
            </summary>
            <param name="x">The X position to scale.</param>
            <param name="y">The Y position to scale.</param>
            <param name="aroundX">The X position to scale around.</param>
            <param name="aroundY">The Y position to scale around.</param>
            <param name="amountX">The X amount to scale by.</param>
            <param name="amountY">The Y amount to scale by.</param>
            <returns>The new scaled position.</returns>
        </member>
        <member name="M:_0rison.Util.ScaleAround(_0rison.Vector2,_0rison.Vector2,System.Single,System.Single)">
            <summary>
            Scale a position by an amount around an anchor point.
            </summary>
            <param name="point">The position to scale.</param>
            <param name="around">The position to scale around.</param>
            <param name="amountX">The X amount to scale by.</param>
            <param name="amountY">The Y amount to scale by.</param>
            <returns>The new scaled position.</returns>
        </member>
        <member name="M:_0rison.Util.ScaleAround(_0rison.Vector2,_0rison.Vector2,System.Single)">
            <summary>
            Scale a position by an amount around an anchor point.
            </summary>
            <param name="point">The position to scale.</param>
            <param name="around">The position to scale around.</param>
            <param name="amount">The amount to scale by.</param>
            <returns>The new scaled position.</returns>
        </member>
        <member name="M:_0rison.Util.ScaleAround(_0rison.Vector2,_0rison.Vector2,_0rison.Vector2)">
            <summary>
            Scale a position by an amount around an anchor point.
            </summary>
            <param name="point">The position to scale.</param>
            <param name="around">The position to scale around.</param>
            <param name="amount">The amount to scale by.</param>
            <returns>The new scaled position.</returns>
        </member>
        <member name="M:_0rison.Util.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Distance check.
            </summary>
            <param name="x1">The first X position.</param>
            <param name="y1">The first Y position.</param>
            <param name="x2">The second X position.</param>
            <param name="y2">The second Y position.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:_0rison.Util.Distance(_0rison.Vector2,_0rison.Vector2)">
            <summary>
            Distance check.
            </summary>
            <param name="from">The first position.</param>
            <param name="to">The second position.</param>
            <returns>The distance between the two positions.</returns>
        </member>
        <member name="M:_0rison.Util.Distance(_0rison.Entity,_0rison.Entity)">
            <summary>
            Distance check.
            </summary>
            <param name="e1">The first Entity.</param>
            <param name="e2">The second Entity.</param>
            <returns>The distance between the Entities.</returns>
        </member>
        <member name="M:_0rison.Util.InRect(_0rison.Vector2,_0rison.Vector2,_0rison.Vector2)">
            <summary>
            Check for a point in a rectangle defined by min and max points.
            </summary>
            <param name="p">The point to check.</param>
            <param name="min">The top left corner of the rectangle.</param>
            <param name="max">The bottom right corner of the rectangle.</param>
            <returns>True if the point is in the rectangle.</returns>
        </member>
        <member name="M:_0rison.Util.InRect(System.Single,System.Single,_0rison.Rectangle)">
            <summary>
            Check for a point in a rectangle.
            </summary>
            <param name="x">The X position of the point to check.</param>
            <param name="y">The Y position of the point to check.</param>
            <param name="rect">The rectangle.</param>
            <returns>True if the point is in the rectangle.</returns>
        </member>
        <member name="M:_0rison.Util.InRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Check for a point in a rectangle.
            </summary>
            <param name="x">The X position of the point to check.</param>
            <param name="y">The Y position of the point to check.</param>
            <param name="rx">The left of the rectangle.</param>
            <param name="ry">The top of the rectangle.</param>
            <param name="rw">The width of the rectangle.</param>
            <param name="rh">The height of the rectangle.</param>
            <returns>True if the point is in the rectangle.</returns>
        </member>
        <member name="M:_0rison.Util.InRect(_0rison.Vector2,_0rison.Rectangle)">
            <summary>
            Check for a point in a rectangle.
            </summary>
            <param name="xy">The X and Y position of the point to check.</param>
            <param name="rect">The rectangle.</param>
            <returns>True if the point is in the rectangle.</returns>
        </member>
        <member name="M:_0rison.Util.InCircle(_0rison.Vector2,_0rison.Vector2,System.Single)">
            <summary>
            Check for a point inside of a circle.
            </summary>
            <param name="p">The point to check.</param>
            <param name="circleP">The center point of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <returns>True if the point is inside the circle.</returns>
        </member>
        <member name="M:_0rison.Util.InCircle(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Check for a point inside of a circle.
            </summary>
            <param name="x">The X position to check.</param>
            <param name="y">The Y position to check.</param>
            <param name="circleX">The center X position of the circle.</param>
            <param name="circleY">The center Y position of the check.</param>
            <param name="radius">The radius of the circle.</param>
            <returns>True if the point is inside the circle.</returns>
        </member>
        <member name="M:_0rison.Util.IntersectRectangles(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Check an intersection between two rectangles.
            </summary>
            <param name="x1">The left of the first rectangle.</param>
            <param name="y1">The top of the first rectangle.</param>
            <param name="w1">The width of the first rectangle.</param>
            <param name="h1">The height of the first rectangle.</param>
            <param name="x2">The left of the second rectangle.</param>
            <param name="y2">The top of the second rectangle.</param>
            <param name="w2">The width of the second rectangle.</param>
            <param name="h2">The height of the second rectangle.</param>
            <returns>True if the rectangles intersect.</returns>
        </member>
        <member name="M:_0rison.Util.PolarX(System.Single,System.Single)">
            <summary>
            The X component of a vector represented by an angle and radius.
            </summary>
            <param name="angle">The angle of the vector.</param>
            <param name="length">The length of the vector.</param>
            <returns>The X component.</returns>
        </member>
        <member name="M:_0rison.Util.PolarY(System.Single,System.Single)">
            <summary>
            The Y component of a vector represented by an angle and radius.
            </summary>
            <param name="angle">The angle of the vector.</param>
            <param name="length">The length of the vector.</param>
            <returns>The Y component.</returns>
        </member>
        <member name="M:_0rison.Util.Sin(System.Single)">
            <summary>
            Wrapper for the sin function that uses degrees.
            </summary>
            <param name="degrees">The angle.</param>
            <returns>The sine of the angle.</returns>
        </member>
        <member name="M:_0rison.Util.Cos(System.Single)">
            <summary>
            Wrapper for the cos function that uses degrees.
            </summary>
            <param name="degrees">The angle.</param>
            <returns>The cosine of the angle.</returns>
        </member>
        <member name="M:_0rison.Util.OneDee(System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert a two dimensional position to a one dimensional index.
            </summary>
            <param name="width">The width of the two dimensional set.</param>
            <param name="x">The X position in the two dimensional set.</param>
            <param name="y">The Y position in the two dimensional set.</param>
            <returns>The one dimensional index in a two dimensional set.</returns>
        </member>
        <member name="M:_0rison.Util.TwoDee(System.Int32,System.Int32)">
            <summary>
            Convert a one dimensional index to a two dimensional position.
            </summary>
            <param name="index">The one dimensional index in the two dimensional set.</param>
            <param name="width">The width of the two dimensional set.</param>
            <returns>The X and Y position in the two dimensional set.</returns>
        </member>
        <member name="M:_0rison.Util.TwoDeeX(System.Int32,System.Int32)">
            <summary>
            The X position from converting an index to a two dimensional position.
            </summary>
            <param name="index">The one dimensional index in the two dimensional set.</param>
            <param name="width">The width of the two dimensional set.</param>
            <returns>The X position in the two dimensional set.</returns>
        </member>
        <member name="M:_0rison.Util.TwoDeeY(System.Int32,System.Int32)">
            <summary>
            The Y position from converting an index to a two dimensional position.
            </summary>
            <param name="index">The one dimensional index in the two dimensional set.</param>
            <param name="width">The width of the two dimensional set.</param>
            <returns>The Y position in the two dimensional set.</returns>
        </member>
        <member name="M:_0rison.Util.Normal(System.Single)">
            <summary>
            Normal vector.
            </summary>
            <param name="angle">The angle.</param>
            <returns>The normal vector of that angle.</returns>
        </member>
        <member name="M:_0rison.Util.HasMethod(System.Object,System.String)">
            <summary>
            Checks if an object contains a method.
            </summary>
            <param name="objectToCheck">The object to check for the method on.</param>
            <param name="methodName">The name of the method to check for.</param>
            <returns>True if the object has that method.</returns>
        </member>
        <member name="M:_0rison.Util.HasProperty(System.Object,System.String)">
            <summary>
            Checks if an object contains a property.
            </summary>
            <param name="objectToCheck">The object to check for the property on.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>True if the object has that property.</returns>
        </member>
        <member name="M:_0rison.Util.GetPropValue(System.Object,System.String)">
            <summary>
            Get the value of a property from an object.
            </summary>
            <param name="source">The object to get the property from.</param>
            <param name="propName">The name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:_0rison.Util.HasField(System.Object,System.String)">
            <summary>
            Checks to see if an object has a field by name.
            </summary>
            <param name="objectToCheck">The object to check for the field on.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>True if the object has that property.</returns>
        </member>
        <member name="M:_0rison.Util.GetFieldValue(System.Object,System.String)">
            <summary>
            Get the value of a field by name from an object.
            </summary>
            <param name="source">The object to get the field from.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>The value of the field.</returns>
        </member>
        <member name="M:_0rison.Util.GetFieldValue(System.Type,System.String)">
            <summary>
            Get the static value of a field by name from an object.
            </summary>
            <param name="type">The type to look for the field in.</param>
            <param name="fieldName">The name of the static field.</param>
            <returns>The value of the static field.</returns>
        </member>
        <member name="M:_0rison.Util.GetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Get the value of a field by name from an object with a default return.
            </summary>
            <param name="source">The object to get the field from.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="returnOnNull">The value to return if the field is not found.</param>
            <returns>The field value or the value to return if the field is not found.</returns>
        </member>
        <member name="M:_0rison.Util.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Set the value of a field on an object by name.
            </summary>
            <param name="src">The object to set the field on.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="value">The new value of the field.</param>
        </member>
        <member name="M:_0rison.Util.InRange(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a value is in a specified range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>True if the value is in the range.</returns>
        </member>
        <member name="M:_0rison.Util.Subset(System.Single,System.Single,System.Single)">
            <summary>
            Returns a value according to a value's position in a range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>0 if the value is in the set.  -1 if the value is below the minimum.  1 if the value is above the maximum.</returns>
        </member>
        <member name="M:_0rison.Util.WrapAngle(System.Single)">
            <summary>
            Wrap and angle and keep it within the range of 0 to 360.
            </summary>
            <param name="angle">The angle.</param>
            <returns>The angle wrapped to be in the range of 0 to 360.</returns>
        </member>
        <member name="M:_0rison.Util.DistanceRectPoint(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Find the distance between a point and a rectangle.
            </summary>
            <param name="px">The X position of the point.</param>
            <param name="py">The Y position of the point.</param>
            <param name="rx">The X position of the rectangle.</param>
            <param name="ry">The Y position of the rectangle.</param>
            <param name="rw">The width of the rectangle.</param>
            <param name="rh">The height of the rectangle.</param>
            <returns>The distance.  Returns 0 if the point is within the rectangle.</returns>
        </member>
        <member name="M:_0rison.Util.DistanceRectPoint(System.Single,System.Single,_0rison.Rectangle)">
            <summary>
            Find the distance between a point and a rectangle.
            </summary>
            <param name="px">The X position of the point.</param>
            <param name="py">The Y position of the point.</param>
            <param name="rect">The rectangle.</param>
            <returns>The distance.  Returns 0 if the point is within the rectangle.</returns>
        </member>
        <member name="M:_0rison.Util.XmlAttributesToDictionary(System.Xml.XmlAttributeCollection)">
            <summary>
            Convert XML attributes to a dictionary.
            </summary>
            <param name="attributes">The attributes to convert.</param>
            <returns>A dictionary of string, string with the attribute names and values.</returns>
        </member>
        <member name="M:_0rison.Util.GetTypeFromAllAssemblies(System.String,System.Boolean)">
            <summary>
            Searches all known assemblies for a type and returns that type.
            </summary>
            <param name="type">The type to search for.</param>
            <returns>The type found.  Null if no match.</returns>
        </member>
        <member name="M:_0rison.Util.GetTypesFromAllAssemblies">
            <summary>
            Get the list of all types in all known assemblies.
            </summary>
            <returns>The list of all types in all known assemblies.</returns>
        </member>
        <member name="M:_0rison.Util.GetBasicTypeName(System.Object)">
            <summary>
            Get the basic type name of an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>The basic type name of the object.</returns>
        </member>
        <member name="M:_0rison.Util.CompressString(System.String)">
            <summary>
            Compresses a string and base64 encodes it.  Use "DecompressString" to restore it.
            </summary>
            <param name="str">The string to compress.</param>
            <returns>The compressed string.</returns>
        </member>
        <member name="M:_0rison.Util.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies a stream from source to destination.
            </summary>
            <param name="src">The string to copy.</param>
            <param name="dest">The stream to copy the string to.</param>
        </member>
        <member name="M:_0rison.Util.DecompressString(System.String)">
            <summary>
            Decompresses a string compressed with "CompressString"
            </summary>
            <param name="base64str">The compressed string.</param>
            <returns>The uncompressed string.</returns>
        </member>
        <member name="M:_0rison.Util.CompressBytes(System.Byte[])">
            <summary>
            Compresses a byte array using GZip
            </summary>
            <param name="data">The data to compress</param>
            <returns>The compressed byte array</returns>
        </member>
        <member name="M:_0rison.Util.DecompressBytes(System.Byte[])">
            <summary>
            Decompresses a byte array using GZip
            </summary>
            <param name="data">The data to decompress</param>
            <returns>The decompressed byte array</returns>
        </member>
        <member name="M:_0rison.Util.DictionaryToString(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Converts a dictionary of string, string into a string of data.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="keydelim">The string that separates keys.</param>
            <param name="valuedelim">The string that separates values.</param>
            <returns>A string with all of the dictionary's data.</returns>
        </member>
        <member name="M:_0rison.Util.StringToDictionary(System.String,System.String,System.String)">
            <summary>
            Convert a string into a dictionary of string, string.
            </summary>
            <param name="source">The string to convert into a dictionary.</param>
            <param name="keydelim">The string that separates keys.</param>
            <param name="valuedelim">The string that separates values.</param>
            <returns>A dictionary with all the string's data.</returns>
        </member>
        <member name="M:_0rison.Util.MD5Hash(System.String)">
            <summary>
            Calculate an MD5 hash of a string.
            </summary>
            <param name="input">The string to calculate the has for.</param>
            <returns>The MD5 hash of the string.</returns>
        </member>
        <member name="M:_0rison.Util.EnumValues``1">
            <summary>
            Get all the values of an enum without a giant mess of code.
            </summary>
            <typeparam name="T">The type of the Enum.</typeparam>
            <returns>An enumerable containing all the enum values.</returns>
        </member>
        <member name="M:_0rison.Util.ParsePercent(System.String)">
            <summary>
            Convert a string number to a float. If the string contains a % char it will be parsed as a percentage.
            For example "50%" => 0.5f, or 50 => 50f.
            </summary>
            <param name="percent">The string to parse.</param>
            <returns>If the string contained % a float of the percent on the scale of 0 to 1. Otherwise the float.</returns>
        </member>
        <member name="M:_0rison.Util.GetURLString(System.String)">
            <summary>
            Download data from a URL. This method will stall the thread. Probably
            should use something like a BackgroundWorker or something but I haven't
            figured that out yet.
            </summary>
            <param name="url">The url to download.</param>
            <returns>The string downloaded from the url.</returns>
        </member>
        <member name="M:_0rison.Util.ParseEnum``1(System.String)">
            <summary>
            Parse an enum value from a string.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string to parse.</param>
            <returns>The enum value.</returns>
        </member>
        <member name="M:_0rison.Util.EnumValueToString(System.Enum)">
            <summary>
            Convert a generic enum's value to a string.
            </summary>
            <param name="value">The enum value.</param>
            <returns>The string of the enum value.</returns>
        </member>
        <member name="M:_0rison.Util.EnumValueToBasicString(System.Enum)">
            <summary>
            Convert a generic enum's value into a string of just its value. (No type included!)
            </summary>
            <param name="e">The enum value.</param>
            <returns>The value of the enum following the final period.</returns>
        </member>
        <member name="M:_0rison.Util.EnumToIntArray(System.Enum[])">
            <summary>
            Convert an array of generic enums to ints.
            </summary>
            <param name="enums">The enums to convert.</param>
            <returns>An array of ints.</returns>
        </member>
        <member name="M:_0rison.Util.DistanceLinePoint(System.Single,System.Single,_0rison.Line2)">
            <summary>
            Distance between a line and a point.
            </summary>
            <param name="x">The X position of the point.</param>
            <param name="y">The Y position of the point.</param>
            <param name="line">The line.</param>
            <returns>The distance from the point to the line.</returns>
        </member>
        <member name="M:_0rison.Util.DistanceLinePoint(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Distance between a line and a point.
            </summary>
            <param name="x">The X position of the point.</param>
            <param name="y">The Y position of the point.</param>
            <param name="x1">The first X position of the line.</param>
            <param name="y1">The first Y position of the line.</param>
            <param name="x2">The second X position of the line.</param>
            <param name="y2">The second Y position of the line.</param>
            <returns>The distance from the point to the line.</returns>
        </member>
        <member name="M:_0rison.Util.GetPowerSet``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets every possible combination of a List.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="list">A list of objects.</param>
            <returns>An IEnumerable of every possible combination in the List.</returns>
        </member>
        <member name="M:_0rison.Util.SerializeToFile``1(``0,System.String)">
            <summary>
            Shortcut to serialize an object to a file.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="obj">The object to serialize.</param>
            <param name="path">The file to write to.</param>
        </member>
        <member name="M:_0rison.Util.DeserializeFromFile``1(System.String)">
            <summary>
            Shortcut to deserialize an object from a file.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="path">The file to read from.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:_0rison.Util.BezierCurvePoint(System.Single,_0rison.Vector2,_0rison.Vector2,_0rison.Vector2,_0rison.Vector2)">
            <summary>
            Calculates the point in a cubic Bezier curve at t (0 to 1) using 4 control points.
            </summary>
            <param name="t">Distance along the curve 0 to 1.</param>
            <param name="p0">The first control point.</param>
            <param name="p1">The second control point.</param>
            <param name="p2">The third control point.</param>
            <param name="p3">The fourth control point.</param>
            <returns>A Vector2 point along the curve at distance t.</returns>
        </member>
        <member name="M:_0rison.Util.BezierPathPoint(System.Single,_0rison.Vector2[])">
            <summary>
            Find the point on a Bezier path at t.
            </summary>
            <param name="t">The progress along the path 0 to 1.</param>
            <param name="points">The points that make up the cubic Bezier path. (4 points per curve, 1 point of overlap.)</param>
            <returns>The position on the curve at t.</returns>
        </member>
        <member name="M:_0rison.Util.SplinePathPoint(System.Single,_0rison.Vector2[])">
            <summary>
            Gets the spline path point.
            </summary>
            <param name="t">The progress on the path from 0 to 1.</param>
            <param name="path">The set of points making the path.</param>
            <returns>The position on the spline path for the progress t.</returns>
        </member>
        <member name="P:_0rison.Util.DesktopWidth">
            <summary>
            The Width of the desktop.  Note that this is for the display that the game was initialized in.
            </summary>
        </member>
        <member name="P:_0rison.Util.DesktopHeight">
            <summary>
            The height of the desktop.  Note that this is for the display that the game was initialized in.
            </summary>
        </member>
        <member name="M:_0rison.Util.ListCombine``1(System.Collections.Generic.List{``0}[])">
            <summary>
            Combines Lists of the same type into one list. Does not remove duplicates.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="lists">The Lists to combine.</param>
            <returns>One List to rule them all.</returns>
        </member>
        <member name="M:_0rison.Util.GetTypesWithAttribute``1(System.Boolean)">
            <summary>
            Get all types with a specific Attribute.
            </summary>
            <typeparam name="T">The type of Attribute.</typeparam>
            <param name="inherit">Check inherited classes.</param>
            <returns>All types with the Attribute T.</returns>
        </member>
        <member name="M:_0rison.Util.GetSpreadsheetJsonById(System.String,System.String)">
            <summary>
            Download the json feed of a Google Spreadsheet from the key and sheet id.
            Only works on publicly shared sheets.
            </summary>
            <param name="docKey">The long id of the sheet.  Usually a big set of numbers and letters in the url.</param>
            <param name="sheetId">The sheet id.  Usually a shorter set of letters and numbers.  Default is "od6".</param>
            <returns>A json feed of the spreadsheet.</returns>
        </member>
        <member name="M:_0rison.Util.GetSpreadsheetJsonByName(System.String,System.String)">
            <summary>
            Download the json feed of a Google Spreadsheet from the key and the sheet name.
            Only works on publicly shared sheets.
            </summary>
            <param name="docKey">The long id of the sheet.  Usually a big set of numbers and letters in the url.</param>
            <param name="sheetName">The name of the sheet as it appears on the bottom left of the spreadsheet window.</param>
            <returns>A json feed of the spreadsheet.</returns>
        </member>
        <member name="M:_0rison.Util.GetSpreadsheetId(System.String,System.String)">
            <summary>
            Get the internal id of a Google Spreadsheet sheet.
            Only works on publicly shared sheets.
            </summary>
            <param name="docKey">The long id of the sheet.  Usually a big set of numbers and letters in the url.</param>
            <param name="sheetName">The name of the sheet as it appears on the bottom left of the spreadsheet window.</param>
            <returns>The internal id of the sheet.</returns>
        </member>
        <member name="M:_0rison.Util.GetSpreadsheetIds(System.String)">
            <summary>
            Get the internal ids of all sheets in a Google Spreadsheet.
            Only works on publicly shared sheets.
            </summary>
            <param name="docKey">The long id of the sheet.  Usually a big set of numbers and letters in the url.</param>
            <returns>A dictionary with sheet names as the keys, and ids as the values.</returns>
        </member>
        <member name="T:_0rison.Vector2">
            <summary>
            Struct for representing a Vector2.
            </summary>
        </member>
        <member name="T:_0rison.Vector3">
            <summary>
            Struct for representing a Vector3.
            </summary>
        </member>
        <member name="M:_0rison.Vector3.Transform(_0rison.Vector3,_0rison.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:_0rison.Vector3.Transform(_0rison.Vector3@,_0rison.Quaternion@,_0rison.Vector3@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="value">The vector to transform.</param>
            <param name="rotation">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:_0rison.Vector3.Transform(_0rison.Vector3[],_0rison.Quaternion@,_0rison.Vector3[])">
            <summary>
            Transforms an array of vectors by a quaternion rotation.
            </summary>
            <param name="sourceArray">The vectors to transform</param>
            <param name="rotation">The quaternion to rotate the vector by.</param>
            <param name="destinationArray">The result of the operation.</param>
        </member>
        <member name="M:_0rison.Vector3.Transform(_0rison.Vector3[],System.Int32,_0rison.Quaternion@,_0rison.Vector3[],System.Int32,System.Int32)">
            <summary>
            Transforms an array of vectors within a given range by a quaternion rotation.
            </summary>
            <param name="sourceArray">The vectors to transform.</param>
            <param name="sourceIndex">The starting index in the source array.</param>
            <param name="rotation">The quaternion to rotate the vector by.</param>
            <param name="destinationArray">The array to store the result of the operation.</param>
            <param name="destinationIndex">The starting index in the destination array.</param>
            <param name="length">The number of vectors to transform.</param>
        </member>
        <member name="T:_0rison.Vector4">
            <summary>
            Struct for representing a Vector4.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:EventRouter" -->
        <member name="T:EventRouter.Event">
            <summary>
            	Event data class, passed in to the subscriber whenever an event occours.
            </summary>
        </member>
        <member name="M:EventRouter.Subscribe(System.Enum,EventRouter.Handler,System.Object)">
            <summary>
            Subscribe to the event specified by evt.  Pass in a delegate to be called back when the even occurs.
            </summary>
            <param name='evt'>
            The event enumeration value.
            </param>
            <param name='h'>
            The delegate to be called when the even occurs.
            </param>
        </member>
        <member name="M:EventRouter.Subscribe(System.String,System.Enum,EventRouter.Handler,System.Object)">
            <summary>
            Subscribe to the event specified by evt filtered by the specified id.  Pass in a delegate to be called back when the even occurs.
            </summary>
            <param name='id'>
            The id of the event
            </param>
            <param name='evt'>
            The event enumeration value.
            </param>
            <param name='h'>
            The delegate to be called when the even occurs.
            </param>
        </member>
        <member name="M:EventRouter.Subscribe(System.String,System.String,EventRouter.Handler,System.Object)">
            <summary>
            Subscribe to the event specified by evt.  Pass in a delegate to be called back when the even occurs.
            </summary>
            <param name='id'>
            The string representing the id.
            </param>
            <param name='evt'>
            The string representing the event.
            </param>
            <param name='h'>
            The delegate to be called when the even occurs.
            </param>
        </member>
        <member name="M:EventRouter.Subscribe(System.String,EventRouter.Handler,System.Object)">
            <summary>
            Subscribe to the event specified by evt.  Pass in a delegate to be called back when the even occurs.
            </summary>
            <param name='evt'>
            The string representing the event.
            </param>
            <param name='h'>
            The delegate to be called when the even occurs.
            </param>
        </member>
        <member name="M:EventRouter.Unsubscribe(System.String,System.Enum,EventRouter.Handler)">
            <summary>
            Unsubscribe the specified delegate from the event.
            </summary>
            <param name='id'>
            The id of the event
            </param>
            <param name='evt'>
            The event enumeration value.
            </param>
            <param name='h'>
            The delegate to be removed from the event handlers.
            </param>
        </member>
        <member name="M:EventRouter.Unsubscribe(System.Enum,EventRouter.Handler)">
            <summary>
            Unsubscribe the specified delegate from the event.
            </summary>
            <param name='evt'>
            The event enumeration value.
            </param>
            <param name='h'>
            The delegate to be removed from the event handlers.
            </param>
        </member>
        <member name="M:EventRouter.Unsubscribe(System.String,EventRouter.Handler)">
            <summary>
            Unsubscribe the specified delegate from the event.
            </summary>
            <param name='evt'>
            The string representing the event.
            </param>
            <param name='h'>
            The delegate to be removed from the event handlers.
            </param>
        </member>
        <member name="M:EventRouter.Unsubscribe(System.String,System.String,EventRouter.Handler)">
            <summary>
            Unsubscribe the specified delegate from the event.
            </summary>
            <param name='id'>
            The string representing the id.
            </param>
            <param name='evt'>
            The string representing the event.
            </param>
            <param name='h'>
            The delegate to be removed from the event handlers.
            </param>
        </member>
        <member name="M:EventRouter.Unsubscribe(System.Object)">
            <summary>
            Unsubscribe to all events that were subscribed to by a specific owner object.
            </summary>
            <param name="owner">The object that subscribed to the object.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EventRouter.Publish(System.String,System.String,System.Object[])" -->
        <member name="M:EventRouter.Publish(System.String,System.Object[])">
            <summary>
            Publish the specified event with extra data.
            </summary>
            <param name='evt'>
            The string representing the event.
            </param>
            <param name='data'>
            An arbitrary params array of objects to be interpreted by the receiver of the event.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EventRouter.Publish(System.String,System.Enum,System.Object[])" -->
        <member name="M:EventRouter.Publish(System.Enum,System.Object[])">
            <summary>
            Publish the specified event with extra data.
            </summary>
            <param name='evt'>
            The event enumeration value.
            </param>
            <param name='data'>
            An arbitrary params array of objects to be interpreted by the receiver of the event.
            </param>
        </member>
        <member name="M:EventRouter.Clear">
            <summary>
            Clear all event subscribers, used primarily when switching or resetting a level.
            </summary>
        </member>
    </members>
</doc>
